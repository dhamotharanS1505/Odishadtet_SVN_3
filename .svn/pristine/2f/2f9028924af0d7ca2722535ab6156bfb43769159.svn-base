
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Odishadtet.Models;
using WebGrease.Css.Ast;
using LearnEngineeringPortalService_ITI;
using System.Data.Entity.Core.Objects;
using System.Globalization;
using System.Configuration;
using System.Web.Script.Serialization;
using LearnEnggPaymentPortal;
using System.Data.Entity.Migrations;
using System.Data.SqlClient;
using System.Text;
using System.Runtime.InteropServices;
using System.Web.Mvc;
using LearnEngineeringPortalService_ITI.BusinessLogic;
using System.Data.Entity.SqlServer;
using Odishadtet.General;
using System.Data;
using System.Xml.Linq;
using System.Data.Entity.Core;
using LearnEngineeringPortalService_ITI.DataAccess;
using Odishadtet.DAL;
using Odishadtet.General;

namespace Odishadtet.DAL
{
    public class AdminService : IAdminService
    {
        string PageName = "AdminService.cs";

        public List<AdminActivityModel> OrderStatusPrparation()
        {
            List<AdminActivityModel> adminactivity = new List<AdminActivityModel>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                adminactivity = (from Orderobj in contextsdce.user_subscribe_order_track
                                 select new AdminActivityModel
                                 {
                                     orderstatus = Orderobj.orderstatus,
                                     orderon = Orderobj.orderon,
                                     orderrefno = Orderobj.orderrefno,
                                     ordermobile = Orderobj.ordermobile

                                 }).ToList();
            }
            return adminactivity;
        }


        /// <summary>
        /// To get all open orders from cart from all users 
        /// </summary>
        /// <returns></returns>
        public List<OpenOrdersDetails> GetOpenOrderDetails(string mapuniv)
        {
            string[] mappedUniv = mapuniv.ToString().Split(',');

            List<OpenOrdersDetails> open_orders = new List<OpenOrdersDetails>();
            try
            {
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    var order = (from usm in contextsdce.user_subscribe_master
                                 join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                 join um in contextsdce.user_master on usm.user_id equals um.user_id
                                 join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                 from umpfby in lftum.DefaultIfEmpty()
                                 join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                 join dom in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals dom.user_subscribe_delivery_mode_id
                                 join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                 where mappedUniv.Contains(um.univ_id.ToString()) && um.active_status == 1 && usm.order_status == 1 && usm.order_status == usot.orderstatus
                                 && usm.payment_ref_no == usot.orderrefno && dom.delivery_type == 1 && pm.TxnStatus == "2"
                                 select new
                                 {
                                     identyvalue = usm.user_subscribe_master_id,
                                     orderstsus = usm.order_status,
                                     orderid = usot.orderrefno,
                                     orderplacedon = usot.orderon,
                                     packageid = usot.package_id,
                                     delvierymode = usdm.subscribe_delivery_mode,
                                     username = um.user_name,
                                     mobile = usot.ordermobile,
                                     prepartionstatus = usot.preparedstatus,
                                     preparedby = umpfby.user_name,
                                     preparedon = usot.preparedon,
                                     qualitycheck = usot.qualitycheckstatus,
                                     Deliveryon = usot.deliveron,
                                     Paymenton = usot.payreceiveon,
                                     deliverystatus = usot.deliverstatus,
                                     paymentstatus = usot.paystatus
                                 }).ToList();


                    open_orders = (from t in order
                                   group t by t.orderid into s
                                   select new OpenOrdersDetails
                                   {
                                       Identyvalue = s.FirstOrDefault().identyvalue,
                                       OrderStatus = s.FirstOrDefault().orderstsus == 1 ? "In-Progress" : s.FirstOrDefault().orderstsus == 2 ? "Order Canceled" : s.FirstOrDefault().orderstsus == 3 ? "Ready to Delivery" : s.FirstOrDefault().orderstsus == 4 ? "Partially Delivered" : "Delivered",
                                       OrderRefNo = s.FirstOrDefault().orderid,
                                       OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                       OrderPlacedOn = s.FirstOrDefault().orderplacedon.ToString("dd-MM-yyyy"),
                                       TotalItems = s.Select(x => x.packageid).Count(),
                                       DeliveryMode = s.FirstOrDefault().delvierymode,
                                       UserName = s.FirstOrDefault().username,
                                       Mobile = s.FirstOrDefault().mobile,
                                       PreparationStatus = s.FirstOrDefault().prepartionstatus == 1 ? "Not yet prepare" : s.FirstOrDefault().prepartionstatus == 2 ? "In-Progress" : s.FirstOrDefault().prepartionstatus == 3 ? "Completed" : s.FirstOrDefault().prepartionstatus == 4 ? "Rework" : "ReCheck",
                                       Preparedby = s.FirstOrDefault().preparedby == null ? "-" : s.FirstOrDefault().preparedby.ToString(),
                                       PreparedDate = s.FirstOrDefault().preparedon == null ? "-" : s.FirstOrDefault().preparedon.Value.ToString("dd-MM-yyyy"),
                                       QC_Status = s.FirstOrDefault().qualitycheck == 1 ? "Not yet started" : s.FirstOrDefault().qualitycheck == 2 ? "In-Progress" : s.FirstOrDefault().qualitycheck == 3 ? "Completed" : s.FirstOrDefault().qualitycheck == 4 ? "Quality Fail" : "Not Yet Received",
                                       DeliveryDate = s.FirstOrDefault().Deliveryon == null ? "-" : s.FirstOrDefault().Deliveryon.Value.ToString("dd-MM-yyyy"),
                                       PaymentDate = s.FirstOrDefault().Paymenton == null ? "-" : s.FirstOrDefault().Paymenton.Value.ToString("dd-MM-yyyy"),
                                       Delivery_Status = s.FirstOrDefault().deliverystatus == 1 ? "Not yet started" : s.FirstOrDefault().deliverystatus == 2 ? "In-Progress" : s.FirstOrDefault().deliverystatus == 3 ? "Partial Delivery" : "Delivered",
                                       PaymentStatus = s.FirstOrDefault().paymentstatus == 1 ? "Not yet started" : "Received"
                                   }).Distinct().ToList();
                }

                return open_orders;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                // throw ex;
                return open_orders;
            }
        }

        #region Delivery Address page Details
        public List<AdminActivityModel> GetOrderDeliveryAddressDetails(int userid)
        {
            List<AdminActivityModel> orderDeliveryAddressDetails = new List<AdminActivityModel>();
            try
            {
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    var DeliveryAddressDetails = (from usm in contextsdce.user_subscribe_master
                                                  join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                                  join uadd in contextsdce.user_address_details on usm.deliver_address_id equals uadd.delivery_address_id
                                                  into uaddr
                                                  from uadd in uaddr.DefaultIfEmpty()
                                                  join cm in contextsdce.country_master on uadd.country equals cm.country_id
                                                  into ccm
                                                  from cm in ccm.DefaultIfEmpty()
                                                  join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                                  where usm.user_id == userid && usd.deliver_status == 1
                                                  orderby usm.payment_ref_no
                                                  select new
                                                  {
                                                      orderstsus = usd.deliver_status,
                                                      ClientRefNo = usm.payment_ref_no,
                                                      sellingprice = usd.selling_price,
                                                      Discountamt = usm.discount_amt,
                                                      DeliveryMode = usdm.subscribe_delivery_mode,
                                                      ShippingPrice = usdm.price,
                                                      UserDeliveryName = uadd.full_name,
                                                      UserDeliveryaddress = uadd.address,
                                                      UserDeliverypincode = uadd.pincode,
                                                      UserDeliveryCity = uadd.city,
                                                      UserDeliveryState = uadd.state,
                                                      UserDeliveryCountry = cm.country_name,
                                                      UserDeliveryMobileno = uadd.mobile_number,
                                                  }).ToList();


                    orderDeliveryAddressDetails = (from s in DeliveryAddressDetails
                                                   select new AdminActivityModel
                                                   {
                                                       ClientRefNo = s.ClientRefNo,
                                                       DeliveryMode = s.DeliveryMode,
                                                       Amount = DeliveryAddressDetails.Select(x => x.sellingprice).Sum() + s.ShippingPrice - Convert.ToInt32(s.Discountamt),
                                                       UserDeliveryName = s.UserDeliveryName,
                                                       UserDeliveryaddress = s.UserDeliveryaddress,
                                                       UserDeliverypincode = s.UserDeliverypincode,
                                                       UserDeliveryCity = s.UserDeliveryCity,
                                                       UserDeliveryState = s.UserDeliveryState,
                                                       UserDeliveryCountry = s.UserDeliveryCountry,
                                                       UserDeliveryMobileno = s.UserDeliveryMobileno,
                                                   }).Distinct().ToList();
                }

                return orderDeliveryAddressDetails;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                return orderDeliveryAddressDetails;
            }
        }
        #endregion

        /// <summary>
        /// To update the preparation status for all open orders
        /// </summary>
        /// <returns></returns>
        public string UpdatePreparationOrderStatus(long preperedBy, string OrderRefNo, string Comments, int Preparaionstatus)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    int result = 0;
                    var UpdateOrderStatus = (from usot in contextsdce.user_subscribe_order_track
                                             where usot.orderrefno == OrderRefNo
                                             select usot).ToList();

                    if (UpdateOrderStatus != null)
                    {
                        UpdateOrderStatus.ForEach(x => x.preparedby = preperedBy);
                        UpdateOrderStatus.ForEach(x => x.preparedon = DateTime.Now);
                        UpdateOrderStatus.ForEach(x => x.preparedcomments = Comments);
                        UpdateOrderStatus.ForEach(x => x.preparedstatus = Preparaionstatus);

                        //Updating QC status when preparation status is completed
                        if (Preparaionstatus == 3) { UpdateOrderStatus.ForEach(x => x.qualitycheckstatus = 1); }

                        result = contextsdce.SaveChanges();

                        if (result > 0)
                        {
                            return "1";
                        }
                        else
                        {
                            return "-1";
                        }

                    }
                    else
                    {
                        return "0";
                    }
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "UpdatePreparationOrderStatus", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        /// <summary>
        /// To update the quality checking status for all prepared orders from all open orders
        /// </summary>
        /// <returns></returns>
        public string UpdateQualityCheckStatus(long preperedBy, string OrderRefNo, string Comments, int qc_status)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    int result = 0;
                    var UpdateOrderStatus = (from usot in contextsdce.user_subscribe_order_track
                                             where usot.orderrefno == OrderRefNo
                                             select usot).ToList();

                    if (UpdateOrderStatus != null)
                    {
                        UpdateOrderStatus.ForEach(x => x.qualitycheckby = preperedBy);
                        UpdateOrderStatus.ForEach(x => x.qualitycheckon = DateTime.Now);
                        UpdateOrderStatus.ForEach(x => x.qualitycheckcomments = Comments);
                        UpdateOrderStatus.ForEach(x => x.qualitycheckstatus = qc_status);

                        //updating prepartion status when QC status is qualityfail and not yet received
                        if (qc_status == 4) { UpdateOrderStatus.ForEach(x => x.preparedstatus = 4); }
                        if (qc_status == 5) { UpdateOrderStatus.ForEach(x => x.preparedstatus = 5); }

                        result = contextsdce.SaveChanges();

                        if (result > 0)
                        {
                            return "1";
                        }
                        else
                        {
                            return "-1";
                        }

                    }
                    else
                    {
                        return "0";
                    }
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "UpdatePreparationOrderStatus", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        /// <summary>
        /// To get current order stauts for particular oder using order reference number
        /// </summary>
        /// <returns></returns>
        public List<OpenOrdersDetails> OrderPrepartionDialog(string orderRefNo)
        {
            List<OpenOrdersDetails> OrdersPopup = new List<OpenOrdersDetails>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var popup = (from usm in contextsdce.user_subscribe_master
                                 join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                 join pckg in contextsdce.package_master on usot.package_id equals pckg.package_id
                                 join dpm in contextsdce.department_master on pckg.department_id equals dpm.department_id
                                 where usot.orderrefno == orderRefNo && usm.payment_ref_no == usot.orderrefno
                                 select new
                                 {
                                     packagename = pckg.package_name,
                                     packageid = pckg.package_id,
                                     departname = dpm.department_name,
                                     year = pckg.year,
                                     semester = pckg.semester,
                                     order_refno = usot.orderrefno,
                                     orderon = usot.orderon,
                                     orderstatus = usot.orderstatus,
                                     preparationstatus = usot.preparedstatus,
                                     preparedon = usot.preparedon,
                                     deliverystatus = usot.deliverstatus,
                                     qc_status = usot.qualitycheckstatus,
                                     paymentstatus = usot.paystatus,
                                     paymentReveicedOn = usot.payreceiveon,
                                     paymentReceivedamt = usot.payreceivedamt,
                                     usersubscribemasterid = usm.user_subscribe_master_id

                                 }).ToList();

                    OrdersPopup = (from t in popup
                                   select new OpenOrdersDetails
                                   {
                                       UsersubscribemasterID = t.usersubscribemasterid,
                                       PackageName = t.packagename,
                                       DepartmentName = t.departname,
                                       Year = t.year,
                                       Semester = t.semester,
                                       QC_Status = t.qc_status == 1 ? "Not yet started" : t.qc_status == 2 ? "In-Progress" : t.qc_status == 3 ? "Completed" : t.qc_status == 4 ? "Quality Fail" : "Not Yet Received",
                                       PackageId = t.packageid,
                                       OrderRefNo = t.order_refno,
                                       OrderStatus = t.orderstatus == 1 ? "Not yet prepare" : t.orderstatus == 2 ? "In-Progress" : t.orderstatus == 3 ? "Completed" : t.orderstatus == 4 ? "Rework" : "ReCheck",
                                       OrderPlacedOn = t.orderon.ToString("dd-MM-yyyy"),
                                       PreparationStatus = t.preparationstatus == 1 ? "Not yet prepare" : t.preparationstatus == 2 ? "In-Progress" : t.preparationstatus == 3 ? "Completed" : t.preparationstatus == 4 ? "Rework" : "ReCheck",
                                       PreparedDate = t.preparedon == null ? "--" : t.preparedon.Value.ToString("dd-MM-yyy"),
                                       Delivery_Status = t.deliverystatus == 1 ? "Not yet started" : t.deliverystatus == 2 ? "In-Progress" : t.deliverystatus == 3 ? "Partial Delivery" : "Delivery",
                                       PaymentStatus = t.paymentstatus == 1 ? "Not yet started" : "Received",
                                       PaymentReceivedamt = t.paymentReceivedamt == null ? "--" : Convert.ToString(t.paymentReceivedamt),
                                       paymentReveicedOn = t.paymentReveicedOn == null ? "" : Convert.ToDateTime(t.paymentReveicedOn).ToString("dd-MM-yyyy")
                                       //paymentReveicedOn=(t.paymentReveicedOn.HasValue ? x.paymentReveicedOn == t.OfpaymentReveicedOnfDate : true)
                                   }).ToList();

                    return OrdersPopup;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "OrderPrepartionDialog", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        /// <summary>
        /// To get  order status for single user using order reference number
        /// </summary>
        /// <returns></returns>
        public List<OrderDetails> OrderDetailsDialog(string orderRefNo)
        {
            List<OrderDetails> order_details = new List<OrderDetails>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var orders = (from um in contextsdce.user_master
                                  join usm in contextsdce.user_subscribe_master on um.user_id equals usm.user_id
                                  join uad in contextsdce.user_address_details on usm.deliver_address_id equals uad.delivery_address_id into usdlft
                                  from uad in usdlft.Where(x => x.user_id == usm.user_id).DefaultIfEmpty()
                                  join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                  join pm in contextsdce.package_master on usd.package_id equals pm.package_id
                                  join dm in contextsdce.department_master on pm.department_id equals dm.department_id
                                  join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                  join unvm in contextsdce.university_master on um.univ_id equals unvm.univ_id
                                  join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                  join cntry in contextsdce.country_master on uad.country equals cntry.country_id into cntlft
                                  from cntry in cntlft.DefaultIfEmpty()
                                  join role in contextsdce.user_role on um.role_id equals role.role_id
                                  where usm.payment_ref_no == orderRefNo
                                  select new
                                  {
                                      username = um.user_name,
                                      mobile = um.mobile,
                                      userEmail = um.email_id,
                                      orderNumber = usm.payment_ref_no,
                                      orderdate = usm.created_on,
                                      univName = unvm.university_name,
                                      collegename = cm.college_name,
                                      department = dm.department_name,
                                      year = pm.year,
                                      semester = pm.semester,
                                      userrole = role.role_id == 1 ? "Student" : "Staff",
                                      subjectName = pm.package_name,
                                      packageid = pm.package_id,
                                      ostype = pm.os_type == 1 ? " OS(Windows)" : "OS(Android)",
                                      prmrymacwindows = um.primary_mac,
                                      prmryAndroid = um.primary_andriod_mac,
                                      sellingAmount = usd.selling_price,
                                      discountAmount = usm.discount_amt,
                                      shippingAmount = usdm.price,
                                      deliveryuser = uad.full_name == null ? "" : uad.full_name,
                                      deliverymode = usdm.subscribe_delivery_mode,
                                      country = cntry == null ? "" : cntry.country_name == null ? "" : cntry.country_name,
                                      deliveryaddress = uad == null ? "" : uad.address == null ? "" : uad.address,
                                      addressType = uad == null ? 0 : uad.address_type == 0 ? 0 : uad.address_type,
                                      city = uad == null ? "" : uad.city == null ? "" : uad.city,
                                      state = uad == null ? "" : uad.state == null ? "" : uad.state,
                                      deliverycontact = uad == null ? 0 : uad.mobile_number == 0 ? 0 : uad.mobile_number,
                                      ladmark = uad == null ? "" : uad.landmark == null ? "" : uad.landmark,
                                      pincode = uad == null ? 0 : uad.pincode == 0 ? 0 : uad.pincode,
                                      trnxnType = usm.TransactionType == 1 ? "COD" : "Online Payment"
                                  }).ToList();

                    order_details = (from t in orders
                                     orderby t.packageid
                                     select new OrderDetails
                                     {
                                         UserName = t.username,
                                         UserRole = t.userrole,
                                         Mobile = t.mobile,
                                         Email = t.userEmail,
                                         OrderRefNo = t.orderNumber,
                                         OrderDate = t.orderdate.ToString("dd-MM-yyyy"),
                                         University = t.univName,
                                         CollegeName = t.collegename,
                                         DepartmentName = t.department,
                                         Year = t.year,
                                         Semester = t.semester,
                                         SubjectName = t.subjectName,
                                         OSType = t.ostype,
                                         PrimaryMacWindows = t.prmrymacwindows,
                                         PrimaryMacAndroid = t.prmryAndroid,
                                         AmountSubtotal = orders.Select(x => x.sellingAmount).Sum(),
                                         SellingAmount = t.sellingAmount,
                                         ShippingAmount = t.shippingAmount,
                                         DiscountAmount = t.discountAmount,
                                         TotalAmount = orders.Select(x => x.sellingAmount).Sum() + t.shippingAmount - Convert.ToInt32(t.discountAmount),
                                         DeliveryUser = t.deliveryuser,
                                         DeliveryMode = t.deliverymode,
                                         Country = t.country,
                                         DeliveryAddress = t.deliveryaddress,
                                         AddressType = t.addressType == 0 ? "" : t.addressType == 1 ? "Home" : t.addressType == 2 ? "Office" : t.addressType == 3 ? "College" : "Hostel",
                                         City = t.city,
                                         State = t.state,
                                         DeliveryContact = t.deliverycontact == 0 ? "" : Convert.ToString(t.deliverycontact),
                                         Landmark = t.ladmark,
                                         Pincode = t.pincode == 0 ? "" : Convert.ToString(t.pincode),
                                         TraxnType = t.trnxnType
                                     }).ToList();

                    return order_details;
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "OrderDetailsDialog", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        /// <summary>
        /// To get subjects details for single user based on their university,department,year,semester and mobile number
        /// </summary>
        /// <returns></returns>
        public List<UserSubjectDetails> GetUserSubjectDetails(long MobileNo, int univId, int departmentId, int year, int semester)
        {
            List<UserSubjectDetails> lSubjectDetails = new List<UserSubjectDetails>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    lSubjectDetails = (from um in contextsdce.user_master
                                       join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                       join sm in contextsdce.subject_master on usm.subject_id equals sm.subject_id
                                       join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                       join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                       join dsm in contextsdce.department_subject_mapping on sm.subject_id equals dsm.subject_id
                                       join dm in contextsdce.department_master on dsm.department_id equals dm.department_id
                                       where um.mobile == MobileNo && um.active_status == 1 && dsm.active_status == 1 && usm.department_id == dsm.department_id

                                       orderby
                                       dsm.map_year, dsm.semester, usm.subject_unit_expiryon descending

                                       select new { um, usm, dm, univ, cm, sm, dsm }).ToList().Select(x => new UserSubjectDetails
                                       {
                                           UserId = x.um.user_id,
                                           UserName = x.um.user_first_name,
                                           Mobile = x.um.mobile,
                                           Email = x.um.email_id,
                                           DepartmentId = x.dm.department_id,
                                           College = x.cm.college_name,
                                           University = x.univ.university_name,
                                           SubjectId = x.sm.subject_id,
                                           SubjectCode = x.sm.subject_code,
                                           SubjectName = x.sm.subject_name,
                                           Years = x.dsm.map_year,
                                           Semester = x.dsm.semester,
                                           DepartmentName = x.dm.department_name,
                                           ExpiredDate = x.usm.subject_unit_expiryon.ToString("dd-MM-yyyy")
                                       }).GroupBy(x => x.SubjectId).Select(x => x.First()).Distinct().ToList();

                    if (univId > 0 && departmentId > 0 && year > 0 && semester > 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.DepartmentId == departmentId && x.Years == year && x.Semester == semester));
                    }
                    if (univId > 0 && departmentId > 0 && year == 0 && semester == 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.DepartmentId == departmentId));
                    }
                    if (univId > 0 && departmentId > 0 && year > 0 && semester == 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.DepartmentId == departmentId && x.Years == year));
                    }
                    if (univId > 0 && departmentId > 0 && year == 0 && semester > 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.DepartmentId == departmentId && x.Semester == semester));
                    }
                    if (univId > 0 && departmentId == 0 && year > 0 && semester == 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.DepartmentId == departmentId && x.Semester == semester));
                    }
                    if (univId > 0 && departmentId == 0 && year == 0 && semester > 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.DepartmentId == departmentId && x.Semester == semester));
                    }

                    return lSubjectDetails;

                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetUserSubjectDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }



        public string SplitDataFromJsonArray(string JsonArray)
        {
            string findData = "";
            int startingindex = 0, EndingIndex = 0;
            startingindex = JsonArray.IndexOf("[");
            EndingIndex = JsonArray.IndexOf("]");
            findData = JsonArray.Substring(startingindex, (EndingIndex - startingindex) + 1);
            return findData;
        }


        /// <summary>
        /// To Load the Orders status Grid for Open orders status
        /// </summary>
        /// <returns></returns>
        public JQGrid LoadGridOrdersPreparation(JqSearchIn si, string mapuniv)
        {
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetOpenOrderDetails(mapuniv);

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }

            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                         client.OrderRefNo+"",
                         client.OrderPlacedOn,
                         client.PreparedDate,
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.UserName,
                         client.Mobile,
                         client.OrderStatus,
                         client.PreparationStatus,
                         client.Preparedby,
                         client.PreparedDate
                     }
                 }).ToArray()
            };
            return GridData;

        }

        /// <summary>
        /// To load open orders quality check status for all prepared orders 
        /// </summary>
        /// <returns></returns>
        public JQGrid LoadOpenOrdersQC_Status(JqSearchIn si, string mapuniv)
        {
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetOpenOrderDetails(mapuniv);

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }

            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                         client.OrderRefNo+"",
                         client.OrderPlacedOn,
                         client.PreparedDate,
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.UserName,
                         client.Mobile,
                         client.OrderStatus,
                         client.PreparationStatus,
                         client.QC_Status,
                         client.PreparedDate
                     }
                 }).ToArray()
            };
            return GridData;

        }

        public JQGrid LoadGridOpenOrders(JqSearchIn si, string mapuniv)
        {
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetOpenOrderDetails(mapuniv);

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }

            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                        client.OrderRefNo+"",
                         client.OrderPlacedOn,
                         client.PreparedDate,
                         //client.DeliveryDate,
                         //client.PaymentDate,
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.UserName,
                         client.Mobile,
                         client.OrderStatus,
                         client.PreparationStatus,
                         client.QC_Status
                         //client.Delivery_Status,
                         //client.PaymentStatus

                 }
                 }).ToArray()
            };
            return GridData;

        }

        #region open orders
        public string UpdatedeliveryOrderStatus(long preperedBy, string orderRefNo, string comments, int Deliverystatus, string DeliverBy, string DeliveryOn, string CourierName, string Courierno, string CourierContactno, int CourierExpecteddeliverydays)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                //   DateTime datedeliveryon = DateTime.ParseExact(DeliveryOn, "dd-MM-yyyy HH:mm:ss", System.Globalization.CultureInfo.InvariantCulture);
                try
                {
                    //DateTime datedeliveryon = DateTime.Now;
                    //IFormatProvider provider = new CultureInfo("en-US");
                    //string dateformat = "MM/dd/yyyy";
                    //DateTime FromDateNew = new DateTime();
                    //FromDateNew = DateTime.ParseExact(DeliveryOn, dateformat, provider);
                    string[] dt = DeliveryOn.Split('-'); //reseaving format dd/mm/yyyy
                    DateTime datedeliveryon = new DateTime(Convert.ToInt32(dt[2]), Convert.ToInt32(dt[1]), Convert.ToInt32(dt[0]), DateTime.Now.Hour, DateTime.Now.Minute, DateTime.Now.Second, 0);

                    int result = 0;
                    var UpdateOrderStatus = (from usot in contextsdce.user_subscribe_order_track
                                             join usd in contextsdce.user_subscribe_details on usot.user_subscribe_master_id equals usd.user_subscribe_master_id
                                             where usot.orderrefno == orderRefNo
                                             select new { usot, usd }).ToList();

                    if (UpdateOrderStatus != null)
                    {
                        UpdateOrderStatus.ForEach(x => x.usot.denterby = preperedBy);
                        UpdateOrderStatus.ForEach(x => x.usot.denteron = DateTime.Now);
                        UpdateOrderStatus.ForEach(x => x.usot.delivercomments = comments);
                        UpdateOrderStatus.ForEach(x => x.usot.deliverstatus = Deliverystatus);
                        UpdateOrderStatus.ForEach(x => x.usot.deliverby = DeliverBy);
                        UpdateOrderStatus.ForEach(x => x.usot.deliveron = datedeliveryon);
                        UpdateOrderStatus.ForEach(x => x.usot.couriername = CourierName);
                        UpdateOrderStatus.ForEach(x => x.usot.courierrefno = Courierno);
                        UpdateOrderStatus.ForEach(x => x.usot.couriercontactno = CourierContactno);
                        UpdateOrderStatus.ForEach(x => x.usot.expecteddeliverywdays = CourierExpecteddeliverydays);

                        if (Deliverystatus == 3)
                        {

                            UpdateOrderStatus.ForEach(x => x.usd.deliver_status = 3);

                        }
                        result = contextsdce.SaveChanges();

                        if (result > 0)
                        {
                            return "1";
                        }
                        else
                        {
                            return "-1";
                        }

                    }
                    else
                    {
                        return "0";
                    }
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "UpdatePreparationOrderStatus", ex.Message, "error");
                    //Log.WriteLogMessage(PageName, "Adminservice", "UpdatePreparationOrderStatus", datedeliveryon, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public List<OpenOrdersDetails> GetOpenOrderDeliverystatusDetails(string mapuniv)
        {
            string[] mappedUniv = mapuniv.ToString().Split(',');

            List<OpenOrdersDetails> open_orders = new List<OpenOrdersDetails>();
            try
            {
                string[] Orderstatus = new string[] { "1", "3" };
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    var order = (from usm in contextsdce.user_subscribe_master
                                 join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                 join um in contextsdce.user_master on usm.user_id equals um.user_id
                                 join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                 from umpfby in lftum.DefaultIfEmpty()
                                 join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                 join dom in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals dom.user_subscribe_delivery_mode_id
                                 join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                 where mappedUniv.Contains(um.univ_id.ToString()) && um.active_status == 1 && Orderstatus.Contains(usm.order_status.ToString()) && usm.order_status == usot.orderstatus && usm.payment_ref_no == usot.orderrefno
                                 && dom.delivery_type == 1 && pm.TxnStatus == "2"
                                 select new
                                 {
                                     identyvalue = usm.user_subscribe_master_id,
                                     orderstsus = usm.order_status,
                                     orderid = usot.orderrefno,
                                     orderplacedon = usot.orderon,
                                     packageid = usot.package_id,
                                     delvierymode = usdm.subscribe_delivery_mode,
                                     username = um.user_name,
                                     mobile = usot.ordermobile,
                                     prepartionstatus = usot.preparedstatus,
                                     preparedby = umpfby.user_name,
                                     preparedon = usot.preparedon,
                                     Deliveryon = usot.deliveron,
                                     Paymenton = usot.payreceiveon,
                                     qualitycheck = usot.qualitycheckstatus,
                                     deliverystatus = usot.deliverstatus,
                                     paymentstatus = usot.paystatus,
                                     paymentType = pm.TransactionType

                                 }).ToList();


                    open_orders = (from t in order
                                   group t by t.orderid into s
                                   select new OpenOrdersDetails
                                   {
                                       Identyvalue = s.FirstOrDefault().identyvalue,
                                       OrderStatus = s.FirstOrDefault().orderstsus == 1 ? "In-Progress" : s.FirstOrDefault().orderstsus == 2 ? "Order Canceled" : s.FirstOrDefault().orderstsus == 3 ? "Ready to Delivery" : s.FirstOrDefault().orderstsus == 4 ? "Partially Delivered" : "Delivered",
                                       OrderRefNo = s.FirstOrDefault().orderid,
                                       OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                       OrderPlacedOn = s.FirstOrDefault().orderplacedon.ToString("dd-MM-yyyy"),
                                       TotalItems = s.Select(x => x.packageid).Count(),
                                       DeliveryMode = s.FirstOrDefault().delvierymode,
                                       UserName = s.FirstOrDefault().username,
                                       Mobile = s.FirstOrDefault().mobile,
                                       PreparationStatus = s.FirstOrDefault().prepartionstatus == 1 ? "Not yet prepare" : s.FirstOrDefault().prepartionstatus == 2 ? "In-Progress" : s.FirstOrDefault().prepartionstatus == 3 ? "Completed" : "Rework",
                                       Preparedby = s.FirstOrDefault().preparedby == null ? "-" : s.FirstOrDefault().preparedby.ToString(),
                                       PreparedDate = s.FirstOrDefault().preparedon == null ? "-" : s.FirstOrDefault().preparedon.Value.ToString("dd-MM-yyyy"),
                                       DeliveryDate = s.FirstOrDefault().Deliveryon == null ? "-" : s.FirstOrDefault().Deliveryon.Value.ToString("dd-MM-yyyy"),
                                       PaymentDate = s.FirstOrDefault().Paymenton == null ? "-" : s.FirstOrDefault().Paymenton.Value.ToString("dd-MM-yyyy"),
                                       QC_Status = s.FirstOrDefault().qualitycheck == 1 ? "Not yet started" : s.FirstOrDefault().qualitycheck == 2 ? "In-Progress" : s.FirstOrDefault().qualitycheck == 3 ? "Completed" : s.FirstOrDefault().qualitycheck == 4 ? "Quality Fail" : "Not Yet Received",
                                       Delivery_Status = s.FirstOrDefault().deliverystatus == 1 ? "Not yet Delivery" : s.FirstOrDefault().deliverystatus == 2 ? "In-Progress" : "Delivered",
                                       PaymentStatus = s.FirstOrDefault().paymentType == "2" ? "Received" : s.FirstOrDefault().paymentstatus == 1 ? "Not yet Receive" : "Received"

                                   }).Distinct().ToList();
                }

                return open_orders;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                return
                    open_orders;
            }
        }

        public JQGrid LoadDeliveryOrdersStatus(JqSearchIn si, string mapuniv)
        {
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetOpenOrderDeliverystatusDetails(mapuniv);

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }

            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                         client.Identyvalue+"",
                         client.OrderRefNo+"",
                         client.OrderPlacedOn,
                         client.DeliveryDate,
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.UserName,
                         client.Mobile,
                         client.QC_Status,
                         client.Delivery_Status,
                         client.PaymentStatus
                     }
                 }).ToArray()
            };
            return GridData;

        }

        #endregion

        #region open order Payment status
        public string UpdatePaymentOrderStatus(long preperedBy, string OrderRefNo, int paymentamt, int Paymentstatus, Int64 user_subscribed_masterid, Int64 created_userid)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    int result = 0;
                    var UpdateOrderStatus = (from usot in contextsdce.user_subscribe_order_track
                                             join usbm in contextsdce.user_subscribe_master on usot.user_subscribe_master_id equals usbm.user_subscribe_master_id
                                             join pm in contextsdce.payment_master on usbm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                             where usot.orderrefno == OrderRefNo
                                             select new { usot, usbm, pm }).ToList();

                    if (UpdateOrderStatus != null)
                    {
                        UpdateOrderStatus.ForEach(x => x.usot.payreceivedby = preperedBy);
                        UpdateOrderStatus.ForEach(x => x.usot.payreceiveon = DateTime.Now);
                        UpdateOrderStatus.ForEach(x => x.usot.payreceivedamt = paymentamt);
                        UpdateOrderStatus.ForEach(x => x.usot.paystatus = Paymentstatus);

                        //Update After Payment Received 
                        if (Paymentstatus == 2)
                        {
                            UpdateOrderStatus.ForEach(x => x.usot.orderstatus = 3);
                            UpdateOrderStatus.ForEach(x => x.usbm.payment_status = 2);
                            UpdateOrderStatus.ForEach(x => x.pm.TxnStatus = 2.ToString());
                            UpdateOrderStatus.ForEach(x => x.usbm.order_status = 3);
                            CreateActivationCode(user_subscribed_masterid, created_userid);
                        }

                        result = contextsdce.SaveChanges();

                        if (result > 0)
                        {
                            return "1";
                        }
                        else
                        {
                            return "-1";
                        }

                    }
                    else
                    {
                        return "0";
                    }
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "UpdatePaymentOrderStatus", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public string CreateActivationCode(Int64 user_subscribed_masterid, Int64 created_userid)
        {
            string message = "";
            Int64 buyer_userid, buyer_mobileNo;
            string username, orderid, Emailid;
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<purchase_activationmaster> studentdashboard = new List<purchase_activationmaster>();
                CallSendSMS ob = new CallSendSMS();
                try
                {

                    //get data from user subscribe master

                    var datasub = from a in contextsdce.user_subscribe_master
                                  join b in contextsdce.user_master on a.user_id equals b.user_id
                                  where a.user_subscribe_master_id == user_subscribed_masterid
                                  select new
                                  {
                                      b.user_name,
                                      b.mobile,
                                      a.payment_ref_no,
                                      a.user_id,
                                      b.email_id
                                  };

                    buyer_userid = datasub.FirstOrDefault().user_id;
                    buyer_mobileNo = datasub.FirstOrDefault().mobile;
                    username = datasub.FirstOrDefault().user_name;
                    orderid = datasub.FirstOrDefault().payment_ref_no;
                    Emailid = datasub.FirstOrDefault().email_id;


                    //create activation code

                    message = ob.CreateActivationKey(8);
                    purchase_activationmaster ude = new purchase_activationmaster();
                    ude.user_subscribed_masterid = user_subscribed_masterid;
                    ude.buyer_userid = buyer_userid;
                    ude.buyer_mobileNo = buyer_mobileNo;
                    ude.activationcode = message;
                    ude.created_date = DateTime.Now;
                    ude.created_userid = created_userid;
                    ude.activationstatus = 1;
                    contextsdce.purchase_activationmaster.Add(ude);
                    contextsdce.SaveChanges();

                    //send SMS to the User With Activation Code
                    ob.SendSMS(buyer_mobileNo + "", ob.SMS_Payment_ActivationCode(buyer_mobileNo + "", message), "");

                    //Send Mail to User About his Activaiton Code
                    //attach bill
                    string mailcontent = MailHelper.EmailBody_ActivationCode(Emailid, buyer_mobileNo + "", message, username, orderid);
                    MailHelper.SendMail(Emailid, "Learnengg - Payment Reseaved / your Activation Code", mailcontent);
                }
                catch (Exception ex)
                {
                    message = "Failed To create Activation Code";
                    throw ex;
                }
                return message;
            }
        }
        #endregion

        #region Allorder Status

        public List<OpenOrdersDetails> GetAllOrderBuyCODstatusDetails()
        {
            List<OpenOrdersDetails> All_orders = new List<OpenOrdersDetails>();
            // string OrderStatus = "";
            try
            {
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    var order = (from usm in contextsdce.user_subscribe_master
                                 join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                 join um in contextsdce.user_master on usm.user_id equals um.user_id
                                 join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                 from umpfby in lftum.DefaultIfEmpty()
                                 join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                 where um.active_status == 1 && usm.order_status == usot.orderstatus && usm.payment_ref_no == usot.orderrefno
                                 && usm.TransactionType == 1
                                 select new
                                 {
                                     identyvalue = usm.user_subscribe_master_id,
                                     orderstsus = usm.order_status,
                                     orderid = usot.orderrefno,
                                     orderplacedon = usot.orderon,
                                     packageid = usot.package_id,
                                     delvierymode = usdm.subscribe_delivery_mode,
                                     username = um.user_name,
                                     mobile = usot.ordermobile,
                                     prepartionstatus = usot.preparedstatus,
                                     preparedby = umpfby.user_name,
                                     preparedon = usot.preparedon,
                                     Deliveryon = usot.deliveron,
                                     Paymenton = usot.payreceiveon,
                                     qualitycheck = usot.qualitycheckstatus,
                                     deliverystatus = usot.deliverstatus,
                                     paymentstatus = usot.paystatus,
                                     usot.orderstatus,
                                     paymentrefundstatus = usot.refundstatus

                                 }).ToList();



                    All_orders = (from t in order
                                  group t by t.orderid into s
                                  select new OpenOrdersDetails
                                  {
                                      Identyvalue = s.FirstOrDefault().identyvalue,
                                      OrderStatus = s.FirstOrDefault().orderstsus == 1 ? "In-Progress" : s.FirstOrDefault().orderstsus == 2 ? "Order Canceled" : s.FirstOrDefault().orderstsus == 3 ? "Ready to Delivery" : s.FirstOrDefault().orderstsus == 4 ? "Partially Delivered" : "Delivered",
                                      OrderRefNo = s.FirstOrDefault().orderid,
                                      OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                      OrderPlacedOn = s.FirstOrDefault().orderplacedon.ToString("dd-MM-yyyy"),
                                      TotalItems = s.Select(x => x.packageid).Count(),
                                      DeliveryMode = s.FirstOrDefault().delvierymode,
                                      UserName = s.FirstOrDefault().username,
                                      Mobile = s.FirstOrDefault().mobile,
                                      PreparationStatus = s.FirstOrDefault().prepartionstatus == 1 ? "Not yet prepare" : s.FirstOrDefault().prepartionstatus == 2 ? "In-Progress" : s.FirstOrDefault().prepartionstatus == 3 ? "Completed" : "Rework",
                                      Preparedby = s.FirstOrDefault().preparedby == null ? "-" : s.FirstOrDefault().preparedby.ToString(),
                                      PreparedDate = s.FirstOrDefault().preparedon == null ? "-" : s.FirstOrDefault().preparedon.Value.ToString("dd-MM-yyyy"),
                                      DeliveryDate = s.FirstOrDefault().Deliveryon == null ? "-" : s.FirstOrDefault().Deliveryon.Value.ToString("dd-MM-yyyy"),
                                      PaymentDate = s.FirstOrDefault().Paymenton == null ? "-" : s.FirstOrDefault().Paymenton.Value.ToString("dd-MM-yyyy"),
                                      QC_Status = s.FirstOrDefault().qualitycheck == 1 ? "Not yet started" : s.FirstOrDefault().qualitycheck == 2 ? "In-Progress" : s.FirstOrDefault().qualitycheck == 3 ? "Completed" : s.FirstOrDefault().qualitycheck == 4 ? "Quality Fail" : "Not Yet Received",
                                      Delivery_Status = s.FirstOrDefault().deliverystatus == 1 ? "Not yet Delivery" : s.FirstOrDefault().deliverystatus == 2 ? "In-Progress" : "Delivered",
                                      PaymentStatus = s.FirstOrDefault().paymentstatus == 1 ? "Not yet Receive" : "Received",
                                      CancelOrderStatus = s.FirstOrDefault().orderstatus,
                                      paymentrefundstatus = s.FirstOrDefault().paymentrefundstatus == null ? "---" : Convert.ToInt32(s.FirstOrDefault().paymentrefundstatus).ToString(),
                                      Activation = "Activation",
                                      Lastordestatuscompleted = s.FirstOrDefault().paymentstatus == 2 ? "Payment Received" : s.FirstOrDefault().deliverystatus == 3 ? "Delivery Completed" : s.FirstOrDefault().qualitycheck == 3 ? "QC Completed" : s.FirstOrDefault().prepartionstatus == 3 ? "prepartion Completed" : "Order Received"

                                  }).Distinct().ToList();

                }

                return All_orders;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                return All_orders;
                throw ex;
            }
        }

        public List<OpenOrdersDetails> GetAllSuccessOrders(string mapuniv, [Optional] string Pdate)
        {
            List<OpenOrdersDetails> All_orders = new List<OpenOrdersDetails>();

            try
            {

                string[] mappedUniv = mapuniv.ToString().Split(',');
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    if (Pdate != null)
                    {
                        DateTime CreatedOn = DateTime.ParseExact(Pdate.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                        var order = (from usm in contextsdce.user_subscribe_master
                                     join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                     join um in contextsdce.user_master on usm.user_id equals um.user_id
                                     join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                     from umpfby in lftum.DefaultIfEmpty()
                                     join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                     join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                     join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                     where um.active_status == 1 && usm.payment_ref_no == usot.orderrefno
                                     //   && usm.TransactionType == 2 
                                     && mappedUniv.Contains(um.univ_id.ToString())
                                     && System.Data.Entity.DbFunctions.TruncateTime(usm.created_on) == CreatedOn && pm.TxnStatus == "2"
                                     //   && usm.order_status != 3 
                                     && usm.payment_status == 2
                                     //&& mappedUniv.Contains(um.univ_id.ToString())
                                     //&& usm.order_status == usot.orderstatus
                                     select new
                                     {
                                         identyvalue = usm.user_subscribe_master_id,
                                         orderstsus = usm.order_status,
                                         orderid = usot.orderrefno,
                                         orderplacedon = usot.orderon,
                                         packageid = usot.package_id,
                                         delvierymode = usdm.subscribe_delivery_mode,
                                         username = um.user_name,
                                         mobile = usot.ordermobile,
                                         prepartionstatus = usot.preparedstatus,
                                         preparedby = umpfby.user_name,
                                         preparedon = usot.preparedon,
                                         Deliveryon = usot.deliveron,
                                         Paymenton = usot.payreceiveon,
                                         qualitycheck = usot.qualitycheckstatus,
                                         deliverystatus = usot.deliverstatus,
                                         paymentstatus = usot.paystatus,
                                         usot.orderstatus,
                                         paymentgatewayid = pm.payment_gatway_id,
                                         paymentrefundstatus = usot.refundstatus,
                                         OnlinePaymnetstatus = usm.payment_status,
                                         univname = univ.university_name,
                                         createdon = usm.created_on,
                                         Transaction_Amount = pm.TxnAmount,
                                         Balance_Amount = pm.bal_amt ?? 0,
                                         Refund_Amount = pm.refund_amt ?? 0
                                     }).ToList();
                        All_orders = (from t in order
                                      group t by t.orderid into s
                                      select new OpenOrdersDetails
                                      {
                                          Identyvalue = s.FirstOrDefault().identyvalue,
                                          universityname = s.FirstOrDefault().univname,
                                          OrderStatus = s.FirstOrDefault().orderstsus == 1 ? "In-Progress" : s.FirstOrDefault().orderstsus == 2 ? "Order Canceled" : s.FirstOrDefault().orderstsus == 3 ? "Ready to Delivery" : s.FirstOrDefault().orderstsus == 4 ? "Partially Delivered" : "Delivered",
                                          OrderRefNo = s.FirstOrDefault().orderid,
                                          OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                          OrderPlacedOn = s.Max(x => x.orderstatus.ToString("dd-MM-yyyy")),
                                          OrderPlacedOndatetime = s.Max(x => x.orderplacedon),
                                          TotalItems = s.Select(x => x.packageid).Count(),
                                          DeliveryMode = s.FirstOrDefault().delvierymode,
                                          UserName = s.FirstOrDefault().username,
                                          Mobile = s.FirstOrDefault().mobile,
                                          PreparationStatus = s.FirstOrDefault().prepartionstatus == 1 ? "Not yet prepare" : s.FirstOrDefault().prepartionstatus == 2 ? "In-Progress" : s.FirstOrDefault().prepartionstatus == 3 ? "Completed" : "Rework",
                                          Preparedby = s.FirstOrDefault().preparedby == null ? "-" : s.FirstOrDefault().preparedby.ToString(),
                                          PreparedDate = s.FirstOrDefault().preparedon == null ? "-" : s.FirstOrDefault().preparedon.Value.ToString("dd-MM-yyyy"),
                                          DeliveryDate = s.FirstOrDefault().Deliveryon == null ? "-" : s.FirstOrDefault().Deliveryon.Value.ToString("dd-MM-yyyy"),
                                          PaymentDate = s.FirstOrDefault().Paymenton == null ? "-" : s.FirstOrDefault().Paymenton.Value.ToString("dd-MM-yyyy"),
                                          QC_Status = s.FirstOrDefault().qualitycheck == 1 ? "Not yet started" : s.FirstOrDefault().qualitycheck == 2 ? "In-Progress" : s.FirstOrDefault().qualitycheck == 3 ? "Completed" : s.FirstOrDefault().qualitycheck == 4 ? "Quality Fail" : "Not Yet Received",
                                          Delivery_Status = s.FirstOrDefault().deliverystatus == 1 ? "Not yet Delivery" : s.FirstOrDefault().deliverystatus == 2 ? "In-Progress" : "Delivered",
                                          PaymentStatus = s.FirstOrDefault().paymentstatus == 1 ? "Not yet Receive" : "Received",
                                          CancelOrderStatus = s.FirstOrDefault().orderstatus,
                                          paymentrefundstatus = s.FirstOrDefault().paymentrefundstatus == null ? "---" : Convert.ToInt32(s.FirstOrDefault().paymentrefundstatus).ToString(),
                                          Activation = "Activation",
                                          PaymentGatewayId = s.FirstOrDefault().paymentgatewayid,
                                          Lastordestatuscompleted = s.FirstOrDefault().paymentstatus == 2 ? "Payment Received" : s.FirstOrDefault().deliverystatus == 3 ? "Delivery Completed" : s.FirstOrDefault().qualitycheck == 3 ? "QC Completed" : s.FirstOrDefault().prepartionstatus == 3 ? "prepartion Completed" : "Order Received",
                                          OnlinePaymentStatus = s.FirstOrDefault().OnlinePaymnetstatus == 2 ? "Success" : s.FirstOrDefault().OnlinePaymnetstatus == 1 ? "Initiated Process" : "Failure",
                                          createdOn = s.FirstOrDefault().createdon,
                                          TransactionAmount = (Int32)s.FirstOrDefault().Transaction_Amount,
                                          BalanceAmount = (Int32)s.FirstOrDefault().Balance_Amount,
                                          RefundAmount = (Int32)s.FirstOrDefault().Refund_Amount
                                      }).OrderByDescending(x => x.createdOn).Distinct().ToList();


                        //if (CreatedOn !=null)
                        //{
                        //    var datanew = All_orders.ToList();
                        //    All_orders.Clear();
                        //    All_orders.AddRange(datanew.Where(x=>System.Data.Entity.DbFunctions.TruncateTime(x.createdOn) == CreatedOn));
                        //}
                    }


                    else
                    {
                        var order = (from usm in contextsdce.user_subscribe_master
                                     join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                     join um in contextsdce.user_master on usm.user_id equals um.user_id
                                     join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                     from umpfby in lftum.DefaultIfEmpty()
                                     join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                     join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                     join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                     where um.active_status == 1 && usm.payment_ref_no == usot.orderrefno && pm.TxnStatus != "4"
                                      && pm.TxnStatus == "2"
                                     //   && usm.order_status != 3 
                                     && usm.payment_status == 2
                                     //   && usm.TransactionType == 2 
                                     && mappedUniv.Contains(um.univ_id.ToString())
                                     // && System.Data.Entity.DbFunctions.TruncateTime(usm.created_on) == CreatedOn
                                     select new
                                     {
                                         identyvalue = usm.user_subscribe_master_id,
                                         orderstsus = usm.order_status,
                                         orderid = usot.orderrefno,
                                         orderplacedon = usot.orderon,
                                         packageid = usot.package_id,
                                         delvierymode = usdm.subscribe_delivery_mode,
                                         username = um.user_name,
                                         mobile = usot.ordermobile,
                                         prepartionstatus = usot.preparedstatus,
                                         preparedby = umpfby.user_name,
                                         preparedon = usot.preparedon,
                                         Deliveryon = usot.deliveron,
                                         Paymenton = usot.payreceiveon,
                                         qualitycheck = usot.qualitycheckstatus,
                                         deliverystatus = usot.deliverstatus,
                                         paymentstatus = usot.paystatus,
                                         usot.orderstatus,
                                         paymentgatewayid = pm.payment_gatway_id,
                                         paymentrefundstatus = usot.refundstatus,
                                         OnlinePaymnetstatus = usm.payment_status,
                                         univname = univ.university_name,
                                         createdon = usm.created_on,
                                         Transaction_Amount = pm.TxnAmount,
                                         Balance_Amount = pm.bal_amt ?? 0,
                                         Refund_Amount = pm.refund_amt ?? 0
                                     }).ToList();

                        All_orders = (from t in order
                                      group t by t.orderid into s
                                      select new OpenOrdersDetails
                                      {
                                          Identyvalue = s.FirstOrDefault().identyvalue,
                                          universityname = s.FirstOrDefault().univname,
                                          OrderStatus = s.FirstOrDefault().orderstsus == 1 ? "In-Progress" : s.FirstOrDefault().orderstsus == 2 ? "Order Canceled" : s.FirstOrDefault().orderstsus == 3 ? "Ready to Delivery" : s.FirstOrDefault().orderstsus == 4 ? "Partially Delivered" : "Delivered",
                                          OrderRefNo = s.FirstOrDefault().orderid,
                                          OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                          OrderPlacedOn = s.Max(x => x.orderstatus.ToString("dd-MM-yyyy")),
                                          OrderPlacedOndatetime = s.Max(x => x.orderplacedon),
                                          TotalItems = s.Select(x => x.packageid).Count(),
                                          DeliveryMode = s.FirstOrDefault().delvierymode,
                                          UserName = s.FirstOrDefault().username,
                                          Mobile = s.FirstOrDefault().mobile,
                                          PreparationStatus = s.FirstOrDefault().prepartionstatus == 1 ? "Not yet prepare" : s.FirstOrDefault().prepartionstatus == 2 ? "In-Progress" : s.FirstOrDefault().prepartionstatus == 3 ? "Completed" : "Rework",
                                          Preparedby = s.FirstOrDefault().preparedby == null ? "-" : s.FirstOrDefault().preparedby.ToString(),
                                          PreparedDate = s.FirstOrDefault().preparedon == null ? "-" : s.FirstOrDefault().preparedon.Value.ToString("dd-MM-yyyy"),
                                          DeliveryDate = s.FirstOrDefault().Deliveryon == null ? "-" : s.FirstOrDefault().Deliveryon.Value.ToString("dd-MM-yyyy"),
                                          PaymentDate = s.FirstOrDefault().Paymenton == null ? "-" : s.FirstOrDefault().Paymenton.Value.ToString("dd-MM-yyyy"),
                                          QC_Status = s.FirstOrDefault().qualitycheck == 1 ? "Not yet started" : s.FirstOrDefault().qualitycheck == 2 ? "In-Progress" : s.FirstOrDefault().qualitycheck == 3 ? "Completed" : s.FirstOrDefault().qualitycheck == 4 ? "Quality Fail" : "Not Yet Received",
                                          Delivery_Status = s.FirstOrDefault().deliverystatus == 1 ? "Not yet Delivery" : s.FirstOrDefault().deliverystatus == 2 ? "In-Progress" : "Delivered",
                                          PaymentStatus = s.FirstOrDefault().paymentstatus == 1 ? "Not yet Receive" : "Received",
                                          CancelOrderStatus = s.FirstOrDefault().orderstatus,
                                          paymentrefundstatus = s.FirstOrDefault().paymentrefundstatus == null ? "---" : Convert.ToInt32(s.FirstOrDefault().paymentrefundstatus).ToString(),
                                          Activation = "Activation",
                                          PaymentGatewayId = s.FirstOrDefault().paymentgatewayid,
                                          Lastordestatuscompleted = s.FirstOrDefault().paymentstatus == 2 ? "Payment Received" : s.FirstOrDefault().deliverystatus == 3 ? "Delivery Completed" : s.FirstOrDefault().qualitycheck == 3 ? "QC Completed" : s.FirstOrDefault().prepartionstatus == 3 ? "prepartion Completed" : "Order Received",
                                          OnlinePaymentStatus = s.FirstOrDefault().OnlinePaymnetstatus == 2 ? "Success" : s.FirstOrDefault().OnlinePaymnetstatus == 1 ? "Initiated Process" : "Failure",
                                          createdOn = s.FirstOrDefault().createdon,
                                          TransactionAmount = (Int32)s.FirstOrDefault().Transaction_Amount,
                                          BalanceAmount = (Int32)s.FirstOrDefault().Balance_Amount,
                                          RefundAmount = (Int32)s.FirstOrDefault().Refund_Amount
                                      }).OrderByDescending(x => x.createdOn).Distinct().ToList();
                    }
                }

                return All_orders;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                return
                    All_orders;
            }
        }

        public List<OpenOrdersDetails> GetAllOrderstatusDetailsbyOnline(string mapuniv, [Optional] string Pdate)
        {
            List<OpenOrdersDetails> All_orders = new List<OpenOrdersDetails>();

            try
            {

                string[] mappedUniv = mapuniv.ToString().Split(',');
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    if (Pdate != null)
                    {
                        DateTime CreatedOn = DateTime.ParseExact(Pdate.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                        var order = (from usm in contextsdce.user_subscribe_master
                                     join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                     join um in contextsdce.user_master on usm.user_id equals um.user_id
                                     join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                     from umpfby in lftum.DefaultIfEmpty()
                                     join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                     join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                     join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                     where um.active_status == 1 && usm.payment_ref_no == usot.orderrefno
                                     && usm.TransactionType == 2 && mappedUniv.Contains(um.univ_id.ToString())
                                     && System.Data.Entity.DbFunctions.TruncateTime(usm.created_on) == CreatedOn && pm.TxnStatus == "2"
                                     && usm.order_status != 2 && usm.payment_status == 2
                                     //&& mappedUniv.Contains(um.univ_id.ToString())
                                     //&& usm.order_status == usot.orderstatus
                                     select new
                                     {
                                         identyvalue = usm.user_subscribe_master_id,
                                         orderstsus = usm.order_status,
                                         orderid = usot.orderrefno,
                                         orderplacedon = usot.orderon,
                                         packageid = usot.package_id,
                                         delvierymode = usdm.subscribe_delivery_mode,
                                         username = um.user_name,
                                         mobile = usot.ordermobile,
                                         prepartionstatus = usot.preparedstatus,
                                         preparedby = umpfby.user_name,
                                         preparedon = usot.preparedon,
                                         Deliveryon = usot.deliveron,
                                         Paymenton = usot.payreceiveon,
                                         qualitycheck = usot.qualitycheckstatus,
                                         deliverystatus = usot.deliverstatus,
                                         paymentstatus = usot.paystatus,
                                         usot.orderstatus,
                                         paymentgatewayid = pm.payment_gatway_id,
                                         paymentrefundstatus = usot.refundstatus,
                                         OnlinePaymnetstatus = usm.payment_status,
                                         univname = univ.university_name,
                                         createdon = usm.created_on
                                     }).ToList();
                        All_orders = (from t in order
                                      group t by t.orderid into s
                                      select new OpenOrdersDetails
                                      {
                                          Identyvalue = s.FirstOrDefault().identyvalue,
                                          universityname = s.FirstOrDefault().univname,
                                          OrderStatus = s.FirstOrDefault().orderstsus == 1 ? "In-Progress" : s.FirstOrDefault().orderstsus == 2 ? "Order Canceled" : s.FirstOrDefault().orderstsus == 3 ? "Ready to Delivery" : s.FirstOrDefault().orderstsus == 4 ? "Partially Delivered" : "Delivered",
                                          OrderRefNo = s.FirstOrDefault().orderid,
                                          OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                          OrderPlacedOn = s.Max(x => x.orderstatus.ToString("dd-MM-yyyy")),
                                          OrderPlacedOndatetime = s.Max(x => x.orderplacedon),
                                          TotalItems = s.Select(x => x.packageid).Count(),
                                          DeliveryMode = s.FirstOrDefault().delvierymode,
                                          UserName = s.FirstOrDefault().username,
                                          Mobile = s.FirstOrDefault().mobile,
                                          PreparationStatus = s.FirstOrDefault().prepartionstatus == 1 ? "Not yet prepare" : s.FirstOrDefault().prepartionstatus == 2 ? "In-Progress" : s.FirstOrDefault().prepartionstatus == 3 ? "Completed" : "Rework",
                                          Preparedby = s.FirstOrDefault().preparedby == null ? "-" : s.FirstOrDefault().preparedby.ToString(),
                                          PreparedDate = s.FirstOrDefault().preparedon == null ? "-" : s.FirstOrDefault().preparedon.Value.ToString("dd-MM-yyyy"),
                                          DeliveryDate = s.FirstOrDefault().Deliveryon == null ? "-" : s.FirstOrDefault().Deliveryon.Value.ToString("dd-MM-yyyy"),
                                          PaymentDate = s.FirstOrDefault().Paymenton == null ? "-" : s.FirstOrDefault().Paymenton.Value.ToString("dd-MM-yyyy"),
                                          QC_Status = s.FirstOrDefault().qualitycheck == 1 ? "Not yet started" : s.FirstOrDefault().qualitycheck == 2 ? "In-Progress" : s.FirstOrDefault().qualitycheck == 3 ? "Completed" : s.FirstOrDefault().qualitycheck == 4 ? "Quality Fail" : "Not Yet Received",
                                          Delivery_Status = s.FirstOrDefault().deliverystatus == 1 ? "Not yet Delivery" : s.FirstOrDefault().deliverystatus == 2 ? "In-Progress" : "Delivered",
                                          PaymentStatus = s.FirstOrDefault().paymentstatus == 1 ? "Not yet Receive" : "Received",
                                          CancelOrderStatus = s.FirstOrDefault().orderstatus,
                                          paymentrefundstatus = s.FirstOrDefault().paymentrefundstatus == null ? "---" : Convert.ToInt32(s.FirstOrDefault().paymentrefundstatus).ToString(),
                                          Activation = "Activation",
                                          PaymentGatewayId = s.FirstOrDefault().paymentgatewayid,
                                          Lastordestatuscompleted = s.FirstOrDefault().paymentstatus == 2 ? "Payment Received" : s.FirstOrDefault().deliverystatus == 3 ? "Delivery Completed" : s.FirstOrDefault().qualitycheck == 3 ? "QC Completed" : s.FirstOrDefault().prepartionstatus == 3 ? "prepartion Completed" : "Order Received",
                                          OnlinePaymentStatus = s.FirstOrDefault().OnlinePaymnetstatus == 2 ? "Success" : s.FirstOrDefault().OnlinePaymnetstatus == 1 ? "Initiated Process" : "Failure",
                                          createdOn = s.FirstOrDefault().createdon
                                      }).OrderByDescending(x => x.createdOn).Distinct().ToList();


                        //if (CreatedOn !=null)
                        //{
                        //    var datanew = All_orders.ToList();
                        //    All_orders.Clear();
                        //    All_orders.AddRange(datanew.Where(x=>System.Data.Entity.DbFunctions.TruncateTime(x.createdOn) == CreatedOn));
                        //}
                    }


                    else
                    {
                        var order = (from usm in contextsdce.user_subscribe_master
                                     join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                     join um in contextsdce.user_master on usm.user_id equals um.user_id
                                     join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                     from umpfby in lftum.DefaultIfEmpty()
                                     join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                     join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                     join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                     where um.active_status == 1 && usm.payment_ref_no == usot.orderrefno && pm.TxnStatus != "4"
                                     && usm.TransactionType == 2 && mappedUniv.Contains(um.univ_id.ToString()) && usm.order_status != 2
                                     // && System.Data.Entity.DbFunctions.TruncateTime(usm.created_on) == CreatedOn
                                     select new
                                     {
                                         identyvalue = usm.user_subscribe_master_id,
                                         orderstsus = usm.order_status,
                                         orderid = usot.orderrefno,
                                         orderplacedon = usot.orderon,
                                         packageid = usot.package_id,
                                         delvierymode = usdm.subscribe_delivery_mode,
                                         username = um.user_name,
                                         mobile = usot.ordermobile,
                                         prepartionstatus = usot.preparedstatus,
                                         preparedby = umpfby.user_name,
                                         preparedon = usot.preparedon,
                                         Deliveryon = usot.deliveron,
                                         Paymenton = usot.payreceiveon,
                                         qualitycheck = usot.qualitycheckstatus,
                                         deliverystatus = usot.deliverstatus,
                                         paymentstatus = usot.paystatus,
                                         usot.orderstatus,
                                         paymentgatewayid = pm.payment_gatway_id,
                                         paymentrefundstatus = usot.refundstatus,
                                         OnlinePaymnetstatus = usm.payment_status,
                                         univname = univ.university_name,
                                         createdon = usm.created_on
                                     }).ToList();

                        All_orders = (from t in order
                                      group t by t.orderid into s
                                      select new OpenOrdersDetails
                                      {
                                          Identyvalue = s.FirstOrDefault().identyvalue,
                                          universityname = s.FirstOrDefault().univname,
                                          OrderStatus = s.FirstOrDefault().orderstsus == 1 ? "In-Progress" : s.FirstOrDefault().orderstsus == 2 ? "Order Canceled" : s.FirstOrDefault().orderstsus == 3 ? "Ready to Delivery" : s.FirstOrDefault().orderstsus == 4 ? "Partially Delivered" : "Delivered",
                                          OrderRefNo = s.FirstOrDefault().orderid,
                                          OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                          OrderPlacedOn = s.Max(x => x.orderstatus.ToString("dd-MM-yyyy")),
                                          OrderPlacedOndatetime = s.Max(x => x.orderplacedon),
                                          TotalItems = s.Select(x => x.packageid).Count(),
                                          DeliveryMode = s.FirstOrDefault().delvierymode,
                                          UserName = s.FirstOrDefault().username,
                                          Mobile = s.FirstOrDefault().mobile,
                                          PreparationStatus = s.FirstOrDefault().prepartionstatus == 1 ? "Not yet prepare" : s.FirstOrDefault().prepartionstatus == 2 ? "In-Progress" : s.FirstOrDefault().prepartionstatus == 3 ? "Completed" : "Rework",
                                          Preparedby = s.FirstOrDefault().preparedby == null ? "-" : s.FirstOrDefault().preparedby.ToString(),
                                          PreparedDate = s.FirstOrDefault().preparedon == null ? "-" : s.FirstOrDefault().preparedon.Value.ToString("dd-MM-yyyy"),
                                          DeliveryDate = s.FirstOrDefault().Deliveryon == null ? "-" : s.FirstOrDefault().Deliveryon.Value.ToString("dd-MM-yyyy"),
                                          PaymentDate = s.FirstOrDefault().Paymenton == null ? "-" : s.FirstOrDefault().Paymenton.Value.ToString("dd-MM-yyyy"),
                                          QC_Status = s.FirstOrDefault().qualitycheck == 1 ? "Not yet started" : s.FirstOrDefault().qualitycheck == 2 ? "In-Progress" : s.FirstOrDefault().qualitycheck == 3 ? "Completed" : s.FirstOrDefault().qualitycheck == 4 ? "Quality Fail" : "Not Yet Received",
                                          Delivery_Status = s.FirstOrDefault().deliverystatus == 1 ? "Not yet Delivery" : s.FirstOrDefault().deliverystatus == 2 ? "In-Progress" : "Delivered",
                                          PaymentStatus = s.FirstOrDefault().paymentstatus == 1 ? "Not yet Receive" : "Received",
                                          CancelOrderStatus = s.FirstOrDefault().orderstatus,
                                          paymentrefundstatus = s.FirstOrDefault().paymentrefundstatus == null ? "---" : Convert.ToInt32(s.FirstOrDefault().paymentrefundstatus).ToString(),
                                          Activation = "Activation",
                                          PaymentGatewayId = s.FirstOrDefault().paymentgatewayid,
                                          Lastordestatuscompleted = s.FirstOrDefault().paymentstatus == 2 ? "Payment Received" : s.FirstOrDefault().deliverystatus == 3 ? "Delivery Completed" : s.FirstOrDefault().qualitycheck == 3 ? "QC Completed" : s.FirstOrDefault().prepartionstatus == 3 ? "prepartion Completed" : "Order Received",
                                          OnlinePaymentStatus = s.FirstOrDefault().OnlinePaymnetstatus == 2 ? "Success" : s.FirstOrDefault().OnlinePaymnetstatus == 1 ? "Initiated Process" : "Failure",
                                          createdOn = s.FirstOrDefault().createdon
                                      }).OrderByDescending(x => x.createdOn).Distinct().ToList();
                    }
                }

                return All_orders;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                return
                    All_orders;
            }
        }

        public List<OpenOrdersDetails> GetSpecialOfferFreeOrders(string mapuniv)
        {
            List<OpenOrdersDetails> All_orders = new List<OpenOrdersDetails>();

            try
            {
                string[] mappedUniv = mapuniv.ToString().Split(',');

                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    var order = (from usm in contextsdce.user_subscribe_master
                                 join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                 join um in contextsdce.user_master on usm.user_id equals um.user_id
                                 join umpfby in contextsdce.user_master on usot.preparedby equals umpfby.user_id into lftum
                                 from umpfby in lftum.DefaultIfEmpty()
                                 join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                 join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                 join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                 where um.active_status == 1 && usm.order_status == usot.orderstatus && usm.payment_ref_no == usot.orderrefno && pm.TxnStatus == "4"
                                 && usm.TransactionType == 2 && mappedUniv.Contains(um.univ_id.ToString())
                                 select new
                                 {
                                     identyvalue = usm.user_subscribe_master_id,
                                     orderstsus = usm.order_status,
                                     orderid = usot.orderrefno,
                                     orderplacedon = usot.orderon,
                                     packageid = usot.package_id,
                                     delvierymode = usdm.subscribe_delivery_mode,
                                     username = um.user_name,
                                     mobile = usot.ordermobile,
                                     Paymenton = usot.payreceiveon,
                                     usot.orderstatus,
                                     OnlinePaymnetstatus = usm.payment_status,
                                     univname = univ.university_name,
                                     createdon = usm.created_on
                                 }).ToList();

                    All_orders = (from t in order
                                  group t by t.orderid into s
                                  select new OpenOrdersDetails
                                  {
                                      Identyvalue = s.FirstOrDefault().identyvalue,
                                      universityname = s.FirstOrDefault().univname,
                                      OrderRefNo = s.FirstOrDefault().orderid,
                                      OrderPlacedOnInt = Convert.ToInt64(s.FirstOrDefault().orderplacedon.ToString("yyyyMMdd")),
                                      OrderPlacedOn = s.Max(x => x.orderstatus.ToString("dd-MM-yyyy")),
                                      OrderPlacedOndatetime = s.Max(x => x.orderplacedon),
                                      TotalItems = s.Select(x => x.packageid).Count(),
                                      DeliveryMode = s.FirstOrDefault().delvierymode,
                                      UserName = s.FirstOrDefault().username,
                                      Mobile = s.FirstOrDefault().mobile,
                                      OnlinePaymentStatus = "Free purchase",
                                      createdOn = s.FirstOrDefault().createdon
                                  }).OrderByDescending(x => x.createdOn).Distinct().ToList();

                }

                return All_orders;
            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public JQGrid LoadAllOrdersbuyCODStatus(JqSearchIn si)
        {
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetAllOrderBuyCODstatusDetails();

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }

            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                         client.Identyvalue+"",
                        client.paymentrefundstatus+"",
                         client.OrderRefNo+"",
                         client.OrderPlacedOn,
                         client.DeliveryDate,
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.UserName,
                         client.Mobile,
                         client.Lastordestatuscompleted,
                         client.Activation,
                         client.CancelOrderStatus+""
                     }
                 }).ToArray()
            };
            return GridData;

        }

        public JQGrid LoadAllSuccessOrdersforCancelRefund(JqSearchIn si, string mapuniv, string Pdate)
        {
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetAllSuccessOrders(mapuniv, Pdate);

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }




            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                         client.Identyvalue+"",
                         client.paymentrefundstatus+"",
                         client.PaymentGatewayId+"",
                         client.OrderRefNo+"",
                         //client.OrderPlacedOndatetime==null ? "":client.OrderPlacedOndatetime.ToString("dd-MM-yyyy HH:mm:ss"),
                         client.OrderPlacedOndatetime==null ? "": client.OrderPlacedOndatetime.ToString("dd-MM-yyyy HH:mm:ss"),
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.universityname,
                         client.UserName,
                         client.Mobile,
                         client.TransactionAmount+"",
                         client.BalanceAmount+"",
                         client.RefundAmount+"",
                         client.BalanceAmount+""
                         
                         //client.Activation,
                         //client.CancelOrderStatus+""
                     }
                 }).ToArray()
            };
            return GridData;

        }

        public JQGrid LoadAllOrdersbuyOnlineStatus(JqSearchIn si, string mapuniv, string Pdate)
        {
            VisitorsReport();
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetAllOrderstatusDetailsbyOnline(mapuniv, Pdate);

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }

            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                         client.Identyvalue+"",
                         client.paymentrefundstatus+"",
                         client.PaymentGatewayId+"",
                         client.OrderRefNo+"",
                         //client.OrderPlacedOndatetime==null ? "":client.OrderPlacedOndatetime.ToString("dd-MM-yyyy HH:mm:ss"),
                         client.OrderPlacedOndatetime==null ? "": client.OrderPlacedOndatetime.ToString("dd-MM-yyyy HH:mm:ss"),
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.universityname,
                         client.UserName,
                         client.Mobile,
                         client.OnlinePaymentStatus,
                         client.OnlinePaymentStatus
                         //client.Activation,
                         //client.CancelOrderStatus+""
                     }
                 }).ToArray()
            };
            return GridData;

        }

        public JQGrid LoadFreeOrders_status(JqSearchIn si, string mapuniv)
        {
            List<OpenOrdersDetails> objSourceDataListToDeSerialize = new List<OpenOrdersDetails>();
            try
            {
                si = si.InitialiseObject(si);

                objSourceDataListToDeSerialize = GetSpecialOfferFreeOrders(mapuniv);

                if (!string.IsNullOrEmpty(si.whereString))
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

                }
                else
                {
                    objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
                }

            }

            catch (Exception ex)
            {
                throw ex;
            }

            var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

            var GridData = new JQGrid
            {
                total = si.totalPages,
                page = si.page,
                records = si.TotalRecCount,
                rows = (
                 from client in Data
                 select new
                 {
                     i = client.Identyvalue,
                     cell = new string[] {
                         client.Identyvalue+"",
                         client.OrderRefNo+"",
                         client.OrderPlacedOndatetime == null ? "" : client.OrderPlacedOndatetime.ToString("dd-MM-yyyy HH:mm:ss"),
                         client.TotalItems+"",
                         client.DeliveryMode,
                         client.universityname,
                         client.UserName,
                         client.Mobile,
                         client.OnlinePaymentStatus
                     }
                 }).ToArray()
            };
            return GridData;

        }

        public string UpdatePaymentRefundOrderStatus(long preperedBy, int paymentrefundamt, int Paymentrefundstatus, string OrderRefNo)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    int result = 0;
                    var UpdateOrderStatus = (from usot in contextsdce.user_subscribe_order_track
                                             join usbm in contextsdce.user_subscribe_master on usot.user_subscribe_master_id equals usbm.user_subscribe_master_id
                                             where usot.orderrefno == OrderRefNo
                                             select new { usot, usbm }).ToList();


                    if (UpdateOrderStatus != null)
                    {
                        UpdateOrderStatus.ForEach(x => x.usot.refundby = preperedBy);
                        UpdateOrderStatus.ForEach(x => x.usot.refundon = DateTime.Now);
                        UpdateOrderStatus.ForEach(x => x.usot.refundamt = paymentrefundamt);
                        UpdateOrderStatus.ForEach(x => x.usot.refundstatus = Paymentrefundstatus);
                        UpdateOrderStatus.ForEach(x => x.usbm.refund_by = preperedBy);
                        UpdateOrderStatus.ForEach(x => x.usbm.refund_on = DateTime.Now);
                        UpdateOrderStatus.ForEach(x => x.usbm.refund_amount = paymentrefundamt);

                        result = contextsdce.SaveChanges();

                        if (result > 0)
                        {
                            return "1";
                        }
                        else
                        {
                            return "-1";
                        }
                        if (Paymentrefundstatus == 1)
                        {
                            return "2";
                        }
                        else
                        {
                            return "-2";
                        }
                    }
                    else
                    {
                        return "0";
                    }
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "UpdatePaymentRefundOrderStatus", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        #endregion

        #region subject activation extended days
        public List<Departmentdetails> GetDepartmentListActivitionextenddays(int univId, int collegeId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<Departmentdetails> department = new List<Departmentdetails>();
                try
                {
                    if (collegeId == 0)
                    {
                        department = (from univ in contextsdce.university_master
                                      join dept in contextsdce.department_master on univ.univ_id equals dept.UniversityID
                                      where dept.UniversityID == univId
                                      && dept.active_status == 1
                                      select new Departmentdetails
                                      {
                                          DepartmentId = dept.department_id,
                                          UniversityId = dept.UniversityID,
                                          DepartmentName = dept.department_name.TrimEnd()
                                      }).Distinct().OrderBy(x => x.DepartmentName).ToList();
                    }
                    else
                    {
                        department = (from univ in contextsdce.university_master
                                      join dept in contextsdce.department_master on univ.univ_id equals dept.UniversityID
                                      join csm in contextsdce.college_subject_mapping on dept.department_id equals csm.department_id
                                      where csm.university_id == univ.univ_id && dept.UniversityID == univId && csm.college_id == collegeId
                                      && dept.active_status == 1
                                      select new Departmentdetails
                                      {
                                          DepartmentId = dept.department_id,
                                          UniversityId = dept.UniversityID,
                                          DepartmentName = dept.department_name.TrimEnd()
                                      }).Distinct().OrderBy(x => x.DepartmentName).ToList();
                    }
                    return department;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentListActivitionextenddays", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }
        //public List<Departmentdetails> GetDepartmentListActivitionextenddays(int univId)
        //{
        //    using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
        //    {
        //        List<Departmentdetails> department = new List<Departmentdetails>();
        //        try
        //        {
        //            department = (from univ in contextsdce.university_master
        //                          join dept in contextsdce.department_master on univ.univ_id equals dept.UniversityID
        //                          where dept.UniversityID == univId
        //                          && dept.active_status == 1
        //                          select new Departmentdetails
        //                          {
        //                              DepartmentId = dept.department_id,
        //                              UniversityId = dept.UniversityID,
        //                              DepartmentName = dept.department_name.TrimEnd()
        //                          }).Distinct().OrderBy(x => x.DepartmentName).ToList();

        //            return department;

        //        }
        //        catch (Exception ex)
        //        {
        //            contextsdce.Dispose();
        //            Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
        //            throw ex;
        //        }
        //        finally
        //        {
        //            contextsdce.Dispose();
        //        }
        //    }
        //}

        public List<UserSubjectDetails> GetAllUserSubjectDetails(long MobileNo)
        {
            List<UserSubjectDetails> lSubjectDetails = new List<UserSubjectDetails>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    lSubjectDetails = (from um in contextsdce.user_master
                                       join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                       //join pm in contextsdce.package_master on usm.subject_id equals pm.subject_id
                                       join sm in contextsdce.subject_master on usm.subject_id equals sm.subject_id
                                       join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                       join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                       join dsm in contextsdce.department_subject_mapping on sm.subject_id equals dsm.subject_id
                                       join dm in contextsdce.department_master on dsm.department_id equals dm.department_id
                                       //join dm in contextsdce.department_master on um.DepartmentID equals dm.department_id
                                       //join dsm in contextsdce.department_subject_mapping on dm.department_id equals dsm.department_id
                                       where um.mobile == MobileNo && um.active_status == 1 && dsm.active_status == 1 && usm.department_id == dsm.department_id

                                       orderby
                                       dsm.map_year, dsm.semester, usm.subject_unit_expiryon descending

                                       select new { um, usm, dm, univ, cm, sm, dsm }).ToList().Select(x => new UserSubjectDetails
                                       {
                                           UserId = x.um.user_id,
                                           UserName = x.um.user_first_name,
                                           Mobile = x.um.mobile,
                                           Email = x.um.email_id,
                                           DepartmentId = x.dm.department_id,
                                           College = x.cm.college_name,
                                           University = x.univ.university_name,
                                           SubjectId = x.sm.subject_id,
                                           SubjectCode = x.sm.subject_code,
                                           SubjectName = x.sm.subject_name,
                                           Years = x.dsm.map_year,
                                           Semester = x.dsm.semester,
                                           DepartmentName = x.dm.department_name,
                                           ExpiredDate = x.usm == null ? string.Empty : x.usm.subject_unit_expiryon.ToString("dd-MM-yyyy")
                                       }).GroupBy(x => x.SubjectId).Select(x => x.First()).Distinct().ToList();

                    return lSubjectDetails;

                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetUserSubjectDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public List<UserSubjectDetails> GetUserDetailsForActivationExtendeddays(long MobileNo)
        {
            List<UserSubjectDetails> lUserSubjectDetails = new List<UserSubjectDetails>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    lUserSubjectDetails = (from um in contextsdce.user_master
                                               //join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                               //join pm in contextsdce.package_master on usm.subject_id equals pm.subject_id
                                               //join sm in contextsdce.subject_master on usm.subject_id equals sm.subject_id
                                           join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                           join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                           join dm in contextsdce.department_master on um.DepartmentID equals dm.department_id
                                           join dsm in contextsdce.department_subject_mapping on dm.department_id equals dsm.department_id
                                           where um.mobile == MobileNo && um.active_status == 1
                                           select new UserSubjectDetails
                                           {
                                               Mobile = um.mobile,
                                               UserId = um.user_id,
                                               UserName = um.user_first_name,
                                               Email = um.email_id,
                                               DepartmentId = dm.department_id,
                                               DepartmentName = dm.department_name,
                                               College = cm.college_name,
                                               UniversityId = univ.univ_id,
                                               University = univ.university_name,
                                               Years = dsm.map_year,
                                               Semester = dsm.semester
                                           }).Distinct().ToList();

                    return lUserSubjectDetails;

                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetUserSubjectDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public List<Departmentdetails> GetsemesterSubjectActivation(int univId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<Departmentdetails> department = new List<Departmentdetails>();
                try
                {
                    department = (from usm in contextsdce.univ_semester_master
                                  where usm.univ_id == univId
                                  select new Departmentdetails
                                  {
                                      year = usm.sem_year,
                                      semester = usm.semester_name
                                  }).Distinct().ToList();

                    return department;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public List<Departmentdetails> GetyearsemActivitionextenddays(int univId, int departmentId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<Departmentdetails> department = new List<Departmentdetails>();
                try
                {
                    department = (from univ in contextsdce.university_master
                                  join dsm in contextsdce.department_subject_mapping on univ.univ_id equals dsm.university_id
                                  where dsm.university_id == univId && dsm.department_id == departmentId && dsm.active_status == 1
                                  select new Departmentdetails
                                  {
                                      DepartmentId = dsm.department_id,
                                      UniversityId = dsm.university_id,
                                      year = dsm.map_year,
                                      semester = dsm.semester
                                  }).Distinct().ToList();

                    return department;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public string ExtendedDaysActivation(int userId, string subjectId, int extended_days, int sms, int email)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {

                string[] strsubjectId = subjectId.ToString().Split(',');

                try
                {
                    var extend = (from usm in contextsdce.user_subject_mapping
                                  where usm.user_id == userId && strsubjectId.Contains(usm.subject_id.ToString())
                                  select usm).Distinct().ToList();

                    if (extend != null)
                    {
                        extend.ForEach(x => x.subject_unit_expiryon = DateTime.Now.AddDays(extended_days));
                        extend.ForEach(x => x.package_expirydate = DateTime.Now.AddDays(extended_days));
                        extend.ForEach(x => x.last_modified_on = DateTime.Now.AddDays(extended_days));
                        extend.ForEach(x => x.subject_purchasedon = DateTime.Now);

                        int result = contextsdce.SaveChanges();
                        if (result > 0)
                        {
                            var userdetails = (from um in contextsdce.user_master where um.user_id == userId select um).FirstOrDefault();
                            if (sms > 0)
                            {
                                CallSendSMS obj = new CallSendSMS();

                                obj.SendSMS(userdetails.mobile + "", obj.SMS_ExtendedDaysActivation(userdetails.user_name, extended_days), null);
                            }
                            else if (email > 0)
                            {
                                MailHelper.SendMail(userdetails.email_id, "Subject Activation Extension", MailHelper.EmailBody_ActivationExtension(extended_days + ""));
                            }
                            return "1";
                        }
                        else
                        {
                            return "-1";
                        }

                    }
                    else
                    {
                        return "0";
                    }
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "ExtendedDaysActivation", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }

        }

        public string SaveUserSubjectDetailsForActivation(int subjectid, string subjectcode, string subjectname, string Subjectversion, int userid, int departmentid, string subjectexpirydate, DateTime subjectexpiryextensiondate, int subjectextensiondays, int activatedby)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    DateTime subj_exp_date = subjectexpirydate == null ? DateTime.Now : DateTime.ParseExact(subjectexpirydate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    DateTime subj_exp_extension_date = subjectexpiryextensiondate;
                    user_subject_activation_history subjectactivationdays = new user_subject_activation_history();
                    subjectactivationdays.subject_id = subjectid;
                    subjectactivationdays.subject_code = subjectcode;
                    subjectactivationdays.subject_name = subjectname;
                    subjectactivationdays.user_id = userid;
                    subjectactivationdays.department_id = departmentid;
                    subjectactivationdays.subject_version = Subjectversion == null ? "" : Subjectversion;
                    subjectactivationdays.subject_expiry_date = subj_exp_date;
                    subjectactivationdays.subject_expiry_extension_date = subj_exp_extension_date;
                    subjectactivationdays.subject_extension_days = subjectextensiondays;
                    subjectactivationdays.activated_on = DateTime.Now;
                    subjectactivationdays.activated_by = activatedby;
                    subjectactivationdays.activation_type = 2;
                    contextsdce.user_subject_activation_history.Add(subjectactivationdays);

                    int result = contextsdce.SaveChanges();

                    if (result > 0)
                    {
                        return "Activation Subject Extended days Saved Successfully";
                    }
                    else
                    {
                        return "Not Saved";
                    }

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "SaveUserSubjectDetailsForActivation", "SaveUserSubjectDetailsForActivation", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }

        }

        #endregion

        /// <summary>
        /// To Get University Details for AdminPage
        /// </summary>
        /// <param name="mapuniv"></param>
        /// <returns></returns>
        public List<Universitydetails> GetUniversityDetailsAdmin(string mapuniv)
        {
            string[] mappedUniv = mapuniv.ToString().Split(',');

            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {

                List<Universitydetails> UniversityDetails = new List<Universitydetails>();
                try
                {
                    UniversityDetails = (from um in contextsdce.university_master
                                         where mappedUniv.Contains(um.univ_id.ToString())
                                         select new Universitydetails
                                         {
                                             Universityid = um.univ_id,
                                             UniversityName = um.university_name,
                                             Univcode = um.university_code,

                                         }).Distinct().ToList();

                    return UniversityDetails;
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Product", "GetUniversityDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        /// <summary>
        /// Admin Dashboard 
        /// </summary>
        /// <param name="mapuniv"></param>
        /// <returns></returns>
        public List<AdminDashboard> AdminDashBoard(string mapuniv)
        {
            string[] mappedUniv = null;
            if (mapuniv.Contains(",") && mapuniv.Length > 1)
            {
                mappedUniv = mapuniv.ToString().Split(',');
            }
            else
            {
                mappedUniv[0] = mapuniv;
            }

            List<AdminDashboard> orders = new List<AdminDashboard>();

            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var dashboard = (from usm in contextsdce.user_subscribe_master
                                     join usot in contextsdce.user_subscribe_order_track on usm.user_subscribe_master_id equals usot.user_subscribe_master_id
                                     join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                     join um in contextsdce.user_master on usm.user_id equals um.user_id
                                     join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                     join pm in contextsdce.payment_master on usm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                     join pkg in contextsdce.package_master on usd.package_id equals pkg.package_id
                                     join pd in contextsdce.package_details on pkg.package_id equals pd.package_id into lfjpd
                                     from pdlfj in lfjpd.Where(x => x.subject_unit_type == pkg.subject_unit_type && x.department_id == pkg.department_id).DefaultIfEmpty()
                                     where mappedUniv.Contains(univ.univ_id.ToString()) && pm.TransactionType == "2"
                                     && usm.order_status == usot.orderstatus
                                     && pm.TxnStatus == "2" && um.active_status == 1
                                     group new { usm, pdlfj } by usm.user_subscribe_master_id into g
                                     select new
                                     {
                                         payment_refno = g.FirstOrDefault().usm.payment_ref_no,
                                         orderstaus = g.FirstOrDefault().usm.order_status ?? 0,
                                         ordercount = g.Select(x => x.usm.user_subscribe_master_id).Distinct().Count(),
                                         subjectcount = g.Select(x => x.pdlfj.package_detail_id == 0 ? 1 : g.Select(t => t.pdlfj.package_detail_id).Distinct().Count())

                                     }).GroupBy(x => x.orderstaus).ToList();


                    foreach (var t in dashboard)
                    {
                        AdminDashboard ad = new AdminDashboard();
                        ad.OpenOrders = t.FirstOrDefault().orderstaus;
                        ad.OrderCount = t.Sum(x => x.ordercount);
                        int subjCount = 0;
                        foreach (var k in t.Select(x => x.subjectcount))
                        {
                            subjCount += k.FirstOrDefault();
                        }
                        ad.SubjectCount = subjCount;
                        orders.Add(ad);
                    }

                    return orders;
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "AdminDashBoard", ex.Message, "error");
                    Log.WriteLogMessage(PageName, "AdminService", "AdminDashBoard", ex.InnerException.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        /// <summary>
        ///  To get open order status at Admin Dashboard For ONDOOR Orders
        /// </summary>
        /// <param name="mapuniv"></param>
        /// <returns></returns>
        public List<AdminDashboard> OpenOrdersAdminDashBoard(string mapuniv)
        {
            string[] mappedUniv = mapuniv.ToString().Split(',');

            List<AdminDashboard> orders = new List<AdminDashboard>();

            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var dashboard = (from usrt in contextsdce.user_subscribe_order_track
                                     join usbm in contextsdce.user_subscribe_master on usrt.user_subscribe_master_id equals usbm.user_subscribe_master_id
                                     join um in contextsdce.user_master on usbm.user_id equals um.user_id
                                     join pm in contextsdce.payment_master on usbm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                     join dom in contextsdce.user_subscribe_delivery_mode on usbm.user_subscribe_delivery_mode_id equals dom.user_subscribe_delivery_mode_id
                                     where mappedUniv.Contains(um.univ_id.ToString()) && usbm.TransactionType == 2 && dom.delivery_type == 1
                                     && usbm.order_status == usrt.orderstatus && usbm.payment_ref_no == usrt.orderrefno && pm.TxnStatus == "2"
                                     && usbm.order_status != 2
                                     group new { usrt, usbm } by new
                                     {
                                         usrt.user_subscribe_master_id
                                     }
                                     into g
                                     select new
                                     {
                                         totaloders = g.Count(),
                                         ordersInque = g.Where(x => x.usrt.preparedstatus == 1).Count(),
                                         ordersinprep = g.Where(x => x.usrt.preparedstatus != 1 && x.usrt.qualitycheckstatus == 1).Count(),
                                         ordersinqualitycheck = g.Where(x => x.usrt.qualitycheckstatus != 1 && x.usrt.deliverstatus == 1).Count(),
                                         ordersindelivery = g.Where(x => x.usrt.deliverstatus != 1 && x.usrt.deliverstatus != 3).Count(),
                                         orderdelivered = g.Where(x => x.usrt.deliverstatus == 3).Count()
                                     }).ToList();

                    AdminDashboard admin = new AdminDashboard();
                    admin.OrdersInQue = dashboard.Where(x => x.ordersInque > 0).Count();
                    admin.OrderInPreparation = dashboard.Where(x => x.ordersinprep > 0).Count();
                    admin.OrdersInQalityCheck = dashboard.Where(x => x.ordersinqualitycheck > 0).Count();
                    admin.OrdersInDelivery = dashboard.Where(x => x.ordersindelivery > 0).Count();
                    admin.DeliveredOrderds = dashboard.Where(x => x.orderdelivered > 0).Count();
                    admin.TotalOrders = dashboard.Where(x => x.totaloders > 0).Count();
                    orders.Add(admin);
                    return orders;
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "OpenOrdersAdminDashBoard", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }


        /// <summary>
        /// To get Last week  order status for Admin Dashboard
        /// </summary>
        /// <param name="mapuniv"></param>
        /// <returns></returns>
        public List<AdminDashboard> LastweekOrdersAdminDashBoard(string mapuniv)
        {
            List<AdminDashboard> orders = new List<AdminDashboard>();

            string[] mappedUniv = mapuniv.ToString().Split(',');

            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    DateTime startdate = DateTime.Now.AddDays(-7).Date;
                    DateTime end_date = DateTime.Now.Date;

                    // System.Data.Entity.DbFunctions.TruncateTime(usbm.created_on)

                    var toalorders = (from usd in contextsdce.user_subscribe_details
                                      join usbm in contextsdce.user_subscribe_master on usd.user_subscribe_master_id equals usbm.user_subscribe_master_id
                                      join um in contextsdce.user_master on usbm.user_id equals um.user_id
                                      join usdm in contextsdce.user_subscribe_delivery_mode on usbm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                      join pm in contextsdce.payment_master on usbm.user_subscribe_master_id equals pm.user_subscribe_master_id
                                      where
                                      System.Data.Entity.DbFunctions.TruncateTime(usbm.created_on) >= startdate && System.Data.Entity.DbFunctions.TruncateTime(usbm.created_on) <= end_date
                                        && usbm.order_status != 3 && usbm.payment_status == 2 && mappedUniv.Contains(um.univ_id.ToString())
                                      && pm.TransactionType == "2" && pm.TxnStatus == "2"
                                      group new { usbm, usd, usdm } by new { usbm.user_subscribe_master_id, createdo = System.Data.Entity.DbFunctions.TruncateTime(usbm.created_on) } into g
                                      select new
                                      {
                                          subscribemasterid = g.Key.user_subscribe_master_id,
                                          createdon = g.Key.createdo,
                                          totalItmes = g.Where(x => x.usbm.user_subscribe_master_id != 0).Count(),
                                          totalOrders = g.Select(x => x.usbm.payment_ref_no).Distinct().Count(),
                                          productprice = g.Select(x => x.usd.selling_price).Sum(),
                                          shippingAndmedia = g.Select(x => x.usdm.price).Distinct().Sum(),
                                          orderrefno = g.FirstOrDefault().usbm.payment_ref_no,
                                          discountAmount = g.FirstOrDefault().usbm.discount_amt ?? 0,
                                          totalamount = g.Sum(x => x.usd.selling_price)
                                      }).GroupBy(x => System.Data.Entity.DbFunctions.TruncateTime(x.createdon)).ToList();


                    //orders = (from t in toalorders 
                    //          select new AdminDashboard
                    //          {

                    //              Createdon = t.Key, 
                    //              TotalOrders = t.Select(y=>y.totalOrders),
                    //              TotalItmes = t.totalItmes,
                    //              ProductPrice = t.productprice,
                    //              ShippingAndMedia = t.shippingAndmedia,
                    //              DiscountAmount = t.discountAmount,
                    //              TotalAmount = t.productprice + t.shippingAndmedia - Convert.ToInt32(t.discountAmount),
                    //              OrderRefNo = t.orderrefno

                    //          }).ToList();


                    foreach (var result in toalorders)
                    {
                        AdminDashboard ad = new AdminDashboard();
                        ad.Createdon = Convert.ToDateTime(result.Key).ToString("dd-MM-yyyy");
                        foreach (var res in result)
                        {
                            ad.TotalOrders += res.totalOrders;
                            ad.TotalItmes += res.totalItmes;
                            ad.ProductPrice += res.productprice;
                            ad.ShippingAndMedia += res.shippingAndmedia;
                            ad.DiscountAmount += res.discountAmount;
                            ad.TotalAmount += res.productprice + res.shippingAndmedia - Convert.ToInt32(res.discountAmount);
                            ad.OrderRefNo = res.orderrefno;
                        }
                        orders.Add(ad);
                    }

                    return orders;

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "LastweekOrdersAdminDashBoard", ex.Message, "error");
                    Log.WriteLogMessage(PageName, "AdminService", "LastweekOrdersAdminDashBoard", ex.InnerException.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// To get old and New user count those who visited our site
        /// </summary>
        /// <param name="mapuniv"></param>
        /// <returns></returns>
        public List<checkLogin> VisitedUersChart(string mapuniv)
        {
            List<checkLogin> visitedusers = new List<checkLogin>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    int[] role = new int[] { 1, 2 };

                    string[] mappedUniv = mapuniv.ToString().Split(',');

                    DateTime visitdfrom = DateTime.Now.AddDays(-20).Date;

                    var visitors = (from ult in contextsdce.user_login_track
                                    join um in contextsdce.user_master on ult.user_id equals um.user_id
                                    join unvm in contextsdce.university_master on um.univ_id equals unvm.univ_id
                                    where System.Data.Entity.DbFunctions.TruncateTime(ult.visited_on) >= visitdfrom
                                    && role.Contains(um.role_id) && mappedUniv.Contains(unvm.univ_id.ToString())
                                    group ult by System.Data.Entity.DbFunctions.TruncateTime(ult.visited_on) into g
                                    select new
                                    {
                                        newuser = g.Where(x => x.is_first_time_login == 1).Count(),
                                        olduser = g.Where(x => x.is_first_time_login == 2).Count(),
                                        visitedon = g.FirstOrDefault().visited_on

                                    }).OrderBy(x => x.visitedon).ToList();
                    visitedusers = (from t in visitors
                                    select new checkLogin
                                    {
                                        OldUserCount = t.olduser,
                                        NewUserCount = t.newuser,
                                        VisitedDate = t.visitedon.ToString("dd-MM-yyyy")
                                    }).ToList();

                    return visitedusers;
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, " AdminService", "VisitedUersChart", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        ///  to get department details for AdminActivitycontroller using university id
        /// </summary>
        /// <param name="univId"></param>
        /// <returns></returns>
        public List<Departmentdetails> GetDepartmentListForAdminActivity(int univId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<Departmentdetails> department = new List<Departmentdetails>();
                try
                {
                    department = (from univ in contextsdce.university_master
                                  join dept in contextsdce.department_master on univ.univ_id equals dept.UniversityID
                                  where dept.UniversityID == univId
                                  && dept.active_status == 1
                                  select new Departmentdetails
                                  {
                                      DepartmentId = dept.department_id,
                                      UniversityId = dept.UniversityID,
                                      DepartmentName = dept.department_name.TrimEnd()
                                  }).Distinct().OrderBy(x => x.DepartmentName).ToList();

                    return department;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        /// To GetDateWiseOrderSummary between two dates
        /// </summary>
        /// <param name="FromDate"></param>
        /// <param name="ToDate"></param>
        /// <returns></returns>
        public List<AdminDateWiseSummary> GetDateWiseOrderSummary(string FromDate, string ToDate)
        {
            List<AdminDateWiseSummary> DatewiseOrders = new List<AdminDateWiseSummary>();
            using (learnengg_payment_portal_entities dbcontext = new learnengg_payment_portal_entities())
            {
                try
                {
                    DatewiseOrders = (from usd in dbcontext.user_subscribe_details
                                      where
                                        (usd.user_subscribe_master.created_on >= DateTime.Parse(FromDate) && usd.user_subscribe_master.created_on <= DateTime.Parse(ToDate))
                                        && usd.user_subscribe_master.order_status != 3
                                      group new { usd.user_subscribe_master, usd } by new
                                      {
                                          Column1 = Convert.ToString(usd.user_subscribe_master.created_on.Date)
                                      } into g
                                      select new AdminDateWiseSummary
                                      {
                                          dates = g.Key.Column1,
                                          ordersCount = g.Count(p => p.usd.user_subscribe_master.user_subscribe_master_id != null),
                                          orderAmount = (int)g.Sum(p => p.usd.selling_price)
                                      }).ToList();


                }
                catch (Exception ex)
                {
                    throw ex;
                }

                return DatewiseOrders;
            }
        }


        public string test(int userId, string subjectId, int extended_days, int sms, int email, int subjectid, string subjectcode, string subjectname, string Subjectversion, int userid, int departmentid, string subjectexpirydate, string subjectexpiryextensiondate, int subjectextensiondays, int activatedby)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                contextsdce.Database.Connection.Open();
                int result = 0;
                int resultupdate = 0;
                using (var transaction = contextsdce.Database.BeginTransaction())
                {
                    try
                    {
                        string[] strsubjectId = subjectId.ToString().Split(',');
                        var extend = (from usm in contextsdce.user_subject_mapping
                                      where usm.user_id == userId && strsubjectId.Contains(usm.subject_id.ToString())
                                      select usm).Distinct().ToList();

                        if (extend != null)
                        {
                            extend.ForEach(x => x.subject_unit_expiryon = DateTime.Now.AddDays(extended_days));
                            extend.ForEach(x => x.package_expirydate = DateTime.Now.AddDays(extended_days));
                            extend.ForEach(x => x.last_modified_on = DateTime.Now.AddDays(extended_days));
                            extend.ForEach(x => x.subject_purchasedon = DateTime.Now);
                            resultupdate = contextsdce.SaveChanges();

                            user_subject_activation_history subjectactivationdays = new user_subject_activation_history();
                            subjectactivationdays.subject_id = subjectid;
                            subjectactivationdays.subject_code = subjectcode;
                            subjectactivationdays.subject_name = subjectname;
                            subjectactivationdays.user_id = userid;
                            subjectactivationdays.department_id = departmentid;
                            subjectactivationdays.subject_version = Subjectversion == null ? "" : Subjectversion;
                            subjectactivationdays.subject_expiry_date = Convert.ToDateTime(subjectexpirydate);
                            subjectactivationdays.subject_expiry_extension_date = Convert.ToDateTime(subjectexpiryextensiondate);
                            subjectactivationdays.subject_extension_days = subjectextensiondays;
                            subjectactivationdays.activated_on = DateTime.Now;
                            subjectactivationdays.activated_by = activatedby;

                            contextsdce.user_subject_activation_history.Add(subjectactivationdays);

                            result = contextsdce.SaveChanges();
                            if (resultupdate > 0)
                            {
                                var userdetails = (from um in contextsdce.user_master where um.user_id == userId select um).FirstOrDefault();
                                if (sms > 0)
                                {
                                    CallSendSMS obj = new CallSendSMS();

                                    obj.SendSMS(userdetails.mobile + "", obj.SMS_ExtendedDaysActivation(userdetails.user_name, extended_days), null);
                                }
                                else if (email > 0)
                                {
                                    MailHelper.SendMail(userdetails.email_id, "Subject Activation Extension", MailHelper.EmailBody_ActivationExtension(extended_days + ""));
                                }
                                return "1";
                            }
                            else
                            {
                                return "-1";
                            }

                        }
                        else
                        {
                            return "0";
                        }
                        transaction.Commit();

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        transaction.Dispose();
                        contextsdce.Dispose();
                        Log.WriteLogMessage(PageName, "Payment", "SaveUserOrderDetails", ex.Message, "error");
                        return ""; // Failure
                    }
                    finally
                    {
                        transaction.Dispose();
                        contextsdce.Dispose();
                    }
                }
            }
        }

        /// <summary>
        /// get user subject details for subject activation
        /// </summary>
        /// <param name="UserId"></param>
        /// <returns>AllOrderStatusDetailsbuyOnline.cshtml</returns>
        public List<userSubjects> GetUserSubjectsDetails_Activation(string OrderID)
        {
            List<userSubjects> usersubject = new List<userSubjects>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    List<userSubjects> showsubject = new List<userSubjects>();
                    List<userSubjects> showsubject1 = new List<userSubjects>();

                    showsubject = (from usm in contextsdce.user_subscribe_master
                                   join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                   join pm in contextsdce.package_master on usd.package_id equals pm.package_id
                                   join dm in contextsdce.department_master on pm.department_id equals dm.department_id
                                   join sm in contextsdce.subject_master on pm.subject_id equals sm.subject_id
                                   join sbum in contextsdce.subject_unit_master on sm.subject_id equals sbum.subject_id
                                   where usm.payment_ref_no == OrderID
                                  && sm.active_status == 1 && sbum.active_status == 1 && pm.is_bundle == 0 && pm.activestatus == 1
                                  && usm.payment_status == 2 && usm.TransactionType == 2 && pm.subject_unit_type == sbum.subject_unit_type

                                   // from usm in contextsdce.user_subscribe_master
                                   //join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                   //join packg in contextsdce.package_master on usd.package_id equals packg.package_id
                                   //join ussm in contextsdce.user_subject_mapping on packg.subject_id equals ussm.subject_id
                                   //where usm.payment_ref_no == OrderID && packg.is_bundle == 0 && packg.activestatus == 1

                                   select new { usm, usd, pm, dm, sm, sbum }).ToList().Select(x => new userSubjects
                                   {
                                       Orderid = x.usm.payment_ref_no,
                                       usersubmasterid = x.usm.user_subscribe_master_id,
                                       userpackageexpiryon = x.usd.package_expiryon.Date.ToString("dd-MM-yyyy"),
                                       //=ussm.package_expirydate,
                                       //subjectid = x.ussm.subject_id,
                                       //subjectname = x.ussm.subject_name
                                   }).GroupBy(x => x.subjectid).Select(x => x.First()).Distinct().ToList();

                    showsubject1 = (from usm in contextsdce.user_subscribe_master
                                    join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                    join pm in contextsdce.package_master on usd.package_id equals pm.package_id
                                    join pd in contextsdce.package_details on pm.package_id equals pd.package_id
                                    join dm in contextsdce.department_master on pm.department_id equals dm.department_id
                                    join sm in contextsdce.subject_master on pd.subject_id equals sm.subject_id
                                    join sbum in contextsdce.subject_unit_master on sm.subject_id equals sbum.subject_id
                                    where usm.payment_ref_no == OrderID
                                          && sm.active_status == 1 && sbum.active_status == 1 && pm.is_bundle == 1
                                          && usm.TransactionType == 2 && pm.subject_unit_type == sbum.subject_unit_type

                                    //from usm in contextsdce.user_subscribe_master
                                    //join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                    //join packg in contextsdce.package_master on usd.package_id equals packg.package_id
                                    //join pd in contextsdce.package_details on packg.package_id equals pd.package_id
                                    //join ussm in contextsdce.user_subject_mapping on pd.subject_id equals ussm.subject_id
                                    //where usm.payment_ref_no == OrderID && packg.is_bundle == 1 && packg.activestatus == 1

                                    select new { usm, usd, pm, dm, sm, sbum }).ToList().Select(x => new userSubjects
                                    {
                                        Orderid = x.usm.payment_ref_no,
                                        usersubmasterid = x.usm.user_subscribe_master_id,
                                        userpackageexpiryon = x.usd.package_expiryon.Date.ToString("dd-MM-yyyy"),
                                        //=ussm.package_expirydate,
                                        //subjectid = x.ussm.subject_id,
                                        //subjectname = x.ussm.subject_name
                                    }).GroupBy(x => x.subjectid).Select(x => x.First()).Distinct().ToList();

                    usersubject = showsubject.Union(showsubject1).Distinct().ToList();

                    return usersubject;
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "Product", "GetUserSubjectsDetails_Activation", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }

        }

        public string InsertOrUpdateLicenseExtensionByAdmin(int pUserID, string pPackageIds, int pSubjectUnitType, int trialDays, int sms, int email, int activatedby)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                using (var transaction = contextsdce.Database.BeginTransaction())
                {
                    try
                    {
                        List<saveSubjeDetails> saveSubjct = new List<saveSubjeDetails>();
                        string[] packIds = pPackageIds.Split(',');
                        saveSubjct = (from pm in contextsdce.package_master
                                      join dm in contextsdce.department_master on pm.department_id equals dm.department_id
                                      join sm in contextsdce.subject_master on pm.subject_id equals sm.subject_id
                                      join sbum in contextsdce.subject_unit_master on sm.subject_id equals sbum.subject_id
                                      where packIds.Contains(pm.package_id.ToString())
                                            && sm.active_status == 1 && sbum.active_status == 1 && pm.is_bundle == 0
                                            && pm.subject_unit_type == pSubjectUnitType && pm.subject_unit_type == sbum.subject_unit_type
                                            && pm.current_status == 1 && pm.activestatus == 1
                                      //&& pm.is_offer_package == 1
                                      select new saveSubjeDetails
                                      {
                                          subj_ID = sm.subject_id,
                                          sub_Code = sm.subject_code,
                                          subj_Name = sm.subject_name,
                                          subj_CoverParth = sm.subject_cover_path,
                                          subj_Version = sm.subject_version,
                                          subjUnit_ID = sbum.unit_id,
                                          subjUnit_code = sbum.unit_code,
                                          subjUnit_Name = sbum.unit_name,
                                          subjUnit_Path = sbum.subject_unit_path,
                                          subjUnit_version = sbum.subject_unit_version,
                                          subjUnit_usrVersion = sbum.subject_unit_version,
                                          deprtId = dm.department_id,
                                          deprtCode = dm.department_code,
                                          deprtName = dm.department_name,
                                          isDemo = sbum.is_demo,
                                          unit_orIdx = sbum.is_unit_or_index,
                                          activesubjdays = pm.package_duration_days,
                                          activDurDate = DateTime.Now,
                                          released_On = sm.released_on,
                                          user_ID = pUserID,
                                          is_updated_to_client = 1,
                                          LastmodifiedOn = DateTime.Now,
                                          LastClientUpdatedOn = DateTime.Now,
                                          LastSubunitModifiedOn = DateTime.Now,
                                          IsUpdatedSubunitToClient = 1,
                                          LastSubunitClientUpdatedOn = DateTime.Now,
                                          YearSem = pm.semester

                                      }).Distinct().OrderBy(u => u.subj_ID).ToList();

                        int departmentId = 0;
                        int subjectId = 0;
                        foreach (var k in saveSubjct)
                        {

                            //  if (departmentId == 0 || departmentId == k.deprtId)
                            {
                                departmentId = k.deprtId;

                                user_subject_mapping usbm = new user_subject_mapping();
                                usbm.subject_id = (int)k.subj_ID;
                                usbm.subject_code = k.sub_Code;
                                usbm.subject_name = k.subj_Name;
                                usbm.subject_cover_path = k.subj_CoverParth;
                                usbm.subject_version = k.subj_Version;
                                usbm.subject_unit_version = k.subjUnit_usrVersion;
                                usbm.subject_unit_user_version = k.subjUnit_usrVersion;
                                usbm.subject_unit_id = (int)k.subjUnit_ID;
                                usbm.subject_unit_code = k.subjUnit_code;
                                usbm.subject_unit_name = k.subjUnit_Name;
                                usbm.subject_unit_path = k.subjUnit_Path;
                                usbm.is_demo = k.isDemo;
                                usbm.department_code = k.deprtCode;
                                usbm.department_name = k.deprtName;
                                usbm.department_id = k.deprtId;
                                usbm.is_unit_or_index = k.unit_orIdx;
                                usbm.subject_purchasedon = DateTime.Now;
                                usbm.downloaded_on = DateTime.Now;
                                usbm.download_status = 1;
                                usbm.user_id = k.user_ID;
                                usbm.is_updated_to_client = 1;
                                usbm.last_modified_on = k.LastmodifiedOn;
                                usbm.last_client_updated_on = k.LastClientUpdatedOn;
                                usbm.is_updated_subunit_to_client = k.IsUpdatedSubunitToClient;
                                usbm.last_subunit_modified_on = k.LastSubunitModifiedOn;
                                usbm.last_subunit_client_updated_on = k.LastSubunitClientUpdatedOn;
                                usbm.subject_unit_expiryon = DateTime.Now.AddDays(trialDays);
                                usbm.package_expirydate = DateTime.Now.AddDays(trialDays);
                                // usbm.subject_trial_expiryon = DateTime.Now.AddDays(-1);
                                // usbm.is_trial = 1;
                                usbm.is_purchased = 1;
                                usbm.yearsem = k.YearSem;
                                //  contextsdce.user_subject_mapping.Add(usbm);
                                contextsdce.user_subject_mapping.AddOrUpdate(u => new { u.user_id, u.subject_unit_id }, usbm);

                                if (subjectId != usbm.subject_id)
                                {
                                    subjectId = usbm.subject_id;

                                    user_subject_activation_history subjectactivationdays = new user_subject_activation_history();
                                    subjectactivationdays.subject_id = usbm.subject_id;
                                    subjectactivationdays.subject_code = usbm.subject_code;
                                    subjectactivationdays.subject_name = usbm.subject_name;
                                    subjectactivationdays.user_id = pUserID;
                                    subjectactivationdays.department_id = usbm.department_id;
                                    subjectactivationdays.subject_version = "";
                                    subjectactivationdays.subject_expiry_date = DateTime.Now;
                                    subjectactivationdays.subject_expiry_extension_date = DateTime.Now.AddDays(trialDays);
                                    subjectactivationdays.subject_extension_days = trialDays;
                                    subjectactivationdays.activated_on = DateTime.Now;
                                    subjectactivationdays.activated_by = activatedby;
                                    subjectactivationdays.activation_type = 1;
                                    subjectactivationdays.activation_product_type = pSubjectUnitType;

                                    contextsdce.user_subject_activation_history.Add(subjectactivationdays);

                                    //SaveSubjectActivatedUserDetails(usbm.subject_id, usbm.subject_code, usbm.subject_name, "NULL", pUserID, usbm.department_id, null, DateTime.Now.AddDays(trialDays), trialDays, activatedby);
                                }

                            }
                        }

                        int result = contextsdce.SaveChanges();
                        transaction.Commit();
                        if (result > 0)
                        {
                            var userdetails = (from um in contextsdce.user_master where um.user_id == pUserID select um).FirstOrDefault();
                            if (sms > 0)
                            {
                                CallSendSMS obj = new CallSendSMS();

                                obj.SendSMS(userdetails.mobile + "", obj.SMS_ExtendedDaysActivation(userdetails.user_name, trialDays), null);
                            }
                            if (email > 0)
                            {
                                MailHelper.SendMail(userdetails.email_id, "Subject Activation Extension", MailHelper.EmailBody_ActivationExtension(trialDays + ""));
                            }

                            return "7";
                        }
                        else
                        {
                            return "-2";
                        }
                    }

                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        transaction.Dispose();
                        contextsdce.Dispose();
                        Log.WriteLogMessage(PageName, "AdminService", "UpdateTrailPackageOnline", ex.Message, "error");
                        return "-1"; // Failure
                    }
                    finally
                    {
                        transaction.Dispose();
                        contextsdce.Dispose();
                    }
                }
            }
        }


        public List<Semester_product> GetsemList_productdetails(int univId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<Semester_product> semesters = new List<Semester_product>();
                try
                {
                    semesters = (from usm in contextsdce.univ_semester_master
                                 where usm.univ_id == univId
                                 select new Semester_product
                                 {
                                     Universityid = usm.univ_id,
                                     Semester = usm.semester_name,
                                     Year = usm.sem_year,
                                     SemDisplay = usm.sem_display
                                 }).ToList();

                    return semesters;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetsemList_productdetails", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        #region  Admin product update keywords and  description
        //-----test product details admin side
        public List<Packagedetails_product> GetPackagedetails_productdetails(int univId, int DepartId, int Semester)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<Packagedetails_product> packages = new List<Packagedetails_product>();
                try
                {
                    packages = (from pm in contextsdce.package_master
                                where pm.univ_id == univId && pm.department_id == DepartId && pm.semester == Semester

                                select new Packagedetails_product
                                {
                                    DepartmentId = pm.department_id,
                                    UniversityId = pm.univ_id,
                                    semester = pm.semester,
                                    packageid = pm.package_id,
                                    PackageDisplayName = pm.package_display_name.TrimEnd()
                                }).GroupBy(x => x.PackageDisplayName).Select(x => x.FirstOrDefault()).Distinct().ToList();

                    return packages;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetPackagedetails_productdetails", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public singlePackagedetails GetSinglePackage(int PackageId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                singlePackagedetails pd = new singlePackagedetails();
                // List singlePackage = new List();
                try
                {
                    var displyname = (from pm in contextsdce.package_master where pm.package_id == PackageId select new { displayPackName = pm.package_display_name, displayUniv = pm.univ_id, displyDepart = pm.department_id }).FirstOrDefault();

                    var singlePackages = (from pckge in contextsdce.package_master
                                          join dm in contextsdce.department_master on pckge.department_id equals dm.department_id
                                          join univ in contextsdce.university_master on pckge.univ_id equals univ.univ_id
                                          join ucd in contextsdce.user_cart_details on pckge.package_id equals ucd.package_id into lftucd
                                          from ucd in lftucd.DefaultIfEmpty()
                                          where pckge.package_display_name.Equals(displyname.displayPackName.ToString())
                                          && pckge.department_id.Equals(displyname.displyDepart) && pckge.univ_id.Equals(displyname.displayUniv)
                                          && pckge.activestatus == 1
                                          orderby pckge.package_name
                                          group new { pckge, ucd, dm, univ } by pckge.package_display_name into g
                                          select new { packagename = g.Key, packageDetail = g }
                                        );


                    foreach (var package in singlePackages)
                    {

                        pd.packageName = package.packagename;
                        List<string> Content_packs = new List<string>();
                        List<string> QA_packs = new List<string>();
                        List<string> Bundle_packs = new List<string>();


                        pd.packageId = package.packageDetail.FirstOrDefault().pckge.package_id;
                        pd.departmentName = package.packageDetail.FirstOrDefault().dm.department_name;
                        pd.universityName = package.packageDetail.FirstOrDefault().univ.university_name;
                        pd.universityId = package.packageDetail.FirstOrDefault().univ.univ_id;
                        pd.packageQuickDesc = package.packageDetail.FirstOrDefault().pckge.short_desc;
                        pd.packageDesc = package.packageDetail.FirstOrDefault().pckge.long_desc;
                        pd.packageKeyword = package.packageDetail.FirstOrDefault().pckge.keywords;
                        pd.packageViedeo = package.packageDetail.FirstOrDefault().pckge.package_video_url == null ? "NoVideo" : ConfigurationManager.AppSettings["VideoUrl"] + package.packageDetail.FirstOrDefault().pckge.univ_id + "/" + package.packageDetail.FirstOrDefault().pckge.package_video_url;
                        if (package.packageDetail.FirstOrDefault().pckge.is_bundle == 0 && package.packageDetail.FirstOrDefault().pckge.is_offer_package == 1)
                        {
                            pd.trialpackage = ConfigurationManager.AppSettings["trialdownload"] + package.packageDetail.FirstOrDefault().pckge.univ_id + "/" + package.packageDetail.FirstOrDefault().pckge.package_display_name.Replace(" ", "_") + "_Trial.exe";
                            pd.packageDescfull = ConfigurationManager.AppSettings["LongDesc"] + package.packageDetail.FirstOrDefault().pckge.univ_id + "/" + package.packageDetail.FirstOrDefault().pckge.package_display_name.Replace(' ', '_') + ".pdf";
                        }
                        else if (package.packageDetail.FirstOrDefault().pckge.is_bundle == 1)
                        {
                            pd.trialpackage = "NoBundleFile";
                            pd.packageDescfull = "NoBundleFile";
                        }
                        else
                        {
                            pd.trialpackage = "No file";
                            pd.packageDescfull = "No file";
                        }
                        foreach (var pack in package.packageDetail)
                        {

                            switch (pack.pckge.subject_unit_type)
                            {


                                case 1:

                                    Content_packs.Add(pack.pckge.package_id.ToString());
                                    Content_packs.Add(pack.pckge.selling_price.ToString());
                                    Content_packs.Add(pack.pckge.actual_price.ToString());
                                    Content_packs.Add(pack.pckge.current_status == 0 ? "0" : "1");
                                    Content_packs.Add("no");

                                    break;

                                case 2:
                                    QA_packs.Add(pack.pckge.package_id.ToString());
                                    QA_packs.Add(pack.pckge.selling_price.ToString());
                                    QA_packs.Add(pack.pckge.actual_price.ToString());
                                    QA_packs.Add(pack.pckge.current_status == 0 ? "0" : "1");
                                    QA_packs.Add("no");

                                    break;

                                case 3:
                                    Bundle_packs.Add(pack.pckge.package_id.ToString());
                                    Bundle_packs.Add(pack.pckge.selling_price.ToString());
                                    Bundle_packs.Add(pack.pckge.actual_price.ToString());
                                    Bundle_packs.Add(pack.pckge.current_status == 0 ? "0" : "1");
                                    Bundle_packs.Add("no");

                                    break;

                                default:
                                    break;
                            }

                        }

                        pd.Bundlepacks = Bundle_packs;
                        pd.Contentpacks = Content_packs;
                        pd.QApacks = QA_packs;

                    }

                    return pd;
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Product", "GetSinglePackageDetailsWithoutLogin", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        public singlePackagedetails GetSinglePackagewithlogin(long UserId, int PackageId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                singlePackagedetails pd = new singlePackagedetails();
                // List singlePackage = new List();
                try
                {
                    var displyname = (from pm in contextsdce.package_master where pm.package_id == PackageId select new { displayPackName = pm.package_display_name, displayUniv = pm.univ_id, displyDepart = pm.department_id }).FirstOrDefault();

                    var singlePackages = (from pckge in contextsdce.package_master
                                          join dm in contextsdce.department_master on pckge.department_id equals dm.department_id
                                          join univ in contextsdce.university_master on pckge.univ_id equals univ.univ_id
                                          join ucd in contextsdce.user_cart_details on UserId equals ucd.user_id into lftucd
                                          from ucd in lftucd.DefaultIfEmpty()
                                              //where ucd.user_id==UserId
                                          where pckge.package_display_name.Equals(displyname.displayPackName.ToString())
                                          && pckge.department_id.Equals(displyname.displyDepart) && pckge.univ_id.Equals(displyname.displayUniv)
                                          && pckge.activestatus == 1
                                          orderby pckge.package_name
                                          group new { pckge, ucd, dm, univ } by pckge.package_display_name into g
                                          select new { packagename = g.Key, packageDetail = g }
                                        );

                    //  Log.WriteLogMessage(PageName, "Product", "GetSinglePackageDetailswithLoginPackCount", singlePackages.Count().ToString(), "error");

                    foreach (var package in singlePackages)
                    {

                        pd.packageName = package.packagename;
                        List<string> Content_packs = new List<string>();
                        List<string> QA_packs = new List<string>();
                        List<string> Bundle_packs = new List<string>();

                        pd.packageId = package.packageDetail.FirstOrDefault().pckge.package_id;
                        pd.departmentName = package.packageDetail.FirstOrDefault().dm.department_name;
                        pd.universityName = package.packageDetail.FirstOrDefault().univ.university_name;
                        pd.universityId = package.packageDetail.FirstOrDefault().univ.univ_id;
                        pd.packageQuickDesc = package.packageDetail.FirstOrDefault().pckge.short_desc;
                        pd.packageDesc = package.packageDetail.FirstOrDefault().pckge.long_desc;
                        pd.packageKeyword = package.packageDetail.FirstOrDefault().pckge.keywords;
                        pd.packageViedeo = package.packageDetail.FirstOrDefault().pckge.package_video_url == null ? "NoVideo" : ConfigurationManager.AppSettings["VideoUrl"] + package.packageDetail.FirstOrDefault().pckge.univ_id + "/" + package.packageDetail.FirstOrDefault().pckge.package_video_url;
                        if (package.packageDetail.FirstOrDefault().pckge.is_bundle == 0 && package.packageDetail.FirstOrDefault().pckge.is_offer_package == 1)
                        {
                            pd.trialpackage = ConfigurationManager.AppSettings["trialdownload"] + package.packageDetail.FirstOrDefault().pckge.univ_id + "/" + package.packageDetail.FirstOrDefault().pckge.package_display_name.Replace(" ", "_") + "_Trial.exe";
                            pd.packageDescfull = ConfigurationManager.AppSettings["LongDesc"] + package.packageDetail.FirstOrDefault().pckge.univ_id + "/" + package.packageDetail.FirstOrDefault().pckge.package_display_name.Replace(' ', '_') + ".pdf";
                        }
                        else if (package.packageDetail.FirstOrDefault().pckge.is_bundle == 1)
                        {
                            pd.trialpackage = "NoBundleFile";
                            pd.packageDescfull = "NoBundleFile";
                        }
                        else
                        {
                            pd.trialpackage = "No file";
                            pd.packageDescfull = "No file";
                        }
                        foreach (var pack in package.packageDetail)
                        {


                            switch (pack.pckge.subject_unit_type)
                            {


                                case 1:
                                    if (Content_packs.Count == 0)
                                    {
                                        Content_packs.Add(pack.pckge.package_id.ToString());
                                        Content_packs.Add(pack.pckge.selling_price.ToString());
                                        Content_packs.Add(pack.pckge.actual_price.ToString());
                                        Content_packs.Add(pack.pckge.current_status == 0 ? "0" : "1");
                                        if (pack.ucd == null)
                                        {
                                            Content_packs.Add("no");
                                        }
                                        else if (pack.ucd != null && pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString())
                                        {
                                            Content_packs.Add(pack.ucd == null ? "no" : pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString() ? "yes" : "no");
                                        }
                                    }

                                    else
                                    {
                                        if (pack.ucd != null && pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString())
                                        {
                                            Content_packs.Add(pack.ucd == null ? "no" : pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString() ? "yes" : "no");
                                        }
                                    }
                                    break;

                                case 2:
                                    if (QA_packs.Count == 0)
                                    {
                                        QA_packs.Add(pack.pckge.package_id.ToString());
                                        QA_packs.Add(pack.pckge.selling_price.ToString());
                                        QA_packs.Add(pack.pckge.actual_price.ToString());
                                        QA_packs.Add(pack.pckge.current_status == 0 ? "0" : "1");
                                        if (pack.ucd == null)
                                        {
                                            QA_packs.Add("no");
                                        }
                                        else if (pack.ucd != null && pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString())
                                        {
                                            QA_packs.Add(pack.ucd == null ? "no" : pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString() ? "yes" : "no");
                                        }
                                    }
                                    else
                                    {
                                        if (pack.ucd != null && pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString())
                                        {
                                            QA_packs.Add(pack.ucd == null ? "no" : pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString() ? "yes" : "no");
                                        }

                                    }
                                    break;

                                case 3:
                                    if (Bundle_packs.Count == 0)
                                    {
                                        Bundle_packs.Add(pack.pckge.package_id.ToString());
                                        Bundle_packs.Add(pack.pckge.selling_price.ToString());
                                        Bundle_packs.Add(pack.pckge.actual_price.ToString());
                                        Bundle_packs.Add(pack.pckge.current_status == 0 ? "0" : "1");
                                        if (pack.ucd == null)
                                        {
                                            Bundle_packs.Add("no");
                                        }
                                        else if (pack.ucd != null && pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString())
                                        {
                                            Bundle_packs.Add(pack.ucd == null ? "no" : pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString() ? "yes" : "no");
                                        }
                                    }
                                    else
                                    {

                                        if (pack.ucd != null && pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString())
                                        {
                                            Bundle_packs.Add(pack.ucd == null ? "no" : pack.ucd.package_id.ToString() == pack.pckge.package_id.ToString() ? "yes" : "no");
                                        }

                                    }
                                    break;

                                default:
                                    break;
                            }

                        }
                        if (Content_packs.Count == 4)
                        {
                            Content_packs.Add("no");
                        }
                        if (QA_packs.Count == 4)
                        {
                            QA_packs.Add("no");
                        }
                        if (Bundle_packs.Count == 4)
                        {
                            Bundle_packs.Add("no");
                        }
                        pd.Bundlepacks = Bundle_packs;
                        pd.Contentpacks = Content_packs;
                        pd.QApacks = QA_packs;

                    }

                    return pd;
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Product", "GetSinglePackageDetailswithLogin", ex.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        public string CheckLoginDetails_Update_Keywords_Desc(string Password, int Sessionuserid)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    EncryptionDecryption encrypt = new EncryptionDecryption();
                    var pass = encrypt.encrptpwd(Password, true);
                    var userData = (from login in contextsdce.user_master
                                    where (login.password == pass && login.user_id == Sessionuserid)
                                    select new { login.user_id, login.password });

                    if (userData.Any() == true)
                    {
                        return "1";
                    }
                    else
                    {
                        return "0";
                    }
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "CheckLoginDetails_Update_Keywords_Desc", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public List<keywords_longdesc_product> GetBindkewords_longDesc_productdetails(int packageid)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<keywords_longdesc_product> quickoverview = new List<keywords_longdesc_product>();
                try
                {
                    quickoverview = (from pm in contextsdce.package_master
                                         // join rm in contextsdce.regulation_master on pm.univ_id equals rm.university_id
                                     where pm.package_id == packageid
                                     select new keywords_longdesc_product
                                     {
                                         packageid = pm.package_id,
                                         quickoverview = pm.keywords,
                                         Description = pm.long_desc
                                     }).ToList();

                    return quickoverview;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetBindqick_Desc_productdetails", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        public string Update_keyword_longDesc_productdetails(int Sessionuserid, int packageid, string PreviousKeywords, string CurrentKeywords, string PreviousDescription, string CurrentDescription)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    int result = 0;
                    // Fillter based on univ,department,semester,regulation
                    var Filteerdisplaypackagename = (from pckge in contextsdce.package_master
                                                     where pckge.package_id == packageid
                                                     select new
                                                     {
                                                         PackageName = pckge.package_display_name,
                                                         UnivID = pckge.univ_id,
                                                         DepartID = pckge.department_id,
                                                         ruleid = pckge.rule_id,
                                                         semester = pckge.semester
                                                     }).FirstOrDefault();

                    var updatequickoverview = (from pckge in contextsdce.package_master
                                                   //where pm.package_display_name == packagedisplayname
                                               where pckge.package_display_name.Equals(Filteerdisplaypackagename.PackageName.ToString())
                                                      && pckge.department_id.Equals(Filteerdisplaypackagename.DepartID)
                                                      && pckge.univ_id.Equals(Filteerdisplaypackagename.UnivID)
                                                      && pckge.rule_id.Equals(Filteerdisplaypackagename.ruleid)
                                                      && pckge.semester.Equals(Filteerdisplaypackagename.semester)
                                               select pckge).ToList();
                    using (var transaction = contextsdce.Database.BeginTransaction())
                    {
                        try
                        {
                            if (CurrentKeywords != null)
                            {
                                updatequickoverview.ForEach(x => x.keywords = CurrentKeywords);


                            }
                            else if (CurrentKeywords == null && CurrentDescription == null)
                            {

                                updatequickoverview.ForEach(x => x.keywords = CurrentKeywords);

                            }

                            if (CurrentDescription != null)
                            {
                                updatequickoverview.ForEach(x => x.long_desc = CurrentDescription);

                            }
                            if (updatequickoverview != null)
                            {
                                package_master_track pmt = new package_master_track();

                                pmt.user_id = Sessionuserid;
                                pmt.package_id = packageid;
                                pmt.created_on = DateTime.Now;
                                pmt.previous_words = CurrentDescription != null ? PreviousDescription : PreviousKeywords;
                                pmt.current_words = CurrentDescription != null ? CurrentDescription : CurrentKeywords;
                                pmt.type = CurrentDescription != null ? 2 : 1;


                                contextsdce.package_master_track.Add(pmt);

                                result = contextsdce.SaveChanges();
                                transaction.Commit();
                            }
                            else
                            {
                                return "-2";
                            }
                        }
                        catch (Exception ex)
                        {
                            transaction.Rollback();
                            transaction.Dispose();
                            contextsdce.Dispose();
                            Log.WriteLogMessage(PageName, "AdminService", "Updatekeywords_longDesc_productdetails", ex.Message, "error");
                            return "-3"; // Failure
                        }
                        finally
                        {
                            transaction.Dispose();
                            contextsdce.Dispose();
                        }
                    }
                    if (result > 0)
                    {
                        return "1";
                    }
                    else
                    {
                        return "0";
                    }

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "Updatekeywords_longDesc_productdetails", ex.Message, "error");
                    return "-1";
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        #endregion

        #region subject activation extended days - New

        public List<UserSubjectDetails> GetOverallSubjectDetails(long MobileNo, int departmentId, int year, int semester, int subjunitType)
        {
            List<UserSubjectDetails> lSubjectDetails = new List<UserSubjectDetails>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    if (departmentId == 0)
                    {
                        lSubjectDetails = (from um in contextsdce.user_master
                                           join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                           join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                           join reg in contextsdce.regulation_master on univ.univ_id equals reg.university_id
                                           join sm in contextsdce.subject_master on reg.rule_id equals sm.rule_id
                                           join sum in contextsdce.subject_unit_master on sm.subject_id equals sum.subject_id
                                           join dm in contextsdce.department_master on um.univ_id equals dm.UniversityID
                                           join pm in contextsdce.package_master on dm.department_id equals pm.department_id
                                           join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id into lftusm
                                           from usm in lftusm.Where(p => p.subject_id == sm.subject_id && p.department_id == dm.department_id && p.subject_unit_id == sum.unit_id).DefaultIfEmpty()
                                           where um.mobile == MobileNo
                                           && um.active_status == 1 && dm.active_status == 1 && sm.active_status == 1 && pm.current_status == 1 && sm.active_status == 1
                                           && reg.active_status == 1 && pm.activestatus == 1 && pm.is_bundle == 0 && sm.UniversityID == um.univ_id && pm.univ_id == um.univ_id
                                           && pm.rule_id == sm.rule_id
                                           && pm.subject_unit_type == sum.subject_unit_type && pm.subject_unit_type == subjunitType
                                           && pm.subject_id == sm.subject_id
                                           orderby
                                             pm.year, pm.semester, dm.department_name, pm.package_name, usm.subject_unit_expiryon descending

                                           select new { um, usm, dm, univ, cm, sm, pm, reg }).ToList().Select(x => new UserSubjectDetails
                                           {
                                               UserId = x.um.user_id,
                                               UserName = x.um.user_first_name,
                                               Mobile = x.um.mobile,
                                               Email = x.um.email_id,
                                               DepartmentId = x.dm.department_id,
                                               College = x.cm.college_name,
                                               University = x.univ.university_name,
                                               SubjectId = x.sm.subject_id,
                                               SubjectCode = x.sm.subject_code,
                                               SubjectName = x.pm.package_name,
                                               Years = x.pm.year,
                                               Semester = x.pm.semester,
                                               DepartmentName = x.dm.department_name,
                                               PackageId = x.pm.package_id,
                                               packageName = x.pm.package_name,
                                               SubjectUnitType = x.pm.subject_unit_type ?? 0,
                                               Regulation = x.reg.rule_name,
                                               ExpiredDate = x.usm != null && x.usm.subject_unit_expiryon != null ? x.usm.subject_unit_expiryon.ToString("dd-MM-yyyy") : string.Empty

                                           }).GroupBy(x => new { x.DepartmentId, x.packageName }).Select(x => x.FirstOrDefault()).Distinct().ToList();


                    }

                    else
                    {
                        lSubjectDetails = (from um in contextsdce.user_master
                                           join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                           join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                           join reg in contextsdce.regulation_master on univ.univ_id equals reg.university_id
                                           join sm in contextsdce.subject_master on reg.rule_id equals sm.rule_id
                                           join sum in contextsdce.subject_unit_master on sm.subject_id equals sum.subject_id
                                           join dm in contextsdce.department_master on um.univ_id equals dm.UniversityID
                                           join pm in contextsdce.package_master on dm.department_id equals pm.department_id
                                           join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id into lftusm
                                           from usm in lftusm.Where(p => p.subject_id == sm.subject_id && p.department_id == dm.department_id && p.subject_unit_id == sum.unit_id).DefaultIfEmpty()
                                           where um.mobile == MobileNo && dm.department_id == departmentId
                                           && um.active_status == 1 && dm.active_status == 1 && sm.active_status == 1 && pm.current_status == 1 && sm.active_status == 1
                                           && reg.active_status == 1 && pm.activestatus == 1 && pm.is_bundle == 0 && sm.UniversityID == um.univ_id && pm.univ_id == um.univ_id
                                           && pm.rule_id == sm.rule_id
                                           && pm.subject_unit_type == sum.subject_unit_type && pm.subject_unit_type == subjunitType
                                           && pm.subject_id == sm.subject_id

                                           orderby
                                             pm.year, pm.semester, dm.department_name, sm.subject_name, usm.subject_unit_expiryon descending

                                           select new { um, usm, dm, univ, cm, sm, pm, reg }).ToList().Select(x => new UserSubjectDetails
                                           {
                                               UserId = x.um.user_id,
                                               UserName = x.um.user_first_name,
                                               Mobile = x.um.mobile,
                                               Email = x.um.email_id,
                                               DepartmentId = x.dm.department_id,
                                               College = x.cm.college_name,
                                               University = x.univ.university_name,
                                               SubjectId = x.sm.subject_id,
                                               SubjectCode = x.sm.subject_code,
                                               SubjectName = x.pm.package_name,
                                               Years = x.pm.year,
                                               Semester = x.pm.semester,
                                               DepartmentName = x.dm.department_name,
                                               PackageId = x.pm.package_id,
                                               packageName = x.pm.package_name,
                                               SubjectUnitType = x.pm.subject_unit_type ?? 0,
                                               Regulation = x.reg.rule_name,
                                               ExpiredDate = x.usm != null && x.usm.subject_unit_expiryon != null ? x.usm.subject_unit_expiryon.ToString("dd-MM-yyyy") : string.Empty

                                           }).GroupBy(x => new { x.DepartmentId, x.packageName }).Select(x => x.FirstOrDefault()).Distinct().ToList();

                    }

                    if (year > 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.Years == year));
                    }
                    if (semester > 0)
                    {
                        var datanew = lSubjectDetails.ToList();
                        lSubjectDetails.Clear();
                        lSubjectDetails.AddRange(datanew.Where(x => x.Semester == semester));
                    }

                    return lSubjectDetails;

                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetOverallSubjectDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public List<UserSubjectDetails> GetUserDetailsForSubjectActivation(long MobileNo)
        {
            List<UserSubjectDetails> lUserSubjectDetails = new List<UserSubjectDetails>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    lUserSubjectDetails = (from um in contextsdce.user_master
                                               //join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                               //join pm in contextsdce.package_master on usm.subject_id equals pm.subject_id
                                               //join sm in contextsdce.subject_master on usm.subject_id equals sm.subject_id
                                           join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                           join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                           join dm in contextsdce.department_master on um.DepartmentID equals dm.department_id
                                           join dsm in contextsdce.department_subject_mapping on dm.department_id equals dsm.department_id
                                           where um.mobile == MobileNo && um.active_status == 1
                                           select new UserSubjectDetails
                                           {
                                               Mobile = um.mobile,
                                               UserId = um.user_id,
                                               UserName = um.user_first_name,
                                               Email = um.email_id,
                                               DepartmentId = dm.department_id,
                                               DepartmentName = dm.department_name,
                                               College = cm.college_name,
                                               UniversityId = univ.univ_id,
                                               University = univ.university_name,
                                               Years = dsm.map_year,
                                               Semester = dsm.semester
                                           }).Distinct().ToList();

                    return lUserSubjectDetails;

                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetUserDetailsForSubjectActivation", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public string SaveSubjectActivatedUserDetails(int subjectid, string subjectcode, string subjectname, string Subjectversion, int userid, int departmentid, string subjectexpirydate, DateTime subjectexpiryextensiondate, int subjectextensiondays, int activatedby)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    DateTime subj_exp_date = subjectexpirydate == null ? DateTime.Now : DateTime.ParseExact(subjectexpirydate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    // DateTime subj_exp_extend_date = DateTime.ParseExact(subjectexpiryextensiondate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    DateTime subj_exp_extend_date = subjectexpiryextensiondate;
                    user_subject_activation_history subjectactivationdays = new user_subject_activation_history();
                    subjectactivationdays.subject_id = subjectid;
                    subjectactivationdays.subject_code = subjectcode;
                    subjectactivationdays.subject_name = subjectname;
                    subjectactivationdays.user_id = userid;
                    subjectactivationdays.department_id = departmentid;
                    subjectactivationdays.subject_version = Subjectversion == null ? "" : Subjectversion;
                    subjectactivationdays.subject_expiry_date = subj_exp_date;
                    subjectactivationdays.subject_expiry_extension_date = subj_exp_extend_date;
                    subjectactivationdays.subject_extension_days = subjectextensiondays;
                    subjectactivationdays.activated_on = DateTime.Now;
                    subjectactivationdays.activated_by = activatedby;


                    contextsdce.user_subject_activation_history.Add(subjectactivationdays);

                    int result = contextsdce.SaveChanges();

                    if (result > 0)
                    {
                        return "1";
                    }
                    else
                    {
                        return "0";
                    }

                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewUserRegistration", "SaveSubjectActivatedUserDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }

        }

        #endregion

        #region subject activation extended days - Report-New

        /// <summary>
        /// Show subject activation university wise,total users and total subjects activation details
        /// </summary>
        /// <returns></returns>

        public List<ActivationReport> SubjectActivationHistory_UniversityWise_Report()
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<ActivationReport> UniversityWise_SubjectActivation = new List<ActivationReport>();
                try
                {

                    //pageSize = 20;
                    //pageNumber = (page ?? 1);

                    var Index = 0;
                    UniversityWise_SubjectActivation = (from usah in contextsdce.user_subject_activation_history
                                                        join um in contextsdce.user_master on usah.user_id equals um.user_id
                                                        join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                                        where usah.activation_type == 1

                                                        select new
                                                        {
                                                            universityId = univ.univ_id,
                                                            userid = usah.user_id,
                                                            universityname = univ.university_name,
                                                            subjectid = usah.subject_id,
                                                            producttype = usah.activation_product_type

                                                        }).GroupBy(t => t.universityId).Select(g => new ActivationReport
                                                        {
                                                            universityId = g.FirstOrDefault().universityId,
                                                            Universityname = g.FirstOrDefault().universityname,
                                                            userId = g.Select(x => x.userid).Distinct().Count(),
                                                            TotalContent = g.Where(x => x.producttype == 1).Count(),
                                                            TotalQuestionAnswer = g.Where(x => x.producttype == 2 || x.producttype == 4).Count(),
                                                            rowIndex = +Index

                                                        }).OrderByDescending(x => x.Universityname).Distinct().ToList();

                    return UniversityWise_SubjectActivation;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "SubjectActivationHistory_UniversityWise_Report", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public List<ActivationReport> SubjectActivationHistory_DateWise_Details_Report(int UniversityId, string ActStartDate, string ActEndDate, string UserRole)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<ActivationReport> DateWise_SubjectActivation = new List<ActivationReport>();
                try
                {
                    DateWise_SubjectActivation = (from usah in contextsdce.user_subject_activation_history
                                                  join um in contextsdce.user_master on usah.user_id equals um.user_id //getting activated for username
                                                  join dm in contextsdce.department_master on um.DepartmentID equals dm.department_id
                                                  join rl in contextsdce.user_role on um.role_id equals rl.role_id
                                                  join um1 in contextsdce.user_master on usah.activated_by equals um1.user_id into leftum1//getting activate by username
                                                  from um1 in leftum1.DefaultIfEmpty()
                                                  join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                                  join sub in contextsdce.subject_master on usah.subject_id equals sub.subject_id
                                                  join pm in contextsdce.package_master on sub.subject_id equals pm.subject_id
                                                  where usah.activation_type == 1 && um.univ_id == UniversityId && pm.is_bundle == 0
                                                  orderby um.user_name ascending, usah.activated_on descending

                                                  group new { usah, um, um1, univ, pm, sub, dm, rl } by new { um.user_id, sub.subject_id, usah.activation_product_type, usah.activated_on } into subject

                                                  select new ActivationReport
                                                  {
                                                      // osample = subject.Key,
                                                      // activated for 
                                                      userName = subject.FirstOrDefault().um.user_first_name,
                                                      userMobile = subject.FirstOrDefault().um.mobile.ToString(),
                                                      userRole = subject.FirstOrDefault().rl.role_name,
                                                      departmentname = subject.FirstOrDefault().dm.department_name,
                                                      // subject information
                                                      subjectYear = subject.FirstOrDefault().pm.year,
                                                      subjectSemester = subject.FirstOrDefault().pm.semester,
                                                      subjectname = subject.FirstOrDefault().sub.subject_name,
                                                      subjectType = subject.FirstOrDefault().usah.activation_product_type == 1 ? "Content" : subject.FirstOrDefault().usah.activation_product_type == 2 ? "QA Windows" : "QA Android",
                                                      // whom activated
                                                      ActivateduserName = subject.FirstOrDefault().um1.user_first_name,
                                                      Activated_on = subject.FirstOrDefault().usah.activated_on,
                                                      subjectextensiondays = subject.FirstOrDefault().usah.subject_extension_days,
                                                      subjectexpiryextensiondt = subject.FirstOrDefault().usah.subject_expiry_extension_date
                                                  }).ToList();


                    return DateWise_SubjectActivation;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        /// <summary>
        /// Show subject activation Date wise,total users and total subjects,total content and total q/A activation details
        /// </summary>
        /// <param name="UniversityId"></param>
        /// <returns></returns>
        public List<ActivationReport> SubjectActivationHistory_DateWise_Report(int UniversityId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<ActivationReport> DateWise_SubjectActivation = new List<ActivationReport>();
                try
                {
                    var subjectactivation = (from usah in contextsdce.user_subject_activation_history
                                             join um in contextsdce.user_master on usah.user_id equals um.user_id //getting activated for username
                                             join um1 in contextsdce.user_master on usah.activated_by equals um1.user_id//getting activate by username
                                             join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                             where usah.activation_type == 1 && um.univ_id == UniversityId
                                             orderby usah.activated_on descending

                                             group new { usah, um, um1, univ } by EntityFunctions.TruncateTime(usah.activated_on) into subject


                                             select new
                                             {
                                                 osample = subject.Key,
                                                 useridcount = subject.Select(x => x.um.user_id).Distinct().Count(),
                                                 totalcontent = subject.Where(x => x.usah.activation_product_type == 1).Select(x => x.usah.subject_id).Count(),
                                                 totalqp = subject.Where(x => x.usah.activation_product_type == 2).Select(x => x.usah.subject_id).Count(),
                                                 orderby_date = subject.OrderBy(x => x.usah.activated_on)
                                             });
                    int packitems = 0;
                    int final = 0;
                    foreach (var output in subjectactivation)
                    {
                        ActivationReport activation_history = new ActivationReport();

                        activation_history.userId = output.useridcount;
                        activation_history.TotalContent = output.totalcontent;
                        activation_history.TotalQuestionAnswer = output.totalqp;
                        int itemcnt = 0;
                        foreach (var res in output.orderby_date)
                        {
                            activation_history.universityId = res.univ.univ_id;
                            activation_history.ActivatedbyUserId = res.um1.user_id;
                            activation_history.ActivatedforUserId = res.um.user_id;
                            activation_history.activatedon = res.usah.activated_on.ToString("dd-MM-yyyy");
                            activation_history.Activatedbyusername = res.um1.user_name;
                            //activation_history.Activatedforusername = res.um.user_name;

                            itemcnt++;

                        }
                        packitems++;
                        DateWise_SubjectActivation.Add(activation_history);
                    }


                    return DateWise_SubjectActivation;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        /// Show subject activation Activated for user wise,total users,subjects,subject type,expiry date and university  activation details
        /// </summary>
        /// <param name="UnivId"></param>
        /// <param name="Date"></param>
        /// <returns></returns>
        public List<ActivationReport> SubjectActivationy_For_HistorReportDetails(int UnivId, string Date)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<ActivationReport> SubjectActivationDetails = new List<ActivationReport>();
                try
                {
                    //DateTime ActivatedOn = Convert.ToDateTime(Date).Date;
                    DateTime ActivatedOn = DateTime.ParseExact(Date.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                    var ActivationHistoryDetails = (from usah in contextsdce.user_subject_activation_history
                                                    join um in contextsdce.user_master on usah.user_id equals um.user_id
                                                    join um1 in contextsdce.user_master on usah.activated_by equals um1.user_id//getting activate by username
                                                    join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                                    where usah.activation_type == 1 && usah.activation_product_type != 3
                                                     && System.Data.Entity.DbFunctions.TruncateTime(usah.activated_on) == ActivatedOn
                                                    && um.univ_id == UnivId
                                                    select new
                                                    {
                                                        universityId = univ.univ_id,
                                                        Universityname = univ.university_name,
                                                        UserIdFor = um.user_id,
                                                        subjectid = usah.subject_id,
                                                        subjectcode = usah.subject_code,
                                                        subjectname = usah.subject_name,
                                                        packagetype = usah.activation_product_type,
                                                        activatedon = usah.activated_on,
                                                        subjectexpirydate = usah.subject_expiry_date,
                                                        subjectexpiryextensiondate = usah.subject_expiry_extension_date,
                                                        subjectextensiondays = usah.subject_extension_days,
                                                        activatedby = um1.user_name,
                                                        activatedfor = um.user_name,
                                                        userids = usah.user_id
                                                    }).Distinct().ToList();
                    SubjectActivationDetails = (from t in ActivationHistoryDetails
                                                select new ActivationReport
                                                {
                                                    universityId = t.universityId,
                                                    Universityname = t.Universityname,
                                                    userId = ActivationHistoryDetails.Select(x => x.userids).Distinct().Count(),
                                                    subjectid = ActivationHistoryDetails.Select(x => x.subjectid).Count(),
                                                    subjectname = t.subjectname,
                                                    packagetype = t.packagetype == 1 ? "Content" : "Question & Answer",
                                                    activatedon = t.activatedon.ToString("dd-MM-yyyy"),
                                                    subjectexpirydate = t.subjectexpirydate.ToString("dd-MM-yyyy"),
                                                    subjectexpiryextensiondate = t.subjectexpiryextensiondate.ToString("dd-MM-yyyy"),
                                                    subjectextensiondays = t.subjectextensiondays,
                                                    Activatedforusername = t.activatedfor,
                                                    ActivatedforUserId = t.UserIdFor,
                                                    Activatedbyusername = t.activatedby
                                                }).Distinct().ToList();
                    return SubjectActivationDetails;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        /// Show subject activation Activated by user wise,total users and total subjects,total content and total q/A activation details
        /// </summary>
        /// <param name="UnivId"></param>
        /// <param name="Date"></param>
        /// <returns></returns>
        public List<ActivationReport> SubjectActivation_By_HistoryReportDetails(int UnivId, string Date)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<ActivationReport> SubjectActivationDetails = new List<ActivationReport>();
                try
                {
                    //DateTime ActivatedOn = Convert.ToDateTime(Date).Date;
                    DateTime ActivatedOn = DateTime.ParseExact(Date.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                    var ActivationHistoryDetails = (from usah in contextsdce.user_subject_activation_history
                                                    join um in contextsdce.user_master on usah.user_id equals um.user_id
                                                    join um1 in contextsdce.user_master on usah.activated_by equals um1.user_id//getting activate by username
                                                    join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                                    where usah.activation_type == 1 && usah.activation_product_type != 3
                                                    && System.Data.Entity.DbFunctions.TruncateTime(usah.activated_on) == ActivatedOn
                                                   && univ.univ_id == UnivId

                                                    group new { usah, um, um1, univ } by usah.user_id into activatedby

                                                    select new
                                                    {
                                                        osample = activatedby.Key,
                                                        useridcount = activatedby.Select(x => x.um.user_id).Distinct().Count(),
                                                        totalItem = activatedby.Select(x => x.usah.subject_id).Count(),
                                                        totalcontent = activatedby.Where(x => x.usah.activation_product_type == 1).Select(x => x.usah.subject_id).Count(),
                                                        totalqp = activatedby.Where(x => x.usah.activation_product_type == 2).Select(x => x.usah.subject_id).Count(),
                                                        userid = activatedby.OrderBy(x => x.usah.user_id)
                                                        //orderby_date = activatedby.OrderBy(x => x.usah.activated_on)
                                                    });
                    int packitems = 0;
                    int final = 0;
                    foreach (var output in ActivationHistoryDetails)
                    {
                        ActivationReport activation_history = new ActivationReport();

                        activation_history.userId = output.useridcount;
                        activation_history.subjectid = output.totalItem;
                        activation_history.TotalContent = output.totalcontent;
                        activation_history.TotalQuestionAnswer = output.totalqp;
                        int itemcnt = 0;
                        foreach (var res in output.userid)
                        {
                            activation_history.universityId = res.univ.univ_id;
                            activation_history.ActivatedbyUserId = res.um1.user_id;
                            activation_history.ActivatedforUserId = res.um.user_id;
                            activation_history.activatedon = res.usah.activated_on.ToString("dd-MM-yyyy");
                            activation_history.Activatedbyusername = res.um1.user_name;
                            activation_history.Activatedforusername = res.um.user_name;
                            activation_history.Universityname = res.univ.university_name;

                            itemcnt++;

                        }
                        packitems++;
                        SubjectActivationDetails.Add(activation_history);
                    }
                    return SubjectActivationDetails;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetDepartmentList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        #endregion


        /// <summary>
        /// To Load semester based on department basis
        /// </summary>
        /// <param name="departmentid"></param>
        /// <returns></returns>
        public List<dropdownloading> LoadSemesterDropDown(int departmentid)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<dropdownloading> semester = new List<dropdownloading>();
                JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
                try
                {

                    semester = (from dm in contextsdce.department_subject_mapping
                                where dm.department_id == departmentid

                                select new dropdownloading
                                {
                                    semester = dm.semester

                                }).Distinct().ToList();
                    return semester;
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "LoadSemesterDropDown", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        /// <summary>
        /// Loading university details for dropdown
        /// </summary>
        /// <returns></returns>
        public List<dropdownloading> LoadUniversityDropdown()
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<dropdownloading> UniversityDetails = new List<dropdownloading>();
                JavaScriptSerializer jsSerializer = new JavaScriptSerializer();

                try
                {
                    UniversityDetails = (from um in contextsdce.university_master
                                         join pm in contextsdce.package_master on um.univ_id equals pm.univ_id
                                         where um.university_type == 1 && pm.activestatus == 1 && pm.os_type == 2

                                         select new dropdownloading
                                         {
                                             Universityid = um.univ_id,
                                             UniversityName = um.university_name

                                         }).Distinct().ToList();
                    return UniversityDetails;
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "LoadUniversityDropdown", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        /// <summary>
        /// Loading Department details for dropdown
        /// </summary>
        /// <param name="universityId"></param>
        /// <returns></returns>
        public List<dropdownloading> LoadDepartmentDropdown(int universityId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<dropdownloading> DepartmentDetails = new List<dropdownloading>();
                JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
                try
                {
                    DepartmentDetails = (from dm in contextsdce.department_master
                                         join um in contextsdce.university_master on dm.UniversityID equals um.univ_id
                                         where universityId == um.univ_id
                                         select new dropdownloading
                                         {
                                             Universityid = um.univ_id,
                                             Departmentid = dm.department_id,
                                             DepartmentName = dm.department_name

                                         }).Distinct().ToList();
                    return DepartmentDetails;
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "LoadDepartmentDropdown", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        /// <summary>
        /// SubjectMasterUploadPopup 
        /// </summary>
        /// <param name="selectedUniversity"></param>
        /// <param name="Department"></param>
        /// <param name="Semester"></param>
        /// <param name="Subjectid"></param>
        /// <returns></returns>
        public string SubjectMasterUploadPopup(int selectedUniversity, int Department, int Semester, int Subjectid)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<SubjectUpload> SubjectMasterUploadUnit = new List<SubjectUpload>();
                JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
                try
                {
                    var excelData = (from sm in contextsdce.subject_master
                                     join summ in contextsdce.subject_unit_master on sm.subject_id equals summ.subject_id
                                     join dsm in contextsdce.department_subject_mapping on sm.subject_id equals dsm.subject_id
                                     join dm in contextsdce.department_master on dsm.department_id equals dm.department_id
                                     join um in contextsdce.university_master on dm.UniversityID equals um.univ_id
                                     where um.univ_id == selectedUniversity && dm.department_id == Department
                                     && dsm.semester == Semester && sm.subject_id == Subjectid
                                     orderby summ.unit_name
                                     select new
                                     {
                                         summ.unit_code,
                                         summ.unit_name,
                                         summ.subject_unit_path


                                     }).ToList();

                    SubjectMasterUploadUnit = (from g in excelData
                                               group g by new { g.unit_name } into t

                                               select new SubjectUpload
                                               {

                                                   unitCode = t.FirstOrDefault().unit_code,
                                                   unitName = t.FirstOrDefault().unit_name,
                                                   subjectunitpath = t.FirstOrDefault().subject_unit_path


                                               }).Distinct().ToList();
                    return jsSerializer.Serialize(SubjectMasterUploadUnit);
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "SubjectMasterUploadPopup", ex.Message, "error");

                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        /// SubjectMasterUploadGrid
        /// </summary>
        /// <param name="selectedUniversity"></param>
        /// <param name="Department"></param>
        /// <param name="Semester"></param>
        /// <param name="Subjectid"></param>
        /// <returns></returns>
        public string SubjectMasterUploadGrid(int selectedUniversity, int Department, int Semester, int Subjectid)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<SubjectUpload> SubjectMasterUpload = new List<SubjectUpload>();
                JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
                try
                {
                    var excelData = (from sm in contextsdce.subject_master
                                     join summ in contextsdce.subject_unit_master on sm.subject_id equals summ.subject_id
                                     join dsm in contextsdce.department_subject_mapping on sm.subject_id equals dsm.subject_id
                                     join dm in contextsdce.department_master on dsm.department_id equals dm.department_id
                                     join um in contextsdce.university_master on dm.UniversityID equals um.univ_id
                                     orderby dm.department_name, sm.subject_name
                                     //where um.univ_id == selectedUniversity && dm.department_id == Department && dsm.semester == Semester
                                     select new
                                     {
                                         um.university_name,
                                         dm.department_name,
                                         um.univ_id,
                                         dm.department_id,
                                         sm.subject_id,
                                         dsm.semester,
                                         sm.subject_code,
                                         sm.subject_name,
                                         summ.unit_code,
                                         summ.unit_name,
                                         summ.unit_id

                                     }).ToList();

                    if (selectedUniversity != 0)
                    {
                        var datanew = excelData.ToList();
                        excelData.Clear();
                        excelData.AddRange(datanew.Where(x => x.univ_id == selectedUniversity));
                    }

                    if (Department != 0)
                    {
                        var datanew = excelData.ToList();
                        excelData.Clear();
                        excelData.AddRange(datanew.Where(x => x.department_id == Department));
                    }
                    if (Semester != 0)
                    {
                        var datanew = excelData.ToList();
                        excelData.Clear();
                        excelData.AddRange(datanew.Where(x => x.semester == Semester));
                    }
                    //if (unitid != 0)
                    //{
                    //    var datanew = excelData.ToList();
                    //    excelData.Clear();
                    //    excelData.AddRange(datanew.Where(x => x.unit_id == unitid));
                    //}
                    if (Subjectid != 0)
                    {
                        var datanew = excelData.ToList();
                        excelData.Clear();
                        excelData.AddRange(datanew.Where(x => x.subject_id == Subjectid));
                    }
                    SubjectMasterUpload = (from g in excelData
                                           group g by new { g.subject_code, g.subject_name, g.department_name, g.univ_id, g.semester } into t

                                           select new SubjectUpload
                                           {
                                               universityid = t.FirstOrDefault().univ_id,
                                               departmentid = t.FirstOrDefault().department_id,
                                               unitid = t.FirstOrDefault().unit_id,
                                               Subjectid = t.FirstOrDefault().subject_id,
                                               university = t.FirstOrDefault().university_name,
                                               deptName = t.FirstOrDefault().department_name,
                                               semester = t.FirstOrDefault().semester,
                                               subjectCode = t.FirstOrDefault().subject_code,
                                               subjectName = t.FirstOrDefault().subject_name,
                                               unitCode = t.FirstOrDefault().unit_code,
                                               unitName = t.FirstOrDefault().unit_name,
                                               unitCount = t.Select(s => s.unit_id).Distinct().Count()

                                           }).Distinct().ToList();
                    return jsSerializer.Serialize(SubjectMasterUpload);
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "SubjectMasterUploadGrid", ex.Message, "error");

                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public string BulkInsertExcel(string fileLocation, string fileName, string fileExtension, string univ_ID, string collegeID, string departmentID, string Year, string Sem)
        {

            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    {
                        //Execute stored procedure as a function
                        //contextsdce.Database.SqlQuery<string>("exec ImportExcelWoFile @fileExtension ", fileExtension);

                        //contextsdce.ImportExcel(fileLocation,fileExtension);
                        var pFileLocations = new SqlParameter("@fileLocation", fileLocation);
                        var pFileName = new SqlParameter("@fileName", fileName);
                        var pFileExtensions = new SqlParameter("@fileExtension", fileExtension);
                        var pUniv_ID = new SqlParameter("@univ_ID", univ_ID);
                        var pCollegeID = new SqlParameter("@collegeID", collegeID);
                        var pDepartmentID = new SqlParameter("@departmentID", departmentID);
                        var pYear = new SqlParameter("@Year", Year);
                        var pSem = new SqlParameter("@Sem", Sem);
                        var result = contextsdce.Database.ExecuteSqlCommand("exec ImportExcel @fileLocation,@fileName,@fileExtension,@univ_ID,@collegeID,@departmentID,@Year,@Sem", pFileLocations, pFileName, pFileExtensions, pUniv_ID, pCollegeID, pDepartmentID, pYear, pSem);
                        //var result = contextsdce.Database.ExecuteSqlCommand("exec ImportExcel @fileLocation=N'" + fileLocation + "', @fileName=N'" + fileName + "',@fileExtension=N'" + fileExtension + "',@univ_ID=" + univ_ID + ",@collegeID=" + collegeID + ",@departmentID=" + departmentID + ",@Year=" + Year + ",@Sem=" + Sem + "");
                        return result.ToString();


                    }
                    //return "";
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "BulkInsertExcel", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }
        /// <summary>
        /// To Display OTP using Mobile Number
        /// </summary>
        /// <param name="Mobile"></param>
        /// <returns></returns>
        public string GetOTP(long Mobile)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var data = (from a in contextsdce.user_master
                                join b in contextsdce.user_random_pass on a.user_id equals b.user_id
                                where a.mobile == Mobile
                                select new
                                {
                                    a.mobile,
                                    a.user_name,
                                    b.verification_code


                                }).ToList();
                    StringBuilder st = new StringBuilder();
                    if (data.Any())
                    {
                        foreach (var item in data)
                        {
                            st.Append("Name - <b> " + item.user_name + " </b> & OTP Code Is - <b>  " + item.verification_code + "</b>");
                        }

                        return st.ToString();
                    }
                    else
                    {
                        return "0";
                    }


                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetOTP", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        /// <summary>
        /// Get Feedback Details
        /// </summary>
        /// <returns></returns>
        public FeedbackArchieveViewModel GetArchiveFeedbacks()
        {
            FeedbackArchieveViewModel archive = new FeedbackArchieveViewModel();
            archive = new FeedbackModel().GetFeedBacks();
            return archive;
        }



        public List<Excel_ECommerce> ExportExcel_ECommerce_Report()
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {

                List<userViewCart> CartDetails = new List<userViewCart>();
                {
                    try
                    {

                        List<Excel_ECommerce> ExcelExportData = new List<Excel_ECommerce>();
                        JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
                        try
                        {
                            var UserPurchaseData = (from um in contextsdce.user_master
                                                    join umm in contextsdce.university_master on um.univ_id equals umm.univ_id
                                                    join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                                    join dm in contextsdce.department_master on um.DepartmentID equals dm.department_id
                                                    join ur in contextsdce.user_role on um.role_id equals ur.role_id
                                                    join usm in contextsdce.user_subscribe_master on um.user_id equals usm.user_id
                                                    join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                                    join usdm in contextsdce.user_subscribe_delivery_mode on usm.user_subscribe_delivery_mode_id equals usdm.user_subscribe_delivery_mode_id
                                                    join pm in contextsdce.package_master on usd.package_id equals pm.package_id
                                                    join py in contextsdce.payment_master on usm.user_subscribe_master_id equals py.user_subscribe_master_id
                                                    //join ussm in contextsdce.user_subject_mapping on um.user_id equals ussm.user_id
                                                    //join sm in contextsdce.subject_master on pm.subject_id equals sm.subject_id
                                                    where usm.payment_status == 2 && py.TxnStatus == "2" && um.active_status == 1 //&& ussm.subject_id==pm.subject_id
                                                    && usm.order_status != 2
                                                    group new { usm, um, ur, cm, umm, dm, usdm, pm, py } by new { usm.created_on, usm.payment_ref_no } into purchageuser_grp
                                                    orderby new { purchageuser_grp.Key.created_on, purchageuser_grp.Key.payment_ref_no }

                                                    select new
                                                    {
                                                        OrderNo = purchageuser_grp.Key.payment_ref_no,
                                                        Package = purchageuser_grp.OrderBy(x => x.pm.package_name)
                                                    });
                            Excel_ECommerce excel;
                            int packitems = 0;
                            foreach (var output in UserPurchaseData)
                            {
                                excel = new Excel_ECommerce();
                                excel.OrderNo = output.OrderNo;
                                int itemcnt = 0;
                                List<string> PackageList = new List<string>();
                                string PackageNames = "";
                                foreach (var res in output.Package)
                                {

                                    excel.OrderDate = res.usm.created_on.Date.ToString("dd-MMM-yyyy");
                                    //excel.LicenseDate = res.usm.ex.Date.ToString("dd-MM-yyyy");
                                    excel.OrderNo = res.usm.payment_ref_no;
                                    excel.UserName = res.um.user_name;
                                    excel.Mobile = res.um.mobile;
                                    excel.UserRole = res.ur.role_name;
                                    excel.CollegeName = res.cm.college_name;
                                    excel.University = res.umm.university_name;
                                    excel.Department = res.dm.department_name;
                                    excel.StudentYearSem = res.um.currentyear.ToString() + "_" + res.um.currentsemester.ToString();
                                    excel.OrderedThrough = (res.usm.TransactionType == 2) ? "Online" : "Cash On Delivery";
                                    excel.DeliveryMode = res.usdm.description;
                                    excel.TxnAmount = res.py.TxnAmount.ToString();
                                    excel.PaymentStatus = res.py.TxnStatus == "2" ? "Success" : "Failure";
                                    excel.PaymentDate = res.py.TxnDateTime.ToString("dd/MMM/yyyy");
                                    excel.Quantity = res.usm.count.ToString();
                                    PackageList.Add(res.pm.package_name);
                                    if (!PackageNames.Contains(res.pm.package_name))
                                    {
                                        PackageNames += res.pm.package_name + ",";
                                    }
                                    itemcnt++;


                                }
                                //  excel.PackageName = PackageList;
                                excel.PackageNames = PackageNames.Substring(0, PackageNames.Length - 1);
                                packitems++;
                                ExcelExportData.Add(excel);
                            }

                            //var groupedUsers = ExcelExportData.GroupBy(user => user.OrderNo);
                            //string strPackage = "";
                            //foreach (var group in groupedUsers)
                            //{
                            //    Console.WriteLine("{0}: ", group.Key);
                            //    foreach (var entry in group)
                            //    {
                            //        strPackage += entry.PackageName + ",";
                            //    }
                            //}
                            return ExcelExportData;
                        }

                        catch (Exception ex)
                        {
                            Log.WriteLogMessage(PageName, "AdminService", "LoadDepartmentDropdown", ex.Message, "error");

                            throw;
                        }
                        finally
                        {
                            contextsdce.Dispose();
                        }

                    }
                    catch (Exception ex)
                    {
                        Log.WriteLogMessage(PageName, "AdminService", "LoadDepartmentDropdown", ex.Message, "error");

                        throw;
                    }
                    finally
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }
        //public string UsageActviatonCancelOrder(int? usersubscribemasterid, long buyer_mobileNo, string ToEmailID, string OrderID)
        //{
        //    using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
        //    {
        //        try
        //        {
        //            DateTime currentdate = DateTime.Now.AddDays(-7);
        //            int result = 0;

        //            var CheckusageStatuscancelorders = (from usm in contextsdce.user_subscribe_master
        //                                                join pam in contextsdce.purchase_activationmaster on usm.user_subscribe_master_id equals pam.user_subscribed_masterid
        //                                                where usm.user_subscribe_master_id == usersubscribemasterid
        //                                                select new { usm.payment_on, pam.activationstatus, usm.payment_ref_no }).FirstOrDefault();

        //            if (CheckusageStatuscancelorders != null)
        //            {
        //                if (CheckusageStatuscancelorders.activationstatus == 0 && CheckusageStatuscancelorders.payment_on < currentdate)
        //                {
        //                    // cancelorders.FirstOrDefault().usm..ForEach(a => a.delivery_modeid = DeliveryModeId);
        //                    UpdateStatuscancelorders.ForEach(x => x.usm.order_status = 2);
        //                    UpdateStatuscancelorders.ForEach(x => x.uot.orderstatus = 2);
        //                    UpdateStatuscancelorders.ForEach(x => x.usd.deliver_status = 2);
        //                    //foreach (var item in cancelorders)
        //                    //{
        //                    //item.usm.order_status = 2;
        //                    //item.uot.orderstatus = 2;
        //                    //item.usd.deliver_status = 2;
        //                    //}
        //                    result = contextsdce.SaveChanges();
        //                    int data = 0;
        //                    if (result > 0)
        //                    {
        //                        //        {
        //                        //            StudentService obj = new StudentService();
        //                        //            obj.COD_Cancellation(buyer_mobileNo, ToEmailID, OrderID);

        //                        //            return "1";

        //                        //        }
        //                        //else
        //                        //{
        //                        //            return "-1";
        //                        //        }
        //                        //    }
        //                        //    else
        //                        //    {
        //                        //        return "0";
        //                        //    }
        //                        data = usersubscribemasterid;
        //                    }
        //                }
        //                else
        //                {
        //                    data = 0;
        //                    //  data = "Order Not Cancelled:There is no Item To Cancel ";
        //                }
        //                return data;
        //            }
        //            else
        //            {
        //                return 0;
        //            }
        //        }
        //        catch (Exception ex)
        //        {
        //            contextsdce.Dispose();
        //            Log.WriteLogMessage(PageName, "PaymentService", "CancelOrder", ex.Message, "error");
        //            throw;
        //        }
        //        finally
        //        {
        //            contextsdce.Dispose();
        //        }
        //    }
        //}

        /// <summary>
        /// Show Date Wise User Registration Report 
        /// </summary>
        /// <param name="universityId"></param>
        /// <returns></returns>
        //public List<datewisereport> GetDateWise_user_Registration_report()
        //{
        //    using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
        //    {
        //        List<datewisereport> DepartmentDetails = new List<datewisereport>();
        //        JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
        //        try
        //        {
        //            // DateTime CreatedOn = DateTime.ParseExact(um.created_on.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
        //            var userData = (from um in contextsdce.user_master
        //                            join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id into lftusm
        //                            from usm in lftusm.DefaultIfEmpty()
        //                            group new { um, usm } by um.created_on into s
        //                            select new
        //                            {
        //                                PDate = s.FirstOrDefault().um.created_on,
        //                                Registration = s.Select(x => x.um.user_id).Distinct().Count(),
        //                                Issues = s.Where(x=>x.um.active_status==0).Select(x => x.um.user_id).Count(),
        //                                SubjectDownloadUser = s.Select(x => x.usm.user_id).Distinct().Count(),
        //                                DownloadSubjects = s.Select(x => x.usm.subject_id).Count()
        //                            }).Distinct().ToList();
        //            var getdate = (from c in userData
        //                                 select new datewisereport
        //                                 {
        //                                     PDate = c.PDate.ToString("dd-mm-yyyy"),
        //                                     Registration = c.Registration,
        //                                     Issues = c.Issues,
        //                                     SubjectDownloadUser =c.SubjectDownloadUser,
        //                                     DownloadSubjects = c.DownloadSubjects
        //                                 }).Distinct().ToList();
        //            DepartmentDetails = (from t in getdate
        //                                 select new datewisereport
        //                                 {
        //                                     PDate = t.PDate,
        //                                     Registration = t.Registration,
        //                                     Issues = t.Issues,
        //                                     SubjectDownloadUser = t.SubjectDownloadUser,
        //                                     DownloadSubjects = t.DownloadSubjects
        //                                 }).Distinct().ToList();
        //            return DepartmentDetails;
        //        }
        //         catch (Exception ex)
        //        {
        //            Log.WriteLogMessage(PageName, "AdminService", "GetDateWise_user_Registration_report", ex.Message, "error");

        //            throw;
        //        }
        //        finally
        //        {
        //            contextsdce.Dispose();
        //        }
        //    }

        //}

        //public JQGrid LoadDateWise_user_Registration_report(JqSearchIn si)
        //{
        //    List<datewisereport> objSourceDataListToDeSerialize = new List<datewisereport>();
        //    try
        //    {
        //        si = si.InitialiseObject(si);

        //        objSourceDataListToDeSerialize = GetDateWise_user_Registration_report();

        //        if (!string.IsNullOrEmpty(si.whereString))
        //        {
        //            objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().Where(si.whereString).OrderBy(si.ShortingQuery).ToList();

        //        }
        //        else
        //        {
        //            objSourceDataListToDeSerialize = objSourceDataListToDeSerialize.AsQueryable().OrderBy(si.ShortingQuery).ToList();
        //        }

        //    }

        //    catch (Exception ex)
        //    {
        //        throw ex;
        //    }

        //    var Data = si.SetObjectListDataInitialise(objSourceDataListToDeSerialize, si);

        //    var GridData = new JQGrid
        //    {
        //        total = si.totalPages,
        //        page = si.page,
        //        records = si.TotalRecCount,
        //        rows = (
        //         from client in Data
        //         select new
        //         {
        //             i = client.PDate,
        //             cell = new string[] {
        //                 client.PDate,
        //                client.Registration+"",
        //                 client.Issues+"",
        //                //client.OrderPlacedOndatetime==null ? "": client.OrderPlacedOndatetime.ToString("dd-MM-yyyy HH:mm:ss"),
        //                 client.SubjectDownloadUser+"",
        //                 client.DownloadSubjects+""
        //             }
        //         }).ToArray()
        //    };
        //    return GridData;

        //}


        /// <summary>
        /// Load Specific Selected Period DateWise user Registration report  
        /// </summary>
        /// <param name="start_date"></param>
        /// <param name="End_date"></param>
        /// <returns></returns>
        public List<datewisereport> GetDateWise_user_Registration_report(string start_date, string End_date)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<datewisereport> userData = new List<datewisereport>();
                List<datewisereport> usersubjectmapping = new List<datewisereport>();
                List<datewisereport> result = new List<datewisereport>();

                try
                {
                    DateTime CreatedOn_start_date = DateTime.ParseExact(start_date.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    DateTime CreatedOn_End_date = DateTime.ParseExact(End_date.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    int Startday = CreatedOn_start_date.Day;
                    int Startmonth = CreatedOn_start_date.Month;
                    int Startyear = CreatedOn_start_date.Year;

                    int Endday = CreatedOn_End_date.Day;
                    int Endmonth = CreatedOn_End_date.Month;
                    int Endyear = CreatedOn_End_date.Year;
                    userData = (from um in contextsdce.user_master
                                where um.created_on >= CreatedOn_start_date && um.created_on <= CreatedOn_End_date
                                group new { um } by EntityFunctions.TruncateTime(um.created_on) into g
                                select new datewisereport
                                {
                                    createdon = g.Key.Value,
                                    Issues = g.Where(x => x.um.active_status == 0).Count(),
                                    Registration = g.Select(x => x.um.user_id).Distinct().Count(),
                                    SubjectDownloadUser = 0,
                                    DownloadSubjects = 0
                                }).ToList();

                    usersubjectmapping = (from um in contextsdce.user_master
                                          join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                          where usm.is_purchased == 1 && um.created_on >= CreatedOn_start_date && um.created_on <= CreatedOn_End_date
                                          group new { um, usm } by new { um.user_id, usm.subject_id, x = EntityFunctions.TruncateTime(um.created_on) } into s
                                          select new datewisereport
                                          {
                                              createdon = s.Key.x.Value,
                                              Issues = 0,
                                              Registration = 0,
                                              SubjectDownloadUser = s.Select(x => x.usm.user_id).Distinct().Count(),
                                              DownloadSubjects = s.Distinct().Count()
                                          }).ToList();

                    result = (from g in userData
                              join t in usersubjectmapping on g.createdon equals t.createdon
                              where g.createdon >= CreatedOn_start_date && g.createdon <= CreatedOn_End_date
                              group new { g, t } by g.createdon into k

                              select new datewisereport
                              {
                                  PDate = k.Key.GetValueOrDefault().ToString("dd-MM-yyyy"),
                                  Issues = k.Select(x => x.g.Issues).Distinct().Sum(),
                                  Registration = k.Select(x => x.g.Registration).Distinct().Sum(),
                                  SubjectDownloadUser = k.Select(x => x.t.SubjectDownloadUser).Sum(),
                                  DownloadSubjects = k.Select(x => x.t.DownloadSubjects).Sum()
                              }).OrderByDescending(x => x.PDate).Distinct().ToList();

                    return result;

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetDateWise_user_Registration_report", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        /// <summary>
        /// Load Last Month DateWise user Registration report Initial Grid
        /// </summary>
        /// <param name="start_date"></param>
        /// <param name="End_date"></param>
        /// <returns></returns>
        //public List<datewisereport> DateWise_user_Registration_report_InitialGrid()
        //{
        //    using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
        //    {
        //        //this.contextsdce.Database.CommandTimeout = 180;

        //        List<datewisereport> userData = new List<datewisereport>();
        //        List<datewisereport> usersubjectmapping = new List<datewisereport>();
        //        List<datewisereport> result = new List<datewisereport>();

        //        try
        //        {
        //            var LastMonthDate = DateTime.Today.AddMonths(-1);
        //            int day = LastMonthDate.Day;
        //            int month = LastMonthDate.Month;
        //            int year = LastMonthDate.Year;

        //            //   DateTime CreatedOn_start_date = DateTime.ParseExact(LastMonthDate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

        //            userData = (from um in contextsdce.user_master
        //                            // where um.created_on.Day > day && um.created_on.Month> month && um.created_on.Year > year
        //                            //where um.created_on > LastMonthDate
        //                        where SqlFunctions.DatePart("Day", um.created_on) >= day && SqlFunctions.DatePart("MONTH", um.created_on) >= month && SqlFunctions.DatePart("YEAR", um.created_on) >= year
        //                        group new { um } by EntityFunctions.TruncateTime(um.created_on) into g
        //                        select new datewisereport
        //                        {
        //                            createdon = g.Key.Value,
        //                            Issues = g.Where(x => x.um.active_status == 0).Count(),
        //                            Registration = g.Select(x => x.um.user_id).Distinct().Count(),
        //                            SubjectDownloadUser = 0,
        //                            DownloadSubjects = 0,
        //                            UserID = g.FirstOrDefault().um.user_id,
        //                            UnivId = g.FirstOrDefault().um.univ_id
        //                        }).ToList();



        //            usersubjectmapping = (from um in contextsdce.user_master
        //                                  join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
        //                                  // where um.created_on.Day > day && um.created_on.Month > month && um.created_on.Year > year
        //                                    where  usm.is_purchased==1 &&  SqlFunctions.DatePart("Day", um.created_on) >= day && SqlFunctions.DatePart("MONTH", um.created_on) >= month && SqlFunctions.DatePart("YEAR", um.created_on) >= year
        //                                  orderby um.created_on descending
        //                                  group new { um, usm } by EntityFunctions.TruncateTime(um.created_on) into s
        //                                  select new datewisereport
        //                                  {
        //                                      createdon = s.Key.Value,
        //                                      Issues = 0,
        //                                      Registration = 0,
        //                                      SubjectDownloadUser = s.Select(x => x.usm.user_id).Distinct().Count(),
        //                                      // DownloadSubjects = s.GroupBy(y => new { y.usm.user_id, y.usm.subject_id }).Count(),
        //                                  }).ToList();

        //            result = (from g in userData
        //                      join t in usersubjectmapping on g.createdon equals t.createdon
        //                      // where g.createdon.Day> day && g.createdon.Month> month && g.createdon.Year > year
        //                    // where g.created_on > LastMonthDate
        //                      where SqlFunctions.DatePart("Day", g.createdon) >= day && SqlFunctions.DatePart("MONTH", g.createdon) >= month && SqlFunctions.DatePart("YEAR", g.createdon) >= year
        //                      //group new { g, t } by g.createdon into k

        //            select new datewisereport
        //            {
        //                createdon = g.createdon,
        //                Issues = g.Issues,
        //                Registration =g.Registration,
        //                SubjectDownloadUser = g.SubjectDownloadUser,
        //                DownloadSubjects = t.DownloadSubjects
        //            }).OrderByDescending(x => x.createdon).ToList();
        //            return result;

        //        }
        //        catch (Exception ex)
        //        {
        //            Log.WriteLogMessage(PageName, "AdminService", "DateWise_user_Registration_report_InitialGrid", ex.Message, "error");

        //            throw;
        //        }
        //        finally
        //        {
        //            contextsdce.Dispose();
        //        }
        //    }

        //}

        public List<datewisereport_Issues> DateWise_user_Registration_report_Issues_popup(string PDate)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<datewisereport_Issues> userIssues = new List<datewisereport_Issues>();
                try
                {
                    DateTime CreatedOn_date = DateTime.ParseExact(PDate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                    var Userdata = (from um in contextsdce.user_master
                                    join ur in contextsdce.user_role on um.role_id equals ur.role_id
                                    where System.Data.Entity.DbFunctions.TruncateTime(um.created_on) == CreatedOn_date
                                    && um.active_status == 0
                                    orderby um.user_name ascending
                                    select new
                                    {
                                        createdon = um.created_on,
                                        UserName = um.user_name,
                                        Mobile = um.mobile,
                                        Emailid = um.email_id,
                                        College = um.collegename == null ? "--" : um.collegename,
                                        Department = um.department_name == null ? "--" : um.department_name,
                                        RoleType = ur.role_name
                                    }).ToList();

                    userIssues = (from t in Userdata
                                  select new datewisereport_Issues
                                  {
                                      createdon = t.createdon.ToString("dd-MM-yyyy"),
                                      UserName = t.UserName,
                                      Mobile = t.Mobile,
                                      Emailid = t.Emailid,
                                      College = t.College,
                                      Department = t.Department,
                                      RoleType = t.RoleType
                                  }).OrderBy(x => x.UserName).Distinct().ToList();


                    return userIssues;

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "DateWise_user_Registration_report_Issues_popup", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        public List<datewisereport> University_user_Registration_report_InitialGrid()
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<datewisereport> userData = new List<datewisereport>();
                List<datewisereport> usersubjectmapping = new List<datewisereport>();
                List<datewisereport> result = new List<datewisereport>();


                try
                {

                    userData = (from um in contextsdce.user_master
                                join univ in contextsdce.university_master on um.univ_id equals univ.univ_id

                                group new { um, univ } by new { um.univ_id, univ.university_name } into g
                                select new datewisereport
                                {
                                    // createdon = g.Key.Value,
                                    UnivId = g.Key.univ_id,
                                    universityName = g.Key.university_name,
                                    Issues = g.Where(x => x.um.active_status == 0).Select(x => x.um.user_id).Count(),
                                    Registration = g.Select(x => x.um.user_id).Count(),
                                }).ToList();



                    usersubjectmapping = (from usm in contextsdce.user_subject_mapping
                                          join um in contextsdce.user_master on usm.user_id equals um.user_id
                                          join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                          where usm.is_purchased == 1

                                          group new { um, usm, univ } by um.univ_id into s
                                          select new datewisereport
                                          {
                                              // createdon = s.Key.Value,
                                              UnivId = s.Key,
                                              SubjectDownloadUser = s.Select(x => x.usm.user_id).Distinct().Count(),
                                              DownloadSubjects = s.GroupBy(x => new { x.usm.user_id, x.usm.subject_id }).Count()
                                          }).ToList();

                    result = (from g in userData
                              join t in usersubjectmapping on g.UnivId equals t.UnivId
                              //   group new { g,t } by g.UnivId into s

                              select new datewisereport
                              {
                                  //  PDate = g.createdon.ToString("dd-MM-yyyy"),
                                  UnivId = g.UnivId,
                                  universityName = g.universityName,
                                  Issues = g.Issues,
                                  Registration = g.Registration,
                                  SubjectDownloadUser = t.SubjectDownloadUser,
                                  DownloadSubjects = t.DownloadSubjects
                              }).OrderBy(x => x.universityName).ToList();

                    return result;

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "University_user_Registration_report_InitialGrid", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }


        public List<datewisereport> University_Datewise_user_Registration_report_InitialGrid(int UnivId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<datewisereport> userData = new List<datewisereport>();
                List<datewisereport> usersubjectmapping = new List<datewisereport>();
                List<datewisereport> result = new List<datewisereport>();

                JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
                datewisereport obj = new datewisereport();
                try
                {

                    var LastMonthDate = DateTime.Today.AddMonths(-1);
                    int day = LastMonthDate.Day;
                    int month = LastMonthDate.Month;
                    int year = LastMonthDate.Year;

                    //   DateTime CreatedOn_start_date = DateTime.ParseExact(LastMonthDate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                    userData = (from um in contextsdce.user_master
                                where um.created_on > LastMonthDate && um.univ_id == UnivId
                                select new datewisereport
                                {
                                    createdon = System.Data.Entity.DbFunctions.TruncateTime(um.created_on),
                                    Issues = um.active_status,
                                    UserID = um.user_id,
                                    UnivId = um.univ_id

                                }).ToList();


                    usersubjectmapping = (from um in contextsdce.user_master
                                          join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                          where usm.is_purchased == 1 && um.created_on > LastMonthDate && um.univ_id == UnivId
                                          // && SqlFunctions.DatePart("Day", um.created_on) >= day && SqlFunctions.DatePart("MONTH", um.created_on) >= month && SqlFunctions.DatePart("YEAR", um.created_on) >= year
                                          // group new { um, usm } by EntityFunctions.TruncateTime(um.created_on) into s
                                          select new datewisereport
                                          {
                                              createdon = System.Data.Entity.DbFunctions.TruncateTime(um.created_on),
                                              userid = usm.user_id,
                                              Subjectid = usm.subject_id,
                                              UnivId = um.univ_id
                                          }).ToList();

                    result = (from g in userData
                              join t in usersubjectmapping on g.createdon equals t.createdon
                              //into lftt
                              // from t in lftt.DefaultIfEmpty()
                              where g.createdon > LastMonthDate && g.UnivId == UnivId && g.UnivId == t.UnivId
                              //&& g.UnivId == t.UnivId
                              group new { g, t } by g.createdon into k
                              // group new { g, t } by new { g.createdon,a=t.createdon==null?null:t.createdon}  into k
                              select new datewisereport
                              {
                                  UnivId = k.FirstOrDefault().g.UnivId,
                                  PDate = k.Key.GetValueOrDefault().ToString("dd-MM-yyyy"),
                                  Issues = k.Where(x => x.g.Issues == 0).Select(x => x.g.UserID).Distinct().Count(),
                                  Registration = k.Select(x => x.g.UserID).Distinct().Count(),
                                  SubjectDownloadUser = k.Select(x => x.t.userid).Distinct().Count(),
                                  DownloadSubjects = k.GroupBy(x => new { x.t.userid, x.t.Subjectid }).Count()
                              }).OrderByDescending(x => x.PDate).ToList();
                    return result;
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "University_Datewise_user_Registration_report_InitialGrid", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        public List<datewisereport> University_SemWise_user_Registration_report_Excel(string start_date, string End_date)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {

                List<datewisereport> userData = new List<datewisereport>();
                List<datewisereport> usersubjectmapping = new List<datewisereport>();
                List<datewisereport> result = new List<datewisereport>();

                try
                {
                    DateTime CreatedOn_start_date = DateTime.ParseExact(start_date + " " + "00:00:00 AM", "dd-MM-yyyy hh:mm:ss tt", System.Globalization.CultureInfo.InvariantCulture);
                    DateTime CreatedOn_End_date = DateTime.ParseExact(End_date + " " + "11:59:59 PM", "dd-MM-yyyy hh:mm:ss tt", System.Globalization.CultureInfo.InvariantCulture);


                    //DateTime CreatedOn_start_date = DateTime.Parse(start_date.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    //DateTime CreatedOn_End_date = DateTime.ParseExact(End_date.Trim(), "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);
                    int Startday = CreatedOn_start_date.Day;
                    int Startmonth = CreatedOn_start_date.Month;
                    int Startyear = CreatedOn_start_date.Year;

                    int Endday = CreatedOn_End_date.Day;
                    int Endmonth = CreatedOn_End_date.Month;
                    int Endyear = CreatedOn_End_date.Year;


                    userData = (from um in contextsdce.user_master
                                join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                //into lftuniv
                                //from u in lftuniv.DefaultIfEmpty()
                                where um.created_on >= CreatedOn_start_date && um.created_on <= CreatedOn_End_date
                                select new datewisereport
                                {
                                    UnivId = um.univ_id,
                                    universityName = univ.university_name,
                                    activestatus = um.active_status,
                                    UserID = um.user_id,
                                    Semester = um.currentsemester,
                                    createdon = um.created_on
                                }).ToList();



                    usersubjectmapping = (from um in contextsdce.user_master
                                          join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                          //into lftt
                                          //from t in lftt.DefaultIfEmpty()
                                          join univ in contextsdce.university_master on um.univ_id equals univ.univ_id
                                          //where usm.is_purchased == 1
                                          //&& ((SqlFunctions.DatePart("DAY", um.created_on) >= Startday && SqlFunctions.DatePart("Month", um.created_on) >= Startmonth && SqlFunctions.DatePart("Year", um.created_on) >= Startyear)
                                          //  && (SqlFunctions.DatePart("DAY", um.created_on) <= Endday && SqlFunctions.DatePart("Month", um.created_on) <= Endmonth && SqlFunctions.DatePart("Year", um.created_on) <= Endyear))
                                          where usm.is_purchased == 1 && um.created_on >= CreatedOn_start_date && um.created_on <= CreatedOn_End_date
                                          // group new { um, usm, univ } by new { um.univ_id, um.currentsemester } into s
                                          select new datewisereport
                                          {
                                              UnivId = um.univ_id,
                                              universityName = univ.university_name,
                                              Semester = um.currentsemester,
                                              userid = usm.user_id,
                                              Subjectid = usm.subject_id,
                                              ispurchased = usm.is_purchased
                                          }).ToList();

                    result = (from g in userData
                              join tr in usersubjectmapping on g.UnivId equals tr.UnivId
                              //into lftt
                              //from tr in lftt.DefaultIfEmpty()
                              where g.createdon >= CreatedOn_start_date && g.createdon <= CreatedOn_End_date && g.Semester == tr.Semester
                              //   && tr.ispurchased==1
                              group new { g, tr } by new { g.UnivId, g.universityName, g.Semester } into p
                              //group p by p.ProductSKU == null ? "<null>" : p.ProductSKU.Substring(0, 4);
                              //  ,x = t.userid.ToString() == null ? "<null>" : t.userid.ToString()
                              select new datewisereport
                              {
                                  universityName = p.Key.universityName,
                                  Semester = p.Key.Semester,
                                  Registration = p.Select(x => x.g.UserID).Distinct().Count(),
                                  Issues = p.Where(x => x.g.activestatus == 0).Select(x => x.g.UserID).Distinct().Count(),
                                  SubjectDownloadUser = p.Select(x => x.tr.userid).Distinct().Count(),
                                  DownloadSubjects = p.GroupBy(x => new { x.tr.userid, x.tr.Subjectid }).Count(),
                                  PDate = start_date + "to" + End_date
                              }).OrderBy(x => x.universityName).ToList();

                    return result;

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "University_SemWise_user_Registration_report_Excel", ex.Message, "error");
                    Log.WriteLogMessage(PageName, "AdminService", "University_SemWise_user_Registration_report_Excel", ex.InnerException.Message, "error");
                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        public List<datewisereport> DateWise_user_Registration_report_InitialGrid()
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {

                List<datewisereport> userData = new List<datewisereport>();
                List<datewisereport> usersubjectmapping = new List<datewisereport>();
                List<datewisereport> result = new List<datewisereport>();

                try
                {
                    var LastMonthDate = DateTime.Today.AddMonths(-1);
                    int day = LastMonthDate.Day;
                    int month = LastMonthDate.Month;
                    int year = LastMonthDate.Year;

                    //   DateTime CreatedOn_start_date = DateTime.ParseExact(LastMonthDate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                    userData = (from um in contextsdce.user_master
                                where um.created_on > LastMonthDate
                                select new datewisereport
                                {
                                    createdon = System.Data.Entity.DbFunctions.TruncateTime(um.created_on),
                                    Issues = um.active_status,
                                    UserID = um.user_id

                                }).Distinct().ToList();



                    usersubjectmapping = (from um in contextsdce.user_master
                                          join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                          where usm.is_purchased == 1 && um.created_on > LastMonthDate
                                          // && SqlFunctions.DatePart("Day", um.created_on) >= day && SqlFunctions.DatePart("MONTH", um.created_on) >= month && SqlFunctions.DatePart("YEAR", um.created_on) >= year
                                          // group new { um, usm } by EntityFunctions.TruncateTime(um.created_on) into s
                                          select new datewisereport
                                          {
                                              createdon = System.Data.Entity.DbFunctions.TruncateTime(um.created_on),
                                              userid = usm.user_id,
                                              Subjectid = usm.subject_id
                                          }).Distinct().ToList();

                    result = (from g in userData
                              join t in usersubjectmapping on g.createdon equals t.createdon
                              where g.createdon > LastMonthDate
                              group new { g, t } by g.createdon into k
                              select new datewisereport
                              {
                                  PDate = k.Key.GetValueOrDefault().ToString("dd-MM-yyyy"),
                                  Issues = k.Where(x => x.g.Issues == 0).Select(x => x.g.UserID).Distinct().Count(),
                                  Registration = k.Select(x => x.g.UserID).Distinct().Count(),
                                  SubjectDownloadUser = k.Select(x => x.t.userid).Distinct().Count(),
                                  DownloadSubjects = k.GroupBy(x => new { x.t.userid, x.t.Subjectid }).Count()
                              }).OrderByDescending(x => x.PDate).ToList();

                    return result;

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "DateWise_user_Registration_report_InitialGrid", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }
        /// <summary>
        /// Univ_DateWise_user_Registration_report_Issues_popup
        /// </summary>
        /// <param name="PDate"></param>
        /// <param name="UnivId"></param>
        /// <returns></returns>
        public List<datewisereport_Issues> Univ_DateWise_user_Registration_report_Issues_popup(string PDate, int UnivId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<datewisereport_Issues> userIssues = new List<datewisereport_Issues>();
                try
                {
                    DateTime CreatedOn_date = DateTime.ParseExact(PDate, "dd-MM-yyyy", System.Globalization.CultureInfo.InvariantCulture);

                    var Userdata = (from um in contextsdce.user_master
                                    join ur in contextsdce.user_role on um.role_id equals ur.role_id
                                    where System.Data.Entity.DbFunctions.TruncateTime(um.created_on) == CreatedOn_date
                                    && um.active_status == 0 && um.univ_id == UnivId
                                    orderby um.user_name ascending
                                    select new
                                    {
                                        universityid = um.univ_id,
                                        createdon = um.created_on,
                                        UserName = um.user_name,
                                        Mobile = um.mobile,
                                        Emailid = um.email_id,
                                        College = um.collegename == null ? "--" : um.collegename,
                                        Department = um.department_name == null ? "--" : um.department_name,
                                        RoleType = ur.role_name
                                    }).ToList();

                    userIssues = (from t in Userdata
                                  select new datewisereport_Issues
                                  {
                                      universityid = t.universityid,
                                      createdon = t.createdon.ToString("dd-MM-yyyy"),
                                      UserName = t.UserName,
                                      Mobile = t.Mobile,
                                      Emailid = t.Emailid,
                                      College = t.College,
                                      Department = t.Department,
                                      RoleType = t.RoleType
                                  }).OrderBy(x => x.UserName).Distinct().ToList();


                    return userIssues;

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "DateWise_user_Registration_report_Issues_popup", ex.Message, "error");

                    throw;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        /// <summary>
        /// UniversityReadHistoryexportwithfilter
        /// </summary>
        /// <param name="univId"></param>
        /// <param name="college_id"></param>
        /// <param name="semester"></param>
        /// <param name="year"></param>
        /// <param name="reg_startdate"></param>
        /// <param name="reg_end_date"></param>
        /// <param name="usg_start_date"></param>
        /// <param name="usg_end_date"></param>
        /// <returns></returns>
        public List<UserReadHistoryModel> UniversityReadHistoryexportwithfilter(int univId, string college_id, string semester, string year, string reg_startdate, string reg_end_date, string usg_start_date, string usg_end_date)
        {
            List<UserReadHistoryModel> readHistory = new List<UserReadHistoryModel>();

            string[] ddlyear = new string[50];
            List<int> selyear = new List<int>();
            ddlyear = year.Split('-').ToArray();
            if (ddlyear[0].ToString() != "0")
            {
                for (int j = 0; j < ddlyear.Length; j++)
                {
                    selyear.Add(Convert.ToInt16(ddlyear[j].ToString()));
                }

            }

            string[] ddlCollege = new string[100];
            List<int> collge = new List<int>();
            ddlCollege = college_id.Split('-').ToArray();
            if (ddlCollege[0].ToString() != "0")
            {
                for (int i = 0; i < ddlCollege.Length; i++)
                {
                    collge.Add(Convert.ToInt32(ddlCollege[i].ToString()));
                }
            }

            string[] ddlSemester = new string[50];
            List<int> sems = new List<int>();
            ddlSemester = semester.Split('-').ToArray();
            if (ddlSemester[0].ToString() != "0")
            {
                for (int k = 0; k < ddlSemester.Length; k++)
                {
                    sems.Add(Convert.ToInt16(ddlSemester[k].ToString()));
                }
            }
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var regCount = (from sm in contextsdce.subject_master
                                    join usrh in contextsdce.user_subject_read_history on sm.subject_id equals usrh.subject_id
                                    join um in contextsdce.user_master on usrh.user_id equals um.user_id
                                    //   join usm in contextsdce.user_subject_mapping on um.user_id equals usm.user_id
                                    //     join pm in contextsdce.package_master on  um.DepartmentID equals pm.department_id 
                                    join dpsm in contextsdce.department_subject_mapping on um.DepartmentID equals dpsm.department_id
                                    join unvm in contextsdce.university_master on um.univ_id equals unvm.univ_id
                                    join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                    where um.univ_id == cm.university_id && sm.UniversityID == dpsm.university_id
                                    //   && usm.subject_id == sm.subject_id && usm.department_id == pm.department_id    && pm.is_bundle == 0 
                                    && sm.subject_id == dpsm.subject_id
                                   && um.active_status == 1 && cm.active_status == 1
                                    && um.univ_id == univId
                                    orderby usrh.total_hours descending
                                    select new
                                    {
                                        userReadHistryId = usrh.user_read_history_id,
                                        username = um.user_name,
                                        mobile = um.mobile,
                                        email = um.email_id,
                                        userid = um.user_id,
                                        collegename = cm.college_name,
                                        collegeid = um.collegeid,
                                        subjectcount = sm.subject_id,
                                        totalhours = usrh.total_hours,
                                        lastreadon = usrh.last_read_on,
                                        userrole = um.role_id == 1 ? "Student" : "Staff",
                                        dpsm.map_year,
                                        dpsm.semester,
                                        um.currentyear,
                                        um.currentsemester,
                                        um.created_on,
                                        usrh.last_read_on,
                                        univ_Id = um.univ_id,
                                        univ_name = unvm.university_name
                                    }).ToList();
                    //if (univId != 0)
                    //{
                    //    var datanew = regCount.ToList();
                    //    regCount.Clear();
                    //    regCount.AddRange(datanew.Where(x => x.univ_Id == univId));
                    //}
                    if (selyear.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        //regCount.AddRange(datanew.Where(x => selyear.Contains(x.currentyear)));
                    }

                    if (sems.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => sems.Contains(x.semester)));
                    }
                    if (collge.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => collge.Contains(x.collegeid ?? 0)));

                    }
                    if (reg_startdate != "0")
                    {
                        string Reg_stdate = reg_startdate + " " + "00:00:00 AM";
                        DateTime start_date = DateTime.ParseExact(Reg_stdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on >= start_date));
                    }
                    if (usg_start_date != "0")
                    {
                        string usg_startdate = usg_start_date + " " + "00:00:00 AM";
                        DateTime usgStart_date = DateTime.ParseExact(usg_startdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on >= usgStart_date));
                    }

                    if (reg_end_date != "0")
                    {
                        string Reg_edate = reg_end_date + " " + "11:59:00 PM";
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime End_date = DateTime.ParseExact(Reg_edate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on <= End_date));
                    }
                    if (usg_end_date != "0")
                    {
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime usgEnd_date = DateTime.ParseExact(usg_End_date, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on <= usgEnd_date));
                    }

                    readHistory = (from g in regCount
                                   group g by g.userid into t
                                   select new UserReadHistoryModel
                                   {
                                       userName = t.FirstOrDefault().username,
                                       userId = t.FirstOrDefault().userid,
                                       univName = t.FirstOrDefault().univ_name,
                                       collegeName = t.FirstOrDefault().collegename,
                                       collegeId = t.FirstOrDefault().collegeid,
                                       YearMonth = t.FirstOrDefault().currentyear + "-" + t.FirstOrDefault().currentsemester,
                                       Email = t.FirstOrDefault().email,
                                       subjectCount = t.Select(x => x.subjectcount).Distinct().Count(),
                                       totalSeconds = t.Sum(x => x.totalhours),
                                       Mobile = t.FirstOrDefault().mobile,
                                       totalhrs = string.Format("{0:00}:{1:00}:{2:00}", t.Sum(x => x.totalhours) / 3600, (t.Sum(x => x.totalhours) / 60) % 60, t.Sum(x => x.totalhours) % 60),
                                       lastReadDate = t.Max(x => x.lastreadon).Date,
                                       userRole = t.FirstOrDefault().userrole,
                                       userCount = t.Count(),
                                   }).OrderByDescending(t => t.totalSeconds).ToList();

                    return readHistory;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminReportservice", "UniversityReadHistoryexportwithfilter", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        /// UniversityReadHistoryExportAndroidApp
        /// </summary>
        /// <param name="univId"></param>
        /// <param name="college_id"></param>
        /// <param name="semester"></param>
        /// <param name="year"></param>
        /// <param name="reg_startdate"></param>
        /// <param name="reg_end_date"></param>
        /// <param name="usg_start_date"></param>
        /// <param name="usg_end_date"></param>
        /// <returns></returns>
        public List<UserReadHistoryModel> UniversityReadHistoryExportAndroidApp(int univId, string college_id, string semester, string year, string reg_startdate, string reg_end_date, string usg_start_date, string usg_end_date)
        {
            List<UserReadHistoryModel> readHistory = new List<UserReadHistoryModel>();

            string[] ddlyear = new string[50];
            List<int> selyear = new List<int>();
            ddlyear = year.Split('-').ToArray();
            if (ddlyear[0].ToString() != "0")
            {
                for (int j = 0; j < ddlyear.Length; j++)
                {
                    selyear.Add(Convert.ToInt16(ddlyear[j].ToString()));
                }

            }

            string[] ddlCollege = new string[100];
            List<int> collge = new List<int>();
            ddlCollege = college_id.Split('-').ToArray();
            if (ddlCollege[0].ToString() != "0")
            {
                for (int i = 0; i < ddlCollege.Length; i++)
                {
                    collge.Add(Convert.ToInt32(ddlCollege[i].ToString()));
                }
            }

            string[] ddlSemester = new string[50];
            List<int> sems = new List<int>();
            ddlSemester = semester.Split('-').ToArray();
            if (ddlSemester[0].ToString() != "0")
            {
                for (int k = 0; k < ddlSemester.Length; k++)
                {
                    sems.Add(Convert.ToInt16(ddlSemester[k].ToString()));
                }
            }
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var regCount = (from sm in contextsdce.subject_master
                                    join usrh in contextsdce.user_subject_read_history_androidapp on sm.subject_id equals usrh.subject_id
                                    join um in contextsdce.user_master on usrh.user_id equals um.user_id
                                    join dpsm in contextsdce.department_subject_mapping on um.DepartmentID equals dpsm.department_id
                                    join unvm in contextsdce.university_master on um.univ_id equals unvm.univ_id
                                    join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                    where um.univ_id == cm.university_id && sm.UniversityID == dpsm.university_id
                                    && dpsm.subject_id == sm.subject_id
                                    //&& usm.department_id == pm.department_id && pm.department_id == um.DepartmentID                                  
                                    && um.active_status == 1 && cm.active_status == 1
                                    && um.univ_id == univId
                                    orderby usrh.total_hours descending
                                    select new
                                    {
                                        userReadHistryId = usrh.user_read_history_id,
                                        username = um.user_name,
                                        mobile = um.mobile,
                                        email = um.email_id,
                                        userid = um.user_id,
                                        collegename = cm.college_name,
                                        collegeid = um.collegeid,
                                        subjectcount = sm.subject_id,
                                        totalhours = usrh.total_hours,
                                        lastreadon = usrh.last_read_on,
                                        userrole = um.role_id == 1 ? "Student" : "Staff",
                                        dpsm.map_year,
                                        dpsm.semester,
                                        um.currentyear,
                                        um.currentsemester,
                                        um.created_on,
                                        usrh.last_read_on,
                                        univ_Id = um.univ_id,
                                        univ_name = unvm.university_name
                                    }).ToList();
                    //if (univId != 0)
                    //{
                    //    var datanew = regCount.ToList();
                    //    regCount.Clear();
                    //    regCount.AddRange(datanew.Where(x => x.univ_Id == univId));
                    //}
                    if (selyear.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        //regCount.AddRange(datanew.Where(x => selyear.Contains(x.currentyear)));
                    }

                    if (sems.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => sems.Contains(x.semester)));
                    }
                    if (collge.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => collge.Contains(x.collegeid ?? 0)));

                    }
                    if (reg_startdate != "0")
                    {
                        string Reg_stdate = reg_startdate + " " + "00:00:00 AM";
                        DateTime start_date = DateTime.ParseExact(Reg_stdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on >= start_date));
                    }
                    if (usg_start_date != "0")
                    {
                        string usg_startdate = usg_start_date + " " + "00:00:00 AM";
                        DateTime usgStart_date = DateTime.ParseExact(usg_startdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on >= usgStart_date));
                    }

                    if (reg_end_date != "0")
                    {
                        string Reg_edate = reg_end_date + " " + "11:59:00 PM";
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime End_date = DateTime.ParseExact(Reg_edate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on <= End_date));
                    }
                    if (usg_end_date != "0")
                    {
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime usgEnd_date = DateTime.ParseExact(usg_End_date, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on <= usgEnd_date));
                    }

                    readHistory = (from g in regCount
                                   group g by g.userid into t
                                   select new UserReadHistoryModel
                                   {
                                       userName = t.FirstOrDefault().username,
                                       userId = t.FirstOrDefault().userid,
                                       univName = t.FirstOrDefault().univ_name,
                                       collegeName = t.FirstOrDefault().collegename,
                                       collegeId = t.FirstOrDefault().collegeid,
                                       YearMonth = t.FirstOrDefault().currentyear + "-" + t.FirstOrDefault().currentsemester,
                                       Email = t.FirstOrDefault().email,
                                       subjectCount = t.Select(x => x.subjectcount).Distinct().Count(),
                                       totalSeconds = t.Sum(x => x.totalhours),
                                       Mobile = t.FirstOrDefault().mobile,
                                       totalhrs = string.Format("{0:00}:{1:00}:{2:00}", t.Sum(x => x.totalhours) / 3600, (t.Sum(x => x.totalhours) / 60) % 60, t.Sum(x => x.totalhours) % 60),
                                       lastReadDate = t.Max(x => x.lastreadon).Date,
                                       userRole = t.FirstOrDefault().userrole,
                                       userCount = t.Count(),
                                   }).OrderByDescending(t => t.totalSeconds).ToList();

                    return readHistory;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminReportservice", "UniversityReadHistoryExportAndroidApp", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="univId"></param>
        /// <param name="college_id"></param>
        /// <param name="semester"></param>
        /// <param name="year"></param>
        /// <param name="reg_startdate"></param>
        /// <param name="reg_end_date"></param>
        /// <param name="usg_start_date"></param>
        /// <param name="usg_end_date"></param>
        /// <param name="contenttype"></param>
        /// <returns></returns>
        public List<UserReadHistoryModel> ExportReadHistoryContentAndQA_AndroidApp(int univId, string college_id, string semester, string year, string reg_startdate, string reg_end_date, string usg_start_date, string usg_end_date, int contenttype)
        {
            List<UserReadHistoryModel> readHistory = new List<UserReadHistoryModel>();

            string[] ddlyear = new string[50];
            List<int> selyear = new List<int>();
            ddlyear = year.Split('-').ToArray();
            if (ddlyear[0].ToString() != "0")
            {
                for (int j = 0; j < ddlyear.Length; j++)
                {
                    selyear.Add(Convert.ToInt16(ddlyear[j].ToString()));
                }

            }

            string[] ddlCollege = new string[100];
            List<int> collge = new List<int>();
            ddlCollege = college_id.Split('-').ToArray();
            if (ddlCollege[0].ToString() != "0")
            {
                for (int i = 0; i < ddlCollege.Length; i++)
                {
                    collge.Add(Convert.ToInt32(ddlCollege[i].ToString()));
                }
            }

            string[] ddlSemester = new string[50];
            List<int> sems = new List<int>();
            ddlSemester = semester.Split('-').ToArray();
            if (ddlSemester[0].ToString() != "0")
            {
                for (int k = 0; k < ddlSemester.Length; k++)
                {
                    sems.Add(Convert.ToInt16(ddlSemester[k].ToString()));
                }
            }
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var regCount = (from sm in contextsdce.subject_master
                                    join smunit in contextsdce.subject_unit_master on sm.subject_id equals smunit.subject_id
                                    join usrapp in contextsdce.user_subject_unit_read_history_androidapp on sm.subject_id equals usrapp.subject_id
                                    join um in contextsdce.user_master on usrapp.user_id equals um.user_id
                                    join dpsm in contextsdce.department_subject_mapping on um.DepartmentID equals dpsm.department_id
                                    join unvm in contextsdce.university_master on um.univ_id equals unvm.univ_id
                                    join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                    where um.univ_id == cm.university_id && sm.UniversityID == dpsm.university_id
                                     && dpsm.subject_id == sm.subject_id // && usm.department_id == pm.department_id  && pm.department_id == um.DepartmentID
                                    && um.active_status == 1 && cm.active_status == 1
                                    && smunit.subject_unit_type == contenttype
                                    && um.univ_id == univId

                                    select new
                                    {
                                        userReadHistryId = usrapp.user_read_unit_history_id,
                                        username = um.user_name,
                                        mobile = um.mobile,
                                        email = um.email_id,
                                        userid = um.user_id,
                                        collegename = cm.college_name,
                                        collegeid = um.collegeid,
                                        subjectcount = sm.subject_id,
                                        totalhours = usrapp.total_seconds,
                                        lastreadon = usrapp.last_read_on,
                                        userrole = um.role_id == 1 ? "Student" : "Staff",
                                        dpsm.map_year,
                                        dpsm.semester,
                                        um.currentyear,
                                        um.currentsemester,
                                        um.created_on,
                                        usrapp.last_read_on,
                                        univ_Id = um.univ_id,
                                        univ_name = unvm.university_name
                                    }).ToList();
                    //if (univId != 0)
                    //{
                    //    var datanew = regCount.ToList();
                    //    regCount.Clear();
                    //    regCount.AddRange(datanew.Where(x => x.univ_Id == univId));
                    //}
                    if (selyear.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        //regCount.AddRange(datanew.Where(x => selyear.Contains(x.currentyear)));
                    }

                    if (sems.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => sems.Contains(x.semester)));
                    }
                    if (collge.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => collge.Contains(x.collegeid ?? 0)));

                    }
                    if (reg_startdate != "0")
                    {
                        string Reg_stdate = reg_startdate + " " + "00:00:00 AM";
                        DateTime start_date = DateTime.ParseExact(Reg_stdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on >= start_date));
                    }
                    if (usg_start_date != "0")
                    {
                        string usg_startdate = usg_start_date + " " + "00:00:00 AM";
                        DateTime usgStart_date = DateTime.ParseExact(usg_startdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on >= usgStart_date));
                    }

                    if (reg_end_date != "0")
                    {
                        string Reg_edate = reg_end_date + " " + "11:59:00 PM";
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime End_date = DateTime.ParseExact(Reg_edate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on <= End_date));
                    }
                    if (usg_end_date != "0")
                    {
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime usgEnd_date = DateTime.ParseExact(usg_End_date, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on <= usgEnd_date));
                    }

                    readHistory = (from g in regCount
                                   group g by g.userid into t
                                   select new UserReadHistoryModel
                                   {
                                       userName = t.FirstOrDefault().username,
                                       userId = t.FirstOrDefault().userid,
                                       univName = t.FirstOrDefault().univ_name,
                                       collegeName = t.FirstOrDefault().collegename,
                                       collegeId = t.FirstOrDefault().collegeid,
                                       YearMonth = t.FirstOrDefault().currentyear + "-" + t.FirstOrDefault().currentsemester,
                                       Email = t.FirstOrDefault().email,
                                       subjectCount = t.Select(x => x.subjectcount).Distinct().Count(),
                                       totalSeconds = t.Sum(x => x.totalhours),
                                       Mobile = t.FirstOrDefault().mobile,
                                       totalhrs = string.Format("{0:00}:{1:00}:{2:00}", t.Sum(x => x.totalhours) / 3600, (t.Sum(x => x.totalhours) / 60) % 60, t.Sum(x => x.totalhours) % 60),
                                       lastReadDate = t.Max(x => x.lastreadon).Date,
                                       userRole = t.FirstOrDefault().userrole,
                                       userCount = t.Count(),
                                   }).OrderByDescending(t => t.totalSeconds).ToList();

                    return readHistory;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminReportservice", "UniversityReadHistoryExportAndroidApp", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        public List<UserReadHistoryModel> ExportReadHistoryContentAndQA_AndroidAppQA(int univId, string college_id, string semester, string year, string reg_startdate, string reg_end_date, string usg_start_date, string usg_end_date, int contenttype)
        {
            List<UserReadHistoryModel> readHistory = new List<UserReadHistoryModel>();

            string[] ddlyear = new string[50];
            List<int> selyear = new List<int>();
            ddlyear = year.Split('-').ToArray();
            if (ddlyear[0].ToString() != "0")
            {
                for (int j = 0; j < ddlyear.Length; j++)
                {
                    selyear.Add(Convert.ToInt16(ddlyear[j].ToString()));
                }

            }

            string[] ddlCollege = new string[100];
            List<int> collge = new List<int>();
            ddlCollege = college_id.Split('-').ToArray();
            if (ddlCollege[0].ToString() != "0")
            {
                for (int i = 0; i < ddlCollege.Length; i++)
                {
                    collge.Add(Convert.ToInt32(ddlCollege[i].ToString()));
                }
            }

            string[] ddlSemester = new string[50];
            List<int> sems = new List<int>();
            ddlSemester = semester.Split('-').ToArray();
            if (ddlSemester[0].ToString() != "0")
            {
                for (int k = 0; k < ddlSemester.Length; k++)
                {
                    sems.Add(Convert.ToInt16(ddlSemester[k].ToString()));
                }
            }
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var regCount = (from sm in contextsdce.subject_master
                                    join smunit in contextsdce.subject_unit_master on sm.subject_id equals smunit.subject_id
                                    join usrapp in contextsdce.user_subject_unit_read_history_androidapp on sm.subject_id equals usrapp.subject_id
                                    join um in contextsdce.user_master on usrapp.user_id equals um.user_id
                                    join dpsm in contextsdce.department_subject_mapping on um.DepartmentID equals dpsm.department_id
                                    join unvm in contextsdce.university_master on um.univ_id equals unvm.univ_id
                                    join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                    where um.univ_id == cm.university_id && sm.UniversityID == dpsm.university_id
                                    && dpsm.subject_id == sm.subject_id // && usm.department_id == pm.department_id  
                                    // && pm.department_id == um.DepartmentID
                                    && um.active_status == 1 && cm.active_status == 1
                                    && smunit.subject_unit_type == contenttype
                                    && um.univ_id == univId

                                    select new
                                    {
                                        userReadHistryId = usrapp.user_read_unit_history_id,
                                        username = um.user_name,
                                        mobile = um.mobile,
                                        email = um.email_id,
                                        userid = um.user_id,
                                        collegename = cm.college_name,
                                        collegeid = um.collegeid,
                                        subjectcount = sm.subject_id,
                                        totalhours = usrapp.total_seconds,
                                        lastreadon = usrapp.last_read_on,
                                        userrole = um.role_id == 1 ? "Student" : "Staff",
                                        dpsm.map_year,
                                        dpsm.semester,
                                        um.currentyear,
                                        um.currentsemester,
                                        um.created_on,
                                        usrapp.last_read_on,
                                        univ_Id = um.univ_id,
                                        univ_name = unvm.university_name
                                    }).ToList();
                    //if (univId != 0)
                    //{
                    //    var datanew = regCount.ToList();
                    //    regCount.Clear();
                    //    regCount.AddRange(datanew.Where(x => x.univ_Id == univId));
                    //}
                    if (selyear.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        //regCount.AddRange(datanew.Where(x => selyear.Contains(x.currentyear)));
                    }

                    if (sems.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => sems.Contains(x.semester)));
                    }
                    if (collge.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => collge.Contains(x.collegeid ?? 0)));

                    }
                    if (reg_startdate != "0")
                    {
                        string Reg_stdate = reg_startdate + " " + "00:00:00 AM";
                        DateTime start_date = DateTime.ParseExact(Reg_stdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on >= start_date));
                    }
                    if (usg_start_date != "0")
                    {
                        string usg_startdate = usg_start_date + " " + "00:00:00 AM";
                        DateTime usgStart_date = DateTime.ParseExact(usg_startdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on >= usgStart_date));
                    }

                    if (reg_end_date != "0")
                    {
                        string Reg_edate = reg_end_date + " " + "11:59:00 PM";
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime End_date = DateTime.ParseExact(Reg_edate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on <= End_date));
                    }
                    if (usg_end_date != "0")
                    {
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime usgEnd_date = DateTime.ParseExact(usg_End_date, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on <= usgEnd_date));
                    }

                    readHistory = (from g in regCount
                                   group g by g.userid into t
                                   select new UserReadHistoryModel
                                   {
                                       userName = t.FirstOrDefault().username,
                                       userId = t.FirstOrDefault().userid,
                                       univName = t.FirstOrDefault().univ_name,
                                       collegeName = t.FirstOrDefault().collegename,
                                       collegeId = t.FirstOrDefault().collegeid,
                                       YearMonth = t.FirstOrDefault().currentyear + "-" + t.FirstOrDefault().currentsemester,
                                       Email = t.FirstOrDefault().email,
                                       subjectCount = t.Select(x => x.subjectcount).Distinct().Count(),
                                       totalSeconds = t.Sum(x => x.totalhours),
                                       Mobile = t.FirstOrDefault().mobile,
                                       totalhrs = string.Format("{0:00}:{1:00}:{2:00}", t.Sum(x => x.totalhours) / 3600, (t.Sum(x => x.totalhours) / 60) % 60, t.Sum(x => x.totalhours) % 60),
                                       lastReadDate = t.Max(x => x.lastreadon).Date,
                                       userRole = t.FirstOrDefault().userrole,
                                       userCount = t.Count(),
                                   }).OrderByDescending(t => t.totalSeconds).ToList();

                    return readHistory;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminReportservice", "UniversityReadHistoryExportAndroidApp", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        /// <summary>
        /// subjectunitwiseReadHistoryReportwithfilter
        /// </summary>
        /// <param name="univId"></param>
        /// <param name="college_id"></param>
        /// <param name="semester"></param>
        /// <param name="year"></param>
        /// <param name="reg_startdate"></param>
        /// <param name="reg_end_date"></param>
        /// <param name="usg_start_date"></param>
        /// <param name="usg_end_date"></param>
        /// <param name="contenttype"></param>
        /// <returns></returns>
        public List<UserReadHistoryModel> subjectunitwiseReadHistoryReportwithfilter(int univId, string college_id, string semester, string year, string reg_startdate, string reg_end_date, string usg_start_date, string usg_end_date, int contenttype)
        {

            List<UserReadHistoryModel> readHistory = new List<UserReadHistoryModel>();

            string[] ddlyear = new string[50];
            List<int> selyear = new List<int>();
            ddlyear = year.Split('-').ToArray();
            if (ddlyear[0].ToString() != "0")
            {
                for (int j = 0; j < ddlyear.Length; j++)
                {
                    selyear.Add(Convert.ToInt16(ddlyear[j].ToString()));
                }

            }

            string[] ddlCollege = new string[100];
            List<int> collge = new List<int>();
            ddlCollege = college_id.Split('-').ToArray();
            if (ddlCollege[0].ToString() != "0")
            {
                for (int i = 0; i < ddlCollege.Length; i++)
                {
                    collge.Add(Convert.ToInt32(ddlCollege[i].ToString()));
                }
            }

            string[] ddlSemester = new string[50];
            List<int> sems = new List<int>();
            ddlSemester = semester.Split('-').ToArray();
            if (ddlSemester[0].ToString() != "0")
            {
                for (int k = 0; k < ddlSemester.Length; k++)
                {
                    sems.Add(Convert.ToInt16(ddlSemester[k].ToString()));
                }
            }
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var regCount = (from sm in contextsdce.subject_master
                                    join smunit in contextsdce.subject_unit_master on sm.subject_id equals smunit.subject_id
                                    join usrh in contextsdce.user_subject_unit_read_history on smunit.unit_code equals usrh.subject_unitid
                                    join um in contextsdce.user_master on usrh.user_id equals um.user_id
                                    join dpsm in contextsdce.department_subject_mapping on um.DepartmentID equals dpsm.department_id
                                    join unvm in contextsdce.university_master on um.univ_id equals unvm.univ_id
                                    join cm in contextsdce.college_master on um.collegeid equals cm.college_id
                                    where um.univ_id == cm.university_id && sm.UniversityID == dpsm.university_id
                                     && dpsm.subject_id == sm.subject_id // && usm.department_id == pm.department_id 
                                                                         //  && pm.department_id == um.DepartmentID && pm.is_bundle==0 
                                    && um.active_status == 1 && cm.active_status == 1 && smunit.subject_unit_type == contenttype
                                    && um.univ_id == univId
                                    orderby usrh.total_seconds descending

                                    select new
                                    {
                                        userReadHistryId = usrh.user_read_unit_history_id,
                                        username = um.user_name,
                                        mobile = um.mobile,
                                        email = um.email_id,
                                        userid = um.user_id,
                                        collegename = cm.college_name,
                                        collegeid = um.collegeid,
                                        subjectcount = sm.subject_id,
                                        totalhours = usrh.total_seconds,
                                        lastreadon = usrh.last_read_on,
                                        userrole = um.role_id == 1 ? "Student" : "Staff",
                                        dpsm.map_year,
                                        dpsm.semester,
                                        um.currentyear,
                                        um.currentsemester,
                                        um.created_on,
                                        usrh.last_read_on,
                                        univ_Id = um.univ_id,
                                        univ_name = unvm.university_name
                                    }).ToList();
                    //if (univId != 0)
                    //{
                    //    var datanew = regCount.ToList();
                    //    regCount.Clear();
                    //    regCount.AddRange(datanew.Where(x => x.univ_Id == univId));
                    //}
                    if (selyear.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        //regCount.AddRange(datanew.Where(x => selyear.Contains(x.currentyear)));
                    }

                    if (sems.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => sems.Contains(x.semester)));
                    }
                    if (collge.Count() > 0)
                    {
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => collge.Contains(x.collegeid ?? 0)));

                    }
                    if (reg_startdate != "0")
                    {
                        string Reg_stdate = reg_startdate + " " + "00:00:00 AM";
                        DateTime start_date = DateTime.ParseExact(Reg_stdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on >= start_date));
                    }
                    if (usg_start_date != "0")
                    {
                        string usg_startdate = usg_start_date + " " + "00:00:00 AM";
                        DateTime usgStart_date = DateTime.ParseExact(usg_startdate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on >= usgStart_date));
                    }

                    if (reg_end_date != "0")
                    {
                        string Reg_edate = reg_end_date + " " + "11:59:00 PM";
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime End_date = DateTime.ParseExact(Reg_edate, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.created_on <= End_date));
                    }
                    if (usg_end_date != "0")
                    {
                        string usg_End_date = usg_end_date + " " + "11:59:00 PM";
                        DateTime usgEnd_date = DateTime.ParseExact(usg_End_date, "dd-MM-yyyy hh:mm:ss tt", CultureInfo.InvariantCulture);
                        var datanew = regCount.ToList();
                        regCount.Clear();
                        regCount.AddRange(datanew.Where(x => x.last_read_on <= usgEnd_date));
                    }

                    readHistory = (from g in regCount
                                   group g by g.userid into t
                                   select new UserReadHistoryModel
                                   {
                                       userName = t.FirstOrDefault().username,
                                       userId = t.FirstOrDefault().userid,
                                       univName = t.FirstOrDefault().univ_name,
                                       collegeName = t.FirstOrDefault().collegename,
                                       collegeId = t.FirstOrDefault().collegeid,
                                       YearMonth = t.FirstOrDefault().currentyear + "-" + t.FirstOrDefault().currentsemester,
                                       Email = t.FirstOrDefault().email,
                                       subjectCount = t.Select(x => x.subjectcount).Distinct().Count(),
                                       totalSeconds = t.Sum(x => x.totalhours),
                                       Mobile = t.FirstOrDefault().mobile,
                                       totalhrs = string.Format("{0:00}:{1:00}:{2:00}", t.Sum(x => x.totalhours) / 3600, (t.Sum(x => x.totalhours) / 60) % 60, t.Sum(x => x.totalhours) % 60),
                                       lastReadDate = t.Max(x => x.lastreadon).Date,
                                       userRole = t.FirstOrDefault().userrole,
                                       userCount = t.Count(),
                                   }).OrderByDescending(t => t.totalSeconds).ToList();

                    return readHistory;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminReportservice", "UniversityReadHistoryexportwithfilter", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }


        }
        public DataTable VisitorsReport()
        {
            try
            {
                string[] strOrderStatus = { "3", "5" };

                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    var visitorsDetails = (from univ in contextsdce.university_master
                                           join um in contextsdce.user_master on univ.univ_id equals um.univ_id
                                           join usm in contextsdce.user_subscribe_master on um.user_id equals usm.user_id
                                           join usd in contextsdce.user_subscribe_details on usm.user_subscribe_master_id equals usd.user_subscribe_master_id
                                           join pm in contextsdce.package_master on usd.package_id equals pm.package_id
                                           join sub in contextsdce.subject_master on pm.subject_id equals sub.subject_id
                                           where um.active_status == 1 && usm.payment_status == 2 && strOrderStatus.Contains(usm.order_status.ToString())
                                           //&& um.user_id == 19367
                                           select new
                                           {
                                               univ_id = univ.univ_id,
                                               university_name = univ.university_name,
                                               user_id = um.user_id,
                                               payment_ref_no = usm.payment_ref_no,
                                               total_sub = usm.payment_ref_no.ToString() + sub.subject_id.ToString()
                                           }).Distinct().ToList();

                    var Visitorcount = (from univ in contextsdce.university_master
                                        join um in contextsdce.user_master on univ.univ_id equals um.univ_id
                                        join ult in contextsdce.user_login_track on um.user_id equals ult.user_id
                                        where um.active_status == 1
                                        group ult by new { univ.university_name } into visitors
                                        select new
                                        {
                                            University_name = visitors.Key.university_name,
                                            NoofTimesVisit = visitors.Select(v => v.repeated_login_cnt).Sum()
                                        }
                                      ).Distinct().ToList();
                    var Visitors = (from vc in Visitorcount
                                    join vd in visitorsDetails on vc.University_name equals vd.university_name
                                    into lftvd
                                    from vd in lftvd.DefaultIfEmpty()
                                    group new { vd, vc } by vc.University_name into visitors
                                    select new
                                    {
                                        University_name = visitors.Key,
                                        TotalUsers = visitors.Select(v => v.vd != null ? v.vd.user_id : 0).Distinct().Count(),
                                        NoofTimesVisit = visitors.First().vc.NoofTimesVisit,
                                        TotalOrders = visitors.Select(v => v.vd != null ? v.vd.payment_ref_no : "0").Distinct().Count(),
                                        TotalSubjectPurchased = visitors.Select(v => v.vd != null ? v.vd.total_sub : "0").Distinct().Count(),
                                    }
                                   ).Distinct().ToList();
                    ListtoDataTableConverter converter = new ListtoDataTableConverter();
                    DataTable dt;
                    dt = converter.ToDataTable(Visitors);
                    return dt;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        



        #region ITI Service

        public string sendOtp_VerifyCollege(int collegeId, long pMobileNo, string emailId, int isSendorResend)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var updateInstitute = (from cm in contextsdce.college_master where  cm.college_email == emailId && cm.college_id == collegeId select cm).FirstOrDefault();
                    if (updateInstitute != null)
                    {
                        SendOTP(updateInstitute.college_id, pMobileNo, emailId, isSendorResend);
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", updateInstitute.college_id.ToString())));
                        return xdoc.ToString();
                    }
                    else
                    {
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "0")));
                        return xdoc.ToString();
                    }
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "verifyCollegeInfo", ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1")));
                    return xdoc.ToString();

                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }


        public string verifyOtp_updateCollegePassword(int collegeId, string OTP, string pPassword)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    EncryptionDecryption encrypt = new EncryptionDecryption();
                    var pass = encrypt.encrptpwd(pPassword, true);
                    var updateInstitute = (from urpc in contextsdce.user_random_pass_college where urpc.verification_code == OTP && urpc.college_id == collegeId && urpc.action_type == 1 select urpc).FirstOrDefault();
                    if (updateInstitute != null)
                    {
                        var updateInstitutePwd = (from cm in contextsdce.college_master where cm.college_id == collegeId select cm).FirstOrDefault();
                        updateInstitutePwd.password = pass;
                        int result = contextsdce.SaveChanges();
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", updateInstitute.college_id.ToString())));
                        return xdoc.ToString();
                    }
                    else
                    {
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "0")));
                        return xdoc.ToString();
                    }

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "updateInstitutePassword", ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1")));
                    return xdoc.ToString();
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }

        public string InsertCollegeInstitute(int pCollege_id, string pInstallationCentreName, string pPrimaryMac, int pEnterby)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                using (var transaction = contextsdce.Database.BeginTransaction())
                {
                    try
                    {
                        college_installation_details existCid = (from cid in contextsdce.college_installation_details where cid.college_id == pCollege_id && cid.primary_mac == pPrimaryMac select cid).FirstOrDefault();
                        if (existCid == null)
                        {

             //               var chkLicencecount = (from cm in contextsdce.college_master
             //                                      join cid1 in contextsdce.college_installation_details
             //on cm.college_id equals cid1.college_id
             //                                      where cm.college_id == pCollege_id
             //                                      select new { cm.total_license, cid1.primary_mac }).ToList();
                            //if (chkLicencecount.Count == 0 || (chkLicencecount.Count > 0 && chkLicencecount.Count < chkLicencecount[0].total_license))
                            {

                                college_installation_details cid = new college_installation_details();
                                cid.college_id = pCollege_id;
                                cid.installation_centre_name = pInstallationCentreName;
                                cid.primary_mac = pPrimaryMac;
                                cid.enter_on = DateTime.Now;
                                cid.active_status = 1;
                                cid.enter_by = pEnterby;
                                contextsdce.college_installation_details.Add(cid);

                                int result = contextsdce.SaveChanges();
                                transaction.Commit();
                                if (result > 0)
                                {
                                   // string res = SaveCollegeSubjectDetails(pCollege_id, pPrimaryMac);
                                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "1")));
                                    return xdoc.ToString();
                                }
                                else
                                {
                                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-2")));
                                    return xdoc.ToString();
                                }
                            }
                            //else
                            //{
                            //    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "0")));
                            //    return xdoc.ToString();
                            //}
                        }
                        else
                        {
                          //  string res = SaveCollegeSubjectDetails(pCollege_id, pPrimaryMac);
                            XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "1")));
                            return xdoc.ToString();                                                       
                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        transaction.Dispose();
                        contextsdce.Dispose();
                        Log.WriteLogMessage(PageName, "AdminService", "InsertCollegeInstitute", ex.Message, "error");
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1")));
                        return xdoc.ToString(); // Failure
                    }
                    finally
                    {
                        transaction.Dispose();
                        contextsdce.Dispose();
                    }
                }
            }
        }
        public string SendOTP(int pCollegeID, long pMobileNo, string pEmailId, int isSendorResend)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    CallSendSMS obj1 = new CallSendSMS();
                    string strPostResponse;
                    string sOTP = string.Empty;

                    if (isSendorResend == 1)
                    {
                        sOTP = obj1.CreateRandomPassword(5);

                        //Delete User Id if Already Exsist
                        user_random_pass_college delurp = (from del in contextsdce.user_random_pass_college where del.college_id == pCollegeID && del.action_type == 1 select del).FirstOrDefault();
                        if (delurp != null)
                        {
                            //contextsdce.user_random_pass.DeleteObject(delurp);
                            contextsdce.user_random_pass_college.Remove(delurp);
                            contextsdce.SaveChanges();
                        }


                        //Inserting Random password to user_random_pass Generated in verificationcode
                        user_random_pass_college urp = new user_random_pass_college();
                        urp.verification_code = sOTP;
                        urp.generated_time = DateTime.Now;
                        urp.action_type = 1;
                        urp.college_id = Convert.ToInt32(pCollegeID);
                        //contextsdce.AddTouser_random_pass(urp);
                        contextsdce.user_random_pass_college.Add(urp);
                        contextsdce.SaveChanges();

                    }
                    else
                    {
                        user_random_pass_college urpc = (from urp in contextsdce.user_random_pass_college where urp.college_id == pCollegeID && urp.action_type == 1 select urp).FirstOrDefault();
                        if (urpc != null)
                        {
                            sOTP = urpc.verification_code;

                        }
                    }
                    //OTP send to Mobile Number
                   // strPostResponse = obj1.SendSMS(pMobileNo.ToString().Trim(), "Please enter OTP :  " + sOTP + "  to Complete the Registration Process , Infoplus learnengg.com Support", "test");


                    //OTP send to EMail
                    string mbody = MailHelper.EmailBody_OTP("Request Process",  "", sOTP, "");
                    MailHelper.SendMail(pEmailId, "One Time PassWord", mbody);

                    //MailHelper.SendMail("infoplus.otp@gmail.com", userdetails.collegename.ToString().Trim() + " - One Time PassWord For Registration", "One Time Password For:    " + userdetails.email_id.ToString() + " and his/her mobile number is : " + userdetails.mobile.ToString().Trim() + " and OTP is : " + "<b>" + sOTP + " " + "</b>" + " </br></br></br></br> By </br><b> LearnEngg Team</b>");


                    //return Convert.ToInt32(userdetails.user_id);

                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "1")));
                    return xdoc.ToString();


                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "College Verify Process", "SendOTP", ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1")));
                    return xdoc.ToString();

                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }


        public string CheckCollegeLogin(string loginID, string Password)
        {
            checkCollegeLogin chckLogin = new checkCollegeLogin();
            long mobile = 0;
            bool result = Int64.TryParse(loginID, out mobile);
            JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    EncryptionDecryption encrypt = new EncryptionDecryption();
                    var pass = encrypt.encrptpwd(Password, true);
                    var data = (from login in contextsdce.college_master

                                where (login.college_email.Trim() == loginID.Trim() ) && login.password.Trim() == pass.Trim()
                                select new
                                {
                                    college_id = login.college_id,
                                    college_name = login.college_name,
                                    emailId = login.college_email,
                                    mobileNumber = login.college_mobile,
                                    actveStatus = login.active_status,
                                }).ToList();
                    var userData = (from c in data
                                    select new checkCollegeLogin
                                    {
                                        CollegeID = c.college_id,
                                        CollegeName = c.college_name,
                                        emailId = c.emailId,
                                        mobileNumber = c.mobileNumber,
                                        actveStatus = c.actveStatus,
                                        currentDate = DateTime.Now.ToString("dd-MM-yyyy"),
                                    }).ToList();

                    if (userData.Any() == true)
                    {
                        chckLogin = userData.First();
                        XDocument xdoc = new XDocument(new XElement("CollegeList",
                                                                                   new XElement("College",
                                                                                                new XAttribute("CollegeId", chckLogin.CollegeID),
                                                                                                new XAttribute("CollegeName", chckLogin.CollegeName),
                                                                                                new XAttribute("emailId", chckLogin.emailId),
                                                                                                new XAttribute("mobileNumber", chckLogin.mobileNumber),
                                                                                                new XAttribute("actveStatus", chckLogin.actveStatus)
                                                                                              )));
                        return xdoc.ToString();


                    }
                    else
                    {
                        checkCollegeLogin dt = new checkCollegeLogin();
                        dt.message = "The UserName and Password doesn't exists";
                        chckLogin = dt;
                        return jsSerializer.Serialize("The UserName and Password doesn't exists");
                        // "No details for this user You Entered wrong Mobile or EmailId";
                    }
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "checkCollegeLogin", "CheckLoginDetails Exception Message", ex.Message, "error");
                    Log.WriteLogMessage(PageName, "checkCollegeLogin", "InnerException", ex.InnerException.Message.ToString(), "error");
                    Log.WriteLogMessage(PageName, "checkCollegeLogin", "chckLogin", chckLogin.CollegeID.ToString(), "error");

                    return jsSerializer.Serialize("The UserName and Password doesn't exists");

                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public string GetCollegeList()
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeList> collegelist = new List<CollegeList>();
                try
                {
                    collegelist = (from cm in contextsdce.college_master
                                   where cm.active_status == 1
                                   orderby cm.college_code
                                   select new CollegeList
                                   {
                                       college_Id = cm.college_id,
                                       college_Name = cm.college_code + " - " + cm.college_name
                                   }).ToList();
                    XDocument xdoc = new XDocument(new XElement("CollegeList", from clg in collegelist
                                                                               select new XElement("College",
                                                                                            new XAttribute("CollegeId", clg.college_Id),
                                                                                            new XAttribute("CollegCode", clg.college_Name)
                                                                                          )));

                    return xdoc.ToString();
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "LoadCollegeList", "LoadCollegeList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public string GetDepartmentList()
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<DepartmentList> departmentList = new List<DepartmentList>();
                try
                {
                    departmentList = (from cm in contextsdce.department_master
                                      where cm.active_status == 1
                                      select new DepartmentList
                                      {
                                          departmentID = cm.department_id,
                                          departmentName = cm.department_name
                                      }).ToList();

                    XDocument xdoc = new XDocument(new XElement("DepartmentList", from dept in departmentList
                                                                                  select new XElement("Department",
                                                                                            new XAttribute("departmentID", dept.departmentID),
                                                                                            new XAttribute("departmentName", dept.departmentName)
                                                                                          )));

                    return xdoc.ToString();
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "LoadCollegeList", "LoadCollegeList", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public string GetUserIP()
        {
            string VisitorsIPAddr = string.Empty;
            try
            {

                if (HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"] != null)
                {
                    VisitorsIPAddr = HttpContext.Current.Request.ServerVariables["HTTP_X_FORWARDED_FOR"].ToString();
                }
                else if (HttpContext.Current.Request.UserHostAddress.Length != 0)
                {
                    VisitorsIPAddr = HttpContext.Current.Request.UserHostAddress;
                }

            }
            catch (Exception ex)
            {
                Log.WriteLogMessage(PageName, "GetUserIP", "GetUserIP", ex.Message, "error");
                throw ex;

            }
            return VisitorsIPAddr;

        }

        public string getServerDate()
        {
            try
            {
                string date = DateTime.Now.ToString("yyyy-MM-dd");
                return date;

            }
            catch (Exception ex)
            {
                Log.WriteLogMessage(PageName, "getServerDate", "getServerDate", ex.Message, "error");
                throw;
            }
        }

        public string SaveCollegeSubjectDetails(int collegeId, string primaryMac)
        {
            List<saveCollegeSubjectInstall> saveCollegeSubjectInstall = new List<saveCollegeSubjectInstall>();
            int result = 0;
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    saveCollegeSubjectInstall = (from cm in contextsdce.college_master
                                                 join cid in contextsdce.college_installation_details on cm.college_id equals cid.college_id
                                                 join csm in contextsdce.college_subject_mapping on cm.college_id equals csm.college_id
                                                 join sm in contextsdce.subject_master on csm.subject_id equals sm.subject_id
                                                 join dm in contextsdce.department_master on csm.department_id equals dm.department_id                                               
                                                 where cm.active_status == 1 && cm.college_id == collegeId && cid.primary_mac == primaryMac
                                                 select new saveCollegeSubjectInstall
                                                 {
                                                     collegeInstallId = cid.college_install_id,
                                                     departmentId = dm.department_id,
                                                     subjectId = sm.subject_id,
                                                     activeDurationDays = sm.active_duration_days,
                                                     activeDurationDate = sm.active_duration_date


                                                 }).Distinct().ToList();


                    foreach (var sub in saveCollegeSubjectInstall)
                    {

                        DateTime actDuration = sub.activeDurationDate;
                        DateTime actSubjdays = DateTime.Now.AddDays(sub.activeDurationDays);

                        var chkCollegeSubjectInstall = (from cid in contextsdce.college_installation_expiry  where cid.college_install_id == sub.collegeInstallId && cid.department_id== sub.departmentId && cid.subject_id == sub.subjectId select cid);

                        if (chkCollegeSubjectInstall.Count() > 0)
                        {

                        }
                        else
                        {

                            college_installation_expiry cie = new college_installation_expiry();
                            cie.college_install_id = sub.collegeInstallId;
                            cie.department_id = sub.departmentId;
                            cie.subject_id = sub.subjectId;
                            if (actDuration > actSubjdays)
                            {
                                cie.expiry_on = actSubjdays;
                            }
                            else
                            {
                                cie.expiry_on = actDuration;
                            }
                            contextsdce.college_installation_expiry.Add(cie);
                        }
                    }


                    result = contextsdce.SaveChanges();

                    if (result > 0)
                    {
                        return "1";
                    }
                    else
                    {
                        return "-1";
                    }
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "ManageSubjects", "SaveCollegeSubjectDetails", ex.Message, "error");
                    contextsdce.Dispose();
                    throw ex;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }


        public string getCollegeSubjectExpiryDetails(int collegeId, string primaryMac)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeSubjectExpiry> collegeSubjectExpiry = new List<CollegeSubjectExpiry>();
                try
                {
                    collegeSubjectExpiry = (from cm in contextsdce.college_master
                                            join cid in contextsdce.college_installation_details on cm.college_id equals cid.college_id
                                            join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                                            join csm in contextsdce.college_subject_mapping on cm.college_id equals csm.college_id
                                            join sm in contextsdce.subject_master on cie.subject_id equals sm.subject_id
                                            join dm in contextsdce.department_master on cie.department_id equals dm.department_id
                                            where cm.active_status == 1 && csm.subject_id == sm.subject_id && cm.college_id == collegeId && cid.primary_mac == primaryMac
                                            select new CollegeSubjectExpiry
                                            {
                                                collegeId = cm.college_id,
                                                tradeId = dm.department_id,
                                                tradeName = dm.department_name,
                                                subjectId = sm.subject_id,
                                                subjectCode = sm.subject_code,
                                                subjectName = sm.subject_name,
                                                semester = csm.semester,
                                                expiryDate = cie.expiry_on
                                            }).ToList();

                    XDocument xdoc = new XDocument(new XElement("CollegeSubjectExpiry", from cse in collegeSubjectExpiry
                                                                                        select new XElement("CollegeSubjectExpiry",
                                                                                            new XAttribute("collegeId", cse.collegeId),
                                                                                            new XAttribute("tradeId", cse.tradeId),
                                                                                            new XAttribute("tradeName", cse.tradeName),
                                                                                            new XAttribute("subjectId", cse.subjectId),
                                                                                            new XAttribute("subjectCode", cse.subjectCode),
                                                                                            new XAttribute("subjectName", cse.subjectName),
                                                                                            new XAttribute("semester", cse.semester),
                                                                                            new XAttribute("expiryDate", cse.expiryDate)
                                                                                          )));

                    return xdoc.ToString();
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "getCollegeSubjectExpiryDetails", "getCollegeSubjectExpiryDetails", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public string SaveRegistrationWithReference(string userName, string password, string emailId, long mobileNo, int collegeid, string collegeName)
        {

            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var userMater = (from usm in contextsdce.user_master where (usm.email_id == emailId) select usm).FirstOrDefault();
                    JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
                    if (userMater == null)
                    {
                        //Encrypting user Password
                        EncryptionDecryption encrypt = new EncryptionDecryption();
                        var pass = encrypt.encrptpwd(password, true);
                        password = pass;

                        user_master um = new user_master();
                        um.active_status = 0;
                        um.univ_id = 1;
                        um.role_id = 1;
                        um.created_on = DateTime.Now;
                        um.user_name = userName;
                        um.password = password;
                        um.mobile = mobileNo;
                        um.email_id = emailId;
                        um.user_first_name = userName;
                        um.is_first_login = 2;
                        um.collegeid = collegeid;
                        um.collegename = collegeName;
                        contextsdce.user_master.Add(um);


                        int result = contextsdce.SaveChanges();

                        if (result > 0)
                        {
                            var lastinsertedId = um.user_id;
                            //sending Login details to the user email Id
                            int UserID = GetVerificationCodeByMobile(mobileNo, emailId, 1);

                            return jsSerializer.Serialize(lastinsertedId);
                        }
                        else
                        {
                            //return "Registration Failure";
                            return jsSerializer.Serialize("Registration Failure");
                        }
                    }
                    else if (userMater.is_first_login == 2)
                    {
                        return jsSerializer.Serialize("Your Email id is already Registered And Not yet Activated");
                    }
                    else
                    {
                        //return "Mobile Number or Email id is already Exists with us";
                        return jsSerializer.Serialize("Email id is already Exists with us");
                    }
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewUserRegistration", "SaveRegistration", ex.Message, "error");
                    UpdateException updateException = (UpdateException)ex.InnerException;
                    contextsdce.Dispose();
                    return " User Not Registered";

                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public int GetVerificationCodeByMobile(long pMobileNo, string pEmailID, int isSendorResend)
        {
            JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var userdetails = (from userm in contextsdce.user_master where  userm.email_id == pEmailID select userm).FirstOrDefault();

                    if (userdetails != null)
                    {
                        CallSendSMS obj1 = new CallSendSMS();
                        string strPostResponse;
                        string sOTP = string.Empty;
                        if (isSendorResend == 1)
                        {
                            sOTP = obj1.CreateRandomPassword(5);

                            //Delete User Id if Already Exsist
                            user_random_pass delurp = (from del in contextsdce.user_random_pass where del.user_id == userdetails.user_id && del.action_type == 1 select del).FirstOrDefault();
                            if (delurp != null)
                            {
                                contextsdce.user_random_pass.Remove(delurp);
                                contextsdce.SaveChanges();
                            }


                            //Inserting Random password to user_random_pass Generated in verificationcode
                            user_random_pass urp = new user_random_pass();
                            urp.verification_code = sOTP;
                            urp.generated_time = DateTime.Now;
                            urp.action_type = 1;
                            urp.user_id = Convert.ToInt32(userdetails.user_id);
                            contextsdce.user_random_pass.Add(urp);
                            contextsdce.SaveChanges();
                        }
                        else
                        {
                            user_random_pass urpdet = (from urp in contextsdce.user_random_pass where urp.user_id == userdetails.user_id && urp.action_type == 1 select urp).FirstOrDefault();

                            if (urpdet != null)
                            {
                                sOTP = urpdet.verification_code;

                            }
                        }

                        //OTP send to Mobile Number
                      //  strPostResponse = obj1.SendSMS(pMobileNo.ToString().Trim(), "Please enter the OTP :  " + sOTP + "  to complete your Installation process, Infoplus learnengg.com Support", pEmailID);



                        //OTP send to EMail
                        string mbody = MailHelper.EmailBody_OTP("Request Process",  "", sOTP, "");
                        MailHelper.SendMail(pEmailID, "One Time PassWord", mbody);

                        XDocument xdoc = new XDocument(new XElement("OneTimePassword", new XElement("OTP",
                                                          new XAttribute("OneTimePasswrod", sOTP))));


                        return Convert.ToInt32(userdetails.user_id);
                    }
                    else
                    {
                        return (0);
                    }

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewRegistration", "GetVerificationCodeByMobile", ex.Message, "error");
                    contextsdce.Dispose();
                    throw ex;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }

                }
            }
        }

        public string RandomCodeVerification(int userId, string verifyCode)
        {
            JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var codeVerification = (from randomcode in contextsdce.user_random_pass
                                            where randomcode.user_id == userId && randomcode.verification_code == verifyCode
                                            select randomcode);


                    if (codeVerification.Any() == true)
                    {
                        //updating is_first_login and active_status in user_master

                        var userUpdate = (from user_update in contextsdce.user_master
                                          where user_update.user_id == userId
                                          select user_update).FirstOrDefault();

                        userUpdate.is_first_login = 1;
                        userUpdate.active_status = 1;
                        contextsdce.SaveChanges();

                        return jsSerializer.Serialize("Code verified Successfully");
                    }
                    else
                    {
                        return jsSerializer.Serialize("Enter the Correct Verification code");
                    }
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewUserRegistration", "RandomCodeVerification", ex.Message, "error");

                    contextsdce.Dispose();
                    return jsSerializer.Serialize("Enter the Correct Verification code");

                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }

                }
            }
        }

        public string GetUserid(long MobNo, string emailID)
        {
            JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var userdetails = (from userm in contextsdce.user_master where  userm.email_id == emailID select userm).FirstOrDefault();

                    long userID;
                    if (userdetails != null)
                    {
                        userID = userdetails.user_id;

                        if (userID > 0)
                        {
                            return userID.ToString();
                        }
                        else
                        {
                            return "Please Enter valid Email ";
                        }
                    }
                    else
                    {
                        return "Please Enter valid Email";
                    }
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewUserRegistration", "GetUserid", ex.Message, "error");

                    contextsdce.Dispose();
                    return jsSerializer.Serialize("Enter the Correct Verification code");

                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }

                }
            }
        }

        public string CheckLoginDetail(string loginID, string Password)
        {
            checkUserLogin chckLogin = new checkUserLogin();
            long mobile = 0;
            bool result = Int64.TryParse(loginID, out mobile);
            JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    EncryptionDecryption encrypt = new EncryptionDecryption();
                    var pass = encrypt.encrptpwd(Password, true);
                    var userData = (from login in contextsdce.user_master
                                    join cm in contextsdce.college_master on login.collegeid equals cm.college_id
                                    where (login.email_id.Trim() == loginID.Trim()) && login.password.Trim() == pass.Trim()
                                    select new checkUserLogin
                                    {
                                        FirstName = login.user_first_name,
                                        emailId = login.email_id,
                                        roleTypeId = login.role_id,
                                        userId = login.user_id,
                                        isFrstLogin = login.is_first_login,
                                        actveStatus = login.active_status,
                                        mobileNumber = login.mobile,
                                        userName = login.user_name,
                                        collegeName = cm.college_name,
                                        collegeId = login.collegeid,
                                    }).ToList();



                    if (userData.Any() == true)
                    {
                        chckLogin = userData.FirstOrDefault();
                        if (userData.FirstOrDefault().isFrstLogin == 1 && userData.FirstOrDefault().actveStatus == 1)
                        {


                            XDocument xdoc = new XDocument(new XElement("Login", from user in userData
                                                                                 select new XElement("User",
                                                                                       new XAttribute("FirstName", user.FirstName ?? ""),
                                                                                       new XAttribute("EmailId", user.emailId ?? ""),
                                                                                       new XAttribute("MobileNumber", user.mobileNumber),
                                                                                       new XAttribute("RoleTypeId", user.roleTypeId),
                                                                                       new XAttribute("UserID", user.userId),
                                                                                       new XAttribute("IsFirstLogin", user.isFrstLogin),
                                                                                       new XAttribute("ActiveStatus", user.actveStatus),
                                                                                       new XAttribute("userName", user.userName ?? ""),
                                                                                       new XAttribute("collegeName", user.collegeName ?? ""),
                                                                                       new XAttribute("collegeId", user.collegeId)

                                                                                     )));

                            return xdoc.ToString();

                        }
                        else if (userData.FirstOrDefault().isFrstLogin == 2 && userData.FirstOrDefault().actveStatus == 0)
                        {
                            chckLogin.message = "Your Account is Not Activated. Please Activate Your Account";
                        }
                        else
                        {
                            chckLogin.message = "Your Account is Not Active";
                        }

                        return jsSerializer.Serialize(chckLogin.message);
                    }
                    else
                    {

                        chckLogin.message = "The UserName and Password doesn't exists";
                        return jsSerializer.Serialize(chckLogin.message); // "No details for this user You Entered wrong Mobile or EmailId";
                    }

                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewUserRegistration", "CheckLoginDetails", ex.Message, "error");
                    chckLogin.message = "The UserName and Password doesn't exists";

                    return jsSerializer.Serialize(chckLogin.message);
                }
            }
        }

        public string updateCollegeInstallOn(int collegeId, string primaryMac, int departmentID)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    var updateInstalledOn = (from cid in contextsdce.college_installation_details
                                             join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                                             where cid.primary_mac == primaryMac && cie.department_id == departmentID && cid.active_status == 1
                                             select cie).ToList();
                    if (updateInstalledOn != null && updateInstalledOn.Count() > 0)
                    {
                        updateInstalledOn.ForEach(x => x.installed_on = DateTime.Now);
                        int result = contextsdce.SaveChanges();
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "1")));
                        return xdoc.ToString();
                    }
                    else
                    {
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "0")));
                        return xdoc.ToString();
                    }

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "Adminservice", "updateInstitutePassword", ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1")));
                    return xdoc.ToString();
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }

        }
        public List<CollegeList> GetColleges(int CollegeGroupId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeList> college = new List<CollegeList>();
                try
                {
                    if (CollegeGroupId == 0)
                    {
                        college = (from cm in contextsdce.college_master
                                   where cm.active_status == 1
                                   select new CollegeList
                                   {
                                       college_Id = cm.college_id,
                                       college_Name = cm.college_name
                                   }).Distinct().OrderBy(x => x.college_Name).ToList();
                    }
                    else
                    {
                        college = (from cm in contextsdce.college_master
                                   join cgmm in contextsdce.college_group_map on cm.college_id equals cgmm.college_id
                                   join cgm in contextsdce.college_group_master on cgmm.college_group_id equals cgm.college_group_id
                                   where cm.active_status == 1 && cgm.college_group_id == CollegeGroupId
                                   select new CollegeList
                                   {
                                       college_Id = cm.college_id,
                                       college_Name = cm.college_name
                                   }).Distinct().OrderBy(x => x.college_Name).ToList();
                    }

                    return college;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetColleges", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }
        public List<CollegeList> GetColleges(int departmentID, int CollegeGroupId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeList> college = new List<CollegeList>();
                try
                {
                    if (departmentID > 0)
                    {
                        if (CollegeGroupId==0) {
                            
                            college = (from cm in contextsdce.college_master
                                       join csm in contextsdce.college_subject_mapping on cm.college_id equals csm.college_id
                                       where cm.active_status == 1 && csm.department_id == departmentID
                                       select new CollegeList
                                       {
                                           college_Id = cm.college_id,
                                           college_Name = cm.college_code + " - " + cm.college_name
                                       }).Distinct().OrderBy(x => x.college_Name).ToList();
                        }
                        else
                        {
                            college = (from cm in contextsdce.college_master
                                       join csm in contextsdce.college_subject_mapping on cm.college_id equals csm.college_id
                                       join cgmm in contextsdce.college_group_map on cm.college_id equals cgmm.college_id
                                       join cgm in contextsdce.college_group_master on cgmm.college_group_id equals cgm.college_group_id
                                       where cm.active_status == 1 && cgm.college_group_id == CollegeGroupId && csm.department_id == departmentID
                                       select new CollegeList
                                       {
                                           college_Id = cm.college_id,
                                           college_Name = cm.college_name
                                       }).Distinct().OrderBy(x => x.college_Name).ToList();
                        }


                    }
                    else
                    {

                        if (CollegeGroupId == 0)
                        {
                            college = (from cm in contextsdce.college_master
                                   join csm in contextsdce.college_subject_mapping on cm.college_id equals csm.college_id
                                   where cm.active_status == 1 
                                   select new CollegeList
                                   {
                                       college_Id = cm.college_id,
                                       college_Name = cm.college_code + " - " + cm.college_name
                                   }).Distinct().OrderBy(x => x.college_Name).ToList();
                        }
                        else
                        {
                            college = (from cm in contextsdce.college_master                                      
                                       join cgmm in contextsdce.college_group_map on cm.college_id equals cgmm.college_id
                                       join cgm in contextsdce.college_group_master on cgmm.college_group_id equals cgm.college_group_id
                                       where cm.active_status == 1 && cgm.college_group_id == CollegeGroupId 
                                       select new CollegeList
                                       {
                                           college_Id = cm.college_id,
                                           college_Name = cm.college_name
                                       }).Distinct().OrderBy(x => x.college_Name).ToList();
                        }

                    }

                    return college;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetColleges", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public List<SubjectList> GetSubject(int departmentID, int collegeID)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<SubjectList> subjects = new List<SubjectList>();
                try
                {
                    if (departmentID > 0 && collegeID > 0)
                    {
                        subjects = (from sub in contextsdce.subject_master
                                    join csm in contextsdce.college_subject_mapping on sub.subject_id equals csm.subject_id
                                    where sub.active_status == 1 && csm.department_id == departmentID && csm.college_id == collegeID
                                    select new SubjectList
                                    {
                                        subject_Id = sub.subject_id,
                                        subject_Name = sub.subject_code + " - " + sub.subject_name
                                    }).Distinct().OrderBy(x => x.subject_Name).ToList();                        
                    }
                    else if (departmentID > 0 && collegeID == 0)
                    {
                        subjects = (from sub in contextsdce.subject_master
                                    join csm in contextsdce.college_subject_mapping on sub.subject_id equals csm.subject_id
                                    where sub.active_status == 1 && csm.department_id == departmentID 
                                    select new SubjectList
                                    {
                                        subject_Id = sub.subject_id,
                                        subject_Name = sub.subject_code + " - " + sub.subject_name
                                    }).Distinct().OrderBy(x => x.subject_Name).ToList();
                    }
                    else if (departmentID == 0 && collegeID > 0)
                    {
                        subjects = (from sub in contextsdce.subject_master
                                    join csm in contextsdce.college_subject_mapping on sub.subject_id equals csm.subject_id
                                    where sub.active_status == 1 && csm.college_id == collegeID
                                    select new SubjectList
                                    {
                                        subject_Id = sub.subject_id,
                                        subject_Name = sub.subject_code + " - " + sub.subject_name
                                    }).Distinct().OrderBy(x => x.subject_Name).ToList();
                    }
                    else 
                    {
                        subjects = (from sub in contextsdce.subject_master
                                    join csm in contextsdce.college_subject_mapping on sub.subject_id equals csm.subject_id
                                    where sub.active_status == 1 
                                    select new SubjectList
                                    {
                                        subject_Id = sub.subject_id,
                                        subject_Name = sub.subject_code + " - " + sub.subject_name
                                    }).Distinct().OrderBy(x => x.subject_Name).ToList();
                    }
                    return subjects;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetSubject", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public List<SemesterList> GetSemester(int departmentID, int collegeID)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<SemesterList> college = new List<SemesterList>();
                try
                {
                    if (departmentID > 0 && collegeID > 0)
                    {
                        college = (from csm in contextsdce.college_subject_mapping
                                   where csm.department_id == departmentID && csm.college_id == collegeID
                                   select new SemesterList
                                   {
                                       semester = csm.semester ?? 0,
                                       semester_Name = csm.semester == null ? "0" : csm.semester.ToString()
                                   }).Distinct().OrderBy(x => x.semester_Name).ToList();
                    }
                    else if (departmentID == 0 && collegeID > 0)
                    {
                        college = (from csm in contextsdce.college_subject_mapping
                                   where  csm.college_id == collegeID
                                   select new SemesterList
                                   {
                                       semester = csm.semester ?? 0,
                                       semester_Name = csm.semester == null ? "0" : csm.semester.ToString()
                                   }).Distinct().OrderBy(x => x.semester_Name).ToList();
                    }
                    else if (departmentID > 0 && collegeID == 0)
                    {
                        college = (from csm in contextsdce.college_subject_mapping
                                   where csm.department_id == departmentID 
                                   select new SemesterList
                                   {
                                       semester = csm.semester ?? 0,
                                       semester_Name = csm.semester == null ? "0" : csm.semester.ToString()
                                   }).Distinct().OrderBy(x => x.semester_Name).ToList();
                    }
                    else 
                    {
                        college = (from csm in contextsdce.college_subject_mapping                                  
                                   select new SemesterList
                                   {
                                       semester = csm.semester ?? 0,
                                       semester_Name = csm.semester == null ? "0" : csm.semester.ToString()
                                   }).Distinct().OrderBy(x => x.semester_Name).ToList();
                    }
                    return college;

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "AdminService", "GetSemester", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }


        public string SaveCollegeTestSubjectDetails(int collegeId, string primaryMac)
        {
            List<saveCollegeSubjectInstall> saveCollegeSubjectInstall = new List<saveCollegeSubjectInstall>();
            int result = 0;
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    saveCollegeSubjectInstall = (from cm in contextsdce.college_master
                                                 join cid in contextsdce.college_test_installation_details on cm.college_id equals cid.college_id
                                                 join csm in contextsdce.college_subject_test_mapping on cm.college_id equals csm.college_id
                                                 join sm in contextsdce.subject_master on csm.subject_id equals sm.subject_id
                                                 join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                                                 where cm.active_status == 1 && cm.college_id == collegeId && cid.primary_mac == primaryMac
                                                 select new saveCollegeSubjectInstall
                                                 {
                                                     collegeInstallId = cid.college_test_install_id,
                                                     departmentId = dm.department_id,
                                                     subjectId = sm.subject_id,
                                                     activeDurationDays = sm.active_duration_days,
                                                     activeDurationDate = sm.active_duration_date


                                                 }).Distinct().ToList();


                    foreach (var sub in saveCollegeSubjectInstall)
                    {

                        DateTime actDuration = sub.activeDurationDate;
                        DateTime actSubjdays = DateTime.Now.AddDays(sub.activeDurationDays);

                        college_test_installation_expiry cie = new college_test_installation_expiry();
                        cie.college_test_install_id = sub.collegeInstallId;
                        cie.department_id = sub.departmentId;
                        cie.subject_id = sub.subjectId;
                        if (actDuration > actSubjdays)
                        {
                            cie.expiry_on = actSubjdays;
                        }
                        else
                        {
                            cie.expiry_on = actDuration;
                        }
                        contextsdce.college_test_installation_expiry.Add(cie);
                    }


                    result = contextsdce.SaveChanges();

                    if (result > 0)
                    {
                        return "1";
                    }
                    else
                    {
                        return "-1";
                    }
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "SaveCollegeTestSubjectDetails", "SaveCollegeTestSubjectDetails", ex.Message, "error");
                    contextsdce.Dispose();
                    throw ex;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }


        public string getCollegeTestSubjectExpiryDetails(int collegeId, string primaryMac)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeSubjectExpiry> collegeSubjectExpiry = new List<CollegeSubjectExpiry>();
                try
                {
                    collegeSubjectExpiry = (from cm in contextsdce.college_master
                                            join cid in contextsdce.college_test_installation_details on cm.college_id equals cid.college_id
                                            join cie in contextsdce.college_test_installation_expiry on cid.college_test_install_id equals cie.college_test_install_id
                                            join csm in contextsdce.college_subject_test_mapping on cm.college_id equals csm.college_id
                                            join sm in contextsdce.subject_master on cie.subject_id equals sm.subject_id
                                            join dm in contextsdce.department_master on cie.department_id equals dm.department_id
                                            where cm.active_status == 1 && csm.subject_id == sm.subject_id && cm.college_id == collegeId && cid.primary_mac == primaryMac
                                            select new CollegeSubjectExpiry
                                            {
                                                collegeId = cm.college_id,
                                                tradeId = dm.department_id,
                                                tradeName = dm.department_name,
                                                subjectId = sm.subject_id,
                                                subjectCode = sm.subject_code,
                                                subjectName = sm.subject_name,
                                                semester = csm.semester,
                                                expiryDate = cie.expiry_on
                                            }).ToList();

                    XDocument xdoc = new XDocument(new XElement("CollegeSubjectExpiry", from cse in collegeSubjectExpiry
                                                                                        select new XElement("CollegeSubjectExpiry",
                                                                                            new XAttribute("collegeId", cse.collegeId),
                                                                                            new XAttribute("tradeId", cse.tradeId),
                                                                                            new XAttribute("tradeName", cse.tradeName),
                                                                                            new XAttribute("subjectId", cse.subjectId),
                                                                                            new XAttribute("subjectCode", cse.subjectCode),
                                                                                            new XAttribute("subjectName", cse.subjectName),
                                                                                            new XAttribute("semester", cse.semester),
                                                                                            new XAttribute("expiryDate", cse.expiryDate)
                                                                                          )));

                    return xdoc.ToString();
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "getCollegeSubjectExpiryDetails", "getCollegeSubjectExpiryDetails", ex.Message, "error");
                    throw ex;
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }





        public string InsertCollegeTestInstitute(int pCollege_id, string pInstallationCentreName, string pPrimaryMac, int pEnterby)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                using (var transaction = contextsdce.Database.BeginTransaction())
                {
                    try
                    {
                        college_test_installation_details existCid = (from cid in contextsdce.college_test_installation_details where cid.college_id == pCollege_id && cid.primary_mac == pPrimaryMac select cid).FirstOrDefault();
                        if (existCid == null)
                        {

                            //               var chkLicencecount = (from cm in contextsdce.college_master
                            //                                      join cid1 in contextsdce.college_test_installation_details
                            //on cm.college_id equals cid1.college_id
                            //                                      where cm.college_id == pCollege_id
                            //                                      select new { cm.total_license, cid1.primary_mac }).ToList();
                            //if (chkLicencecount.Count == 0 || (chkLicencecount.Count > 0 && chkLicencecount.Count < chkLicencecount[0].total_license))
                            {

                                college_test_installation_details cid = new college_test_installation_details();
                                cid.college_id = pCollege_id;
                                cid.installation_centre_name = pInstallationCentreName;
                                cid.primary_mac = pPrimaryMac;
                                cid.enter_on = DateTime.Now;
                                cid.active_status = 1;
                                cid.enter_by = pEnterby;
                                contextsdce.college_test_installation_details.Add(cid);

                                int result = contextsdce.SaveChanges();
                                transaction.Commit();
                                if (result > 0)
                                {
                                    string res = SaveCollegeTestSubjectDetails(pCollege_id, pPrimaryMac);
                                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "1")));
                                    return xdoc.ToString();
                                }
                                else
                                {
                                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-2")));
                                    return xdoc.ToString();
                                }
                            }
                            //else
                            //{
                            //    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "0")));
                            //    return xdoc.ToString();
                            //}
                        }
                        else
                        {
                            XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "1")));
                            return xdoc.ToString();
                        }

                    }
                    catch (Exception ex)
                    {
                        transaction.Rollback();
                        transaction.Dispose();
                        contextsdce.Dispose();
                        Log.WriteLogMessage(PageName, "AdminService", "InserTestCollegeInstitute", ex.Message, "error");
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1")));
                        return xdoc.ToString(); // Failure
                    }
                    finally
                    {
                        transaction.Dispose();
                        contextsdce.Dispose();
                    }
                }
            }
        }


        #endregion


        /// <summary>
        /// Method for forget password, to send otp to mobile and email
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <returns>Forget password view model</returns>
        public string ForgetPassword(long mobileNo)
        {

            try
            {
                var userDetails = new UserMasterAccess().GetAllUsers();
                if (userDetails.Any(t => t.mobile == mobileNo))
                {
                    var user = userDetails.FirstOrDefault(t => t.mobile == mobileNo);
                    string emailId = user.email_id;
                    int UserID = GetVerificationCodeByMobile(mobileNo, emailId);
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", UserID), new XAttribute("ResultMessage", "OTP send to your registered mobile number.")));
                    return xdoc.ToString();
                }
                else
                {
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "0"), new XAttribute("ResultMessage", "Mobile Number doesnot registered with us.")));
                    return xdoc.ToString();
                }
            }
            catch (Exception Ex)
            {
                Log.WriteLogMessage(PageName, "ForgetPassword", "SendForgetPassword", Ex.Message, "error");
                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1"), new XAttribute("ResultMessage", "Please try again later.")));
                return xdoc.ToString();
            }

        }


        /// <summary>
        /// Method for forget password, to send otp to mobile and email
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <returns>Forget password view model</returns>
        public string ForgetPasswordCollegeAdmin(long mobileNo)
        {

            try
            {
                var collegeAdminDetails = new UserMasterAccess().GetCollegeAdminUsers();
                if (collegeAdminDetails.Any(t => t.college_mobile == mobileNo))
                {
                    var user = collegeAdminDetails.FirstOrDefault(t => t.college_mobile == mobileNo);
                    string emailId = user.college_email;
                    int UserID = GetVerificationCodeByMobileCollegeAdmin(mobileNo, emailId);
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", UserID), new XAttribute("ResultMessage", "OTP send to your registered mobile number.")));
                    return xdoc.ToString();
                }
                else
                {
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "0"), new XAttribute("ResultMessage", "Mobile Number doesnot registered with us.")));
                    return xdoc.ToString();
                }
            }
            catch (Exception Ex)
            {
                Log.WriteLogMessage(PageName, "ForgetPassword", "SendForgetPassword", Ex.Message, "error");
                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1"), new XAttribute("ResultMessage", "Please try again later.")));
                return xdoc.ToString();
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="MobNo"></param>
        /// <param name="emailID"></param>
        /// <returns></returns>
        public int GetVerificationCodeByMobile(long MobNo, string emailID)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var userdetails = (from userm in contextsdce.user_master where userm.email_id == emailID select userm).FirstOrDefault();

                    if (userdetails != null)
                    {

                        CallSendSMS obj1 = new CallSendSMS();
                        string strPostResponse;
                        string sOTP = obj1.CreateRandomPassword(5);

                        //Delete User Id if Already Exsist
                        user_random_pass delurp = (from del in contextsdce.user_random_pass where del.user_id == userdetails.user_id && del.action_type == 1 select del).FirstOrDefault();
                        if (delurp != null)
                        {
                            //contextsdce.user_random_pass.DeleteObject(delurp);
                            contextsdce.user_random_pass.Remove(delurp);
                            contextsdce.SaveChanges();
                        }


                        //Inserting Random password to user_random_pass Generated in verificationcode
                        user_random_pass urp = new user_random_pass();
                        urp.verification_code = sOTP;
                        urp.generated_time = DateTime.Now;
                        urp.action_type = 1;
                        urp.user_id = Convert.ToInt32(userdetails.user_id);
                        //contextsdce.AddTouser_random_pass(urp);
                        contextsdce.user_random_pass.Add(urp);
                        contextsdce.SaveChanges();


                        //OTP send to Mobile Number
                        try
                        {
                          //  strPostResponse = obj1.SendSMS(MobNo.ToString().Trim(), "Please enter OTP :  " + sOTP + "  to Complete the Registration Process , 3DM ClassRoom - Support", "test");

                        }
                        catch (Exception ex1)
                        {
                            Log.WriteLogMessage(PageName, "NewUserRegistration", "GetVerificationCode", ex1.Message, "error");
                            //throw;
                        }

                        //OTP send to EMail
                        string mbody = MailHelper.EmailBody_OTP("Request Process", "", sOTP, "");
                        MailHelper.SendMail(emailID, "One Time PassWord", mbody);

                        //MailHelper.SendMail("infoplus.otp@gmail.com", userdetails.collegename.ToString().Trim() + " - One Time PassWord For Registration", "One Time Password For:    " + userdetails.email_id.ToString() + " and his/her mobile number is : " + userdetails.mobile.ToString().Trim() + " and OTP is : " + "<b>" + sOTP + " " + "</b>" + " </br></br></br></br> By </br><b> LearnEngg Team</b>");


                        //return Convert.ToInt32(userdetails.user_id);

                        return 1;
                    }
                    else
                    {
                        return 0;
                    }


                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewUserRegistration", "GetVerificationCode", ex.Message, "error");


                    return (0);

                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }
        /// <summary>
        /// Method For check the verification code(OTP) from the user using OTP code For Order Placed Conformation
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="otpCode"></param>
        /// <returns></returns>
        public int GetVerificationCodeByMobileCollegeAdmin(long MobNo, string emailID)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var collegeDetails = (from cm in contextsdce.college_master where cm.college_email == emailID select cm).FirstOrDefault();

                    if (collegeDetails != null)
                    {

                        CallSendSMS obj1 = new CallSendSMS();
                        string strPostResponse;
                        string sOTP = obj1.CreateRandomPassword(5);

                        //Delete User Id if Already Exsist
                        user_random_pass_college delurp = (from del in contextsdce.user_random_pass_college where del.college_id == collegeDetails.college_id && del.action_type == 1 select del).FirstOrDefault();
                        if (delurp != null)
                        {
                            //contextsdce.user_random_pass.DeleteObject(delurp);
                            contextsdce.user_random_pass_college.Remove(delurp);
                            contextsdce.SaveChanges();
                        }


                        //Inserting Random password to user_random_pass Generated in verificationcode
                        user_random_pass_college urp = new user_random_pass_college();
                        urp.verification_code = sOTP;
                        urp.generated_time = DateTime.Now;
                        urp.action_type = 1;
                        urp.college_id = Convert.ToInt32(collegeDetails.college_id);
                        //contextsdce.AddTouser_random_pass(urp);
                        contextsdce.user_random_pass_college.Add(urp);
                        contextsdce.SaveChanges();


                        //OTP send to Mobile Number
                        try
                        {
                          //  strPostResponse = obj1.SendSMS(MobNo.ToString().Trim(), "Please enter OTP :  " + sOTP + "  to Complete the Registration Process , 3DM ClassRoom - Support", "test");

                        }
                        catch (Exception ex1)
                        {
                            Log.WriteLogMessage(PageName, "NewUserRegistration", "GetVerificationCode", ex1.Message, "error");
                        }

                        //OTP send to EMail
                        string mbody = MailHelper.EmailBody_OTP("Request Process",  "", sOTP, "");
                        MailHelper.SendMail(emailID, "One Time PassWord", mbody);

                        //MailHelper.SendMail("infoplus.otp@gmail.com", userdetails.collegename.ToString().Trim() + " - One Time PassWord For Registration", "One Time Password For:    " + userdetails.email_id.ToString() + " and his/her mobile number is : " + userdetails.mobile.ToString().Trim() + " and OTP is : " + "<b>" + sOTP + " " + "</b>" + " </br></br></br></br> By </br><b> LearnEngg Team</b>");


                        //return Convert.ToInt32(userdetails.user_id);

                        return 1;
                    }
                    else
                    {
                        return 0;
                    }


                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewUserRegistration", "GetVerificationCode", ex.Message, "error");


                    return (0);

                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }


        public bool GetRandomCode(long userId, string code)
        {
            bool isValid = false;

            var userCodes = new UserMasterAccess().GetAllRandomCodes();
            if (userCodes.Any(t => t.user_id == userId && t.verification_code == code))
            {
                isValid = true;
            }

            return isValid;
        }

        public bool GetRandomCode_CollegeAdmin(long collegeId, string code)
        {
            bool isValid = false;

            var userCodes = new UserMasterAccess().GetAllRandomCodes_CollegeAdmin();
            if (userCodes.Any(t => t.college_id == collegeId && t.verification_code == code))
            {
                isValid = true;
            }

            return isValid;
        }

        // password reset

        /// <summary>
        /// Method for Reset Password
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <param name="otpCode">string</param>
        /// <param name="newPassword">string</param>
        /// <returns>Foret password model</returns>
        public string ResetPassword(long mobileNo, string otpCode, string newPassword)
        {
            ForgetPasswordModel resetModel = new ForgetPasswordModel();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    //var userDetails = new UserMasterAccess().GetAllUsers();
                    var userDetails = (from usm in contextsdce.user_master where usm.mobile == mobileNo select usm);
                    // if (userDetails.Any(t => t.mobile == mobileNo))
                    if (userDetails.Any() == true)
                    {
                        var user = userDetails.FirstOrDefault(t => t.mobile == mobileNo);
                        if (GetRandomCode(user.user_id, otpCode))
                        {
                            var password = new EncryptionDecryption().encrptpwd(newPassword, true);
                            var isUpdated = new UserMasterAccess().UpdatePassword(user.user_id, password);
                            if (isUpdated)
                            {

                                //new Notification().PasswordChange(user.user_first_name, user.email_id);
                                string mbody = MailHelper.EmailBody_PasswordChange(user.user_first_name, user.email_id);
                                MailHelper.SendMail(user.email_id, "Password changed successfully.", mbody);

                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", user.user_id), new XAttribute("Result", "Password changed successfully.")));
                                return xdoc.ToString();
                            }
                            else
                            {
                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "0"), new XAttribute("Result", "Password doesnot changed.Please try again later.")));
                                return xdoc.ToString();
                            }
                        }
                        else
                        {
                            XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "-2"), new XAttribute("Result", "OTP code doesnot match.Please enter valid code.")));
                            return xdoc.ToString();
                        }
                    }
                    else
                    {
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "-3"), new XAttribute("Result", "Mobile Number doesnot registered with us.")));
                        return xdoc.ToString();
                    }


                }
                catch (Exception Ex)
                {
                    Log.WriteLogMessage(PageName, "ResetPassword", "CallResetPassword", Ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "-1"), new XAttribute("Result", "Error")));
                    return xdoc.ToString();
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }
        /// <summary>
        /// Method for Reset Password
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <param name="otpCode">string</param>
        /// <param name="newPassword">string</param>
        /// <returns>Foret password model</returns>
        public string ResetPasswordCollegeAdmin(long mobileNo, string otpCode, string newPassword)
        {
            ForgetPasswordModel resetModel = new ForgetPasswordModel();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    //var userDetails = new UserMasterAccess().GetAllUsers();
                    var userDetails = (from usm in contextsdce.college_master where usm.college_mobile == mobileNo select usm);
                    // if (userDetails.Any(t => t.mobile == mobileNo))
                    if (userDetails.Any() == true)
                    {
                        var college = userDetails.FirstOrDefault(t => t.college_mobile == mobileNo);
                        if (GetRandomCode_CollegeAdmin(college.college_id, otpCode))
                        {
                            var password = new EncryptionDecryption().encrptpwd(newPassword, true);
                            var isUpdated = new UserMasterAccess().UpdatePasswordCollegeAdmin(college.college_id, password);
                            if (isUpdated)
                            {

                                //new Notification().PasswordChange(user.user_first_name, user.email_id);
                                string mbody = MailHelper.EmailBody_PasswordChange(college.college_name, college.college_email);
                                MailHelper.SendMail(college.college_email, "Password changed successfully.", mbody);

                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", college.college_id), new XAttribute("Result", "Password changed successfully.")));
                                return xdoc.ToString();
                            }
                            else
                            {
                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "0"), new XAttribute("Result", "Password doesnot changed.Please try again later.")));
                                return xdoc.ToString();
                            }
                        }
                        else
                        {
                            XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "-2"), new XAttribute("Result", "OTP code doesnot match.Please enter valid code.")));
                            return xdoc.ToString();
                        }
                    }
                    else
                    {
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "-3"), new XAttribute("Result", "Mobile Number doesnot registered with us.")));
                        return xdoc.ToString();
                    }


                }
                catch (Exception Ex)
                {
                    Log.WriteLogMessage(PageName, "ResetPasswordCollegeAdmin", "ResetPasswordCollegeAdmin", Ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "-1"), new XAttribute("Result", "Error")));
                    return xdoc.ToString();
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }


        /// <summary>
        /// Method for Reset Password
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <param name="otpCode">string</param>
        /// <param name="newPassword">string</param>
        /// <returns>Foret password model</returns>
        public string ResetPasswordEmail(string Email, string otpCode, string newPassword)
        {
            ForgetPasswordModel resetModel = new ForgetPasswordModel();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    //var userDetails = new UserMasterAccess().GetAllUsers();
                    var userDetails = (from usm in contextsdce.user_master where usm.email_id == Email select usm);
                    // if (userDetails.Any(t => t.mobile == mobileNo))
                    if (userDetails.Any() == true)
                    {
                        var user = userDetails.FirstOrDefault(t => t.email_id == Email);
                        if (GetRandomCode(user.user_id, otpCode))
                        {
                            var password = new EncryptionDecryption().encrptpwd(newPassword, true);
                            var isUpdated = new UserMasterAccess().UpdatePassword(user.user_id, password);
                            if (isUpdated)
                            {

                                //new Notification().PasswordChange(user.user_first_name, user.email_id);
                                string mbody = MailHelper.EmailBody_PasswordChange(user.user_first_name, user.email_id);
                                MailHelper.SendMail(user.email_id, "Password changed successfully.", mbody);

                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", user.user_id), new XAttribute("Result", "Password changed successfully.")));
                                return xdoc.ToString();
                            }
                            else
                            {
                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "0"), new XAttribute("Result", "Password doesnot changed.Please try again later.")));
                                return xdoc.ToString();
                            }
                        }
                        else
                        {
                            XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "-2"), new XAttribute("Result", "OTP code doesnot match.Please enter valid code.")));
                            return xdoc.ToString();
                        }
                    }
                    else
                    {
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "-3"), new XAttribute("Result", "Mobile Number doesnot registered with us.")));
                        return xdoc.ToString();
                    }


                }
                catch (Exception Ex)
                {
                    Log.WriteLogMessage(PageName, "ResetPassword", "CallResetPassword", Ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "-1"), new XAttribute("Result", "Error")));
                    return xdoc.ToString();
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }
        /// <summary>
        /// Method for Reset Password
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <param name="otpCode">string</param>
        /// <param name="newPassword">string</param>
        /// <returns>Foret password model</returns>
        public string ResetPasswordCollegeAdminEmail(string Email, string otpCode, string newPassword)
        {
            ForgetPasswordModel resetModel = new ForgetPasswordModel();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    //var userDetails = new UserMasterAccess().GetAllUsers();
                    var userDetails = (from usm in contextsdce.college_master where usm.college_email == Email select usm);
                    // if (userDetails.Any(t => t.mobile == mobileNo))
                    if (userDetails.Any() == true)
                    {
                        var college = userDetails.FirstOrDefault(t => t.college_email == Email);
                        if (GetRandomCode_CollegeAdmin(college.college_id, otpCode))
                        {
                            var password = new EncryptionDecryption().encrptpwd(newPassword, true);
                            var isUpdated = new UserMasterAccess().UpdatePasswordCollegeAdmin(college.college_id, password);
                            if (isUpdated)
                            {

                                //new Notification().PasswordChange(user.user_first_name, user.email_id);
                                string mbody = MailHelper.EmailBody_PasswordChange(college.college_name, college.college_email);
                                MailHelper.SendMail(college.college_email, "Password changed successfully.", mbody);

                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", college.college_id), new XAttribute("Result", "Password changed successfully.")));
                                return xdoc.ToString();
                            }
                            else
                            {
                                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "0"), new XAttribute("Result", "Password doesnot changed.Please try again later.")));
                                return xdoc.ToString();
                            }
                        }
                        else
                        {
                            XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "-2"), new XAttribute("Result", "OTP code doesnot match.Please enter valid code.")));
                            return xdoc.ToString();
                        }
                    }
                    else
                    {
                        XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "-3"), new XAttribute("Result", "Mobile Number doesnot registered with us.")));
                        return xdoc.ToString();
                    }


                }
                catch (Exception Ex)
                {
                    Log.WriteLogMessage(PageName, "ResetPasswordCollegeAdmin", "ResetPasswordCollegeAdmin", Ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("CollegeID", "-1"), new XAttribute("Result", "Error")));
                    return xdoc.ToString();
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }



        /// <summary>
        /// Method for forget password, to send otp to mobile and email
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <returns>Forget password view model</returns>
        public string ForgetPasswordEmail(string Email)
        {

            try
            {
                var userDetails = new UserMasterAccess().GetAllUsers();
                if (userDetails.Any(t => t.email_id == Email))
                {
                    var user = userDetails.FirstOrDefault(t => t.email_id == Email);
                    string emailId = user.email_id;
                    long mobileNo = user.mobile;
                    int UserID = GetVerificationCodeByMobile(mobileNo, emailId);
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", UserID), new XAttribute("ResultMessage", "OTP send to your registered mobile number.")));
                    return xdoc.ToString();
                }
                else
                {
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("userID", "0"), new XAttribute("ResultMessage", "Mobile Number doesnot registered with us.")));
                    return xdoc.ToString();
                }
            }
            catch (Exception Ex)
            {
                Log.WriteLogMessage(PageName, "ForgetPassword", "SendForgetPassword", Ex.Message, "error");
                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1"), new XAttribute("ResultMessage", "Please try again later.")));
                return xdoc.ToString();
            }

        }


        /// <summary>
        /// Method for forget password, to send otp to mobile and email
        /// </summary>
        /// <param name="mobileNo">long</param>
        /// <returns>Forget password view model</returns>
        public string ForgetPasswordCollegeAdminEmail(string Email)
        {

            try
            {
                var collegeAdminDetails = new UserMasterAccess().GetCollegeAdminUsers();
                if (collegeAdminDetails.Any(t => t.college_email == Email))
                {
                    var user = collegeAdminDetails.FirstOrDefault(t => t.college_email == Email);
                    string emailId = user.college_email;
                    long mobileNo = (long)user.college_mobile;
                    int UserID = GetVerificationCodeByMobileCollegeAdmin(mobileNo, emailId);
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", UserID), new XAttribute("ResultMessage", "OTP send to your registered email.")));
                    return xdoc.ToString();
                }
                else
                {
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "0"), new XAttribute("ResultMessage", "Email doesnot registered with us.")));
                    return xdoc.ToString();
                }
            }
            catch (Exception Ex)
            {
                Log.WriteLogMessage(PageName, "ForgetPassword", "SendForgetPassword", Ex.Message, "error");
                XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1"), new XAttribute("ResultMessage", "Please try again later.")));
                return xdoc.ToString();
            }

        }


        public string RemoveTradeSemesterLicense(int pCollegeId, string pPrimaryMac, string pDepartmentSemester)
        {
            JavaScriptSerializer jsSerializer = new JavaScriptSerializer();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    string[] DeptSem = pDepartmentSemester.ToString().Split(',');
                    int pDepartmentId = 0, pSemester = 0 , pSubjectId = 0 ;
                    int resultcount = 0, count = 0;
                    foreach (string strDeptSem in DeptSem)
                    {
                        count++;
                        string[] DeptSemester = strDeptSem.ToString().Split('-');
                        pDepartmentId = Convert.ToInt32(DeptSemester[0]);
                        pSemester = Convert.ToInt32(DeptSemester[1]);
                        pSubjectId = Convert.ToInt32(DeptSemester[2]);

                        var CollegeInstallID = (from cid in contextsdce.college_installation_details
                                                where cid.primary_mac == pPrimaryMac && cid.college_id == pCollegeId
                                                select cid.college_install_id).FirstOrDefault();

                        contextsdce.college_installation_expiry.RemoveRange(contextsdce.college_installation_expiry.Where(x => x.college_install_id == CollegeInstallID && x.department_id == pDepartmentId && x.semester == pSemester && x.subject_id == pSubjectId ));  
                        int result = contextsdce.SaveChanges();
                        resultcount += result > 0 ? 1 : 0;


                    }
                    if (resultcount == count)
                    {

                    }
                    XDocument xdoc = new XDocument(new XElement("RemoveLicenseResult", new XElement("RemoveLicense",
                                                          new XAttribute("Result", resultcount))));
                    return xdoc.ToString();
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "NewRegistration", "GetVerificationCodeByMobile", ex.Message, "error");
                    contextsdce.Dispose();
                    throw ex;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }

                }
            }
        }

        /// <summary>
        /// Gets the college depart license used counts.
        /// </summary>
        /// <param name="collegeId">The college identifier.</param>
        /// <param name="departmentId">The department identifier.</param>
        /// <returns></returns>
        public int getCollegeDepartLicenseUsedCounts(int collegeId, int departmentId)
        {
            int chkExistLicense = 0;
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeTotalLicense> collegeTotalLicense = new List<CollegeTotalLicense>();
                try
                {
                    
                    //var chkTotalLicense = (from csm in contextsdce.college_subject_mapping
                    //                       join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                    //                       join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                    //                       where csm.active_status == 1 && cid.active_status == 1 //&& cie.college_installation_expiry_id ==null
                    //                      && csm.college_id == collegeId && csm.department_id == departmentId
                    //                       select csm.total_license).FirstOrDefault();

                    chkExistLicense = (from csm in contextsdce.college_subject_mapping
                                           join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                                           join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                                           join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                                           where csm.active_status == 1 && cid.active_status == 1
                                           && cie.department_id == csm.department_id && cie.semester == csm.semester && cie.subject_id == csm.subject_id
                                           && csm.college_id == collegeId && csm.department_id == departmentId
                                           select cie.college_install_id).Distinct().Count();                                

                  
                    

                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "SaveCollegeTradeSemSubjectDetails", "SaveCollegeTradeSemSubjectDetails", ex.Message, "error");
                   
                }
                finally
                {
                    contextsdce.Dispose();
                }

                return chkExistLicense;
            }
        }


        /// <summary>
        /// Gets the college depart license used counts.
        /// </summary>
        /// <param name="collegeId">The college identifier.</param>
        /// <param name="departmentId">The department identifier.</param>
        /// <returns></returns>
        public int getCollegeDepartSubjectsLicenseUsedCounts(int collegeId, int departmentId, int semester, int subjectId)
        {
            int chkExistLicense = 0;
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeTotalLicense> collegeTotalLicense = new List<CollegeTotalLicense>();
                try
                {

                    //var chkTotalLicense = (from csm in contextsdce.college_subject_mapping
                    //                       join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                    //                       join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                    //                       where csm.active_status == 1 && cid.active_status == 1 //&& cie.college_installation_expiry_id ==null
                    //                      && csm.college_id == collegeId && csm.department_id == departmentId
                    //                       select csm.total_license).FirstOrDefault();

                    chkExistLicense = (from csm in contextsdce.college_subject_mapping
                                       join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                                       join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                                       join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                                       where csm.active_status == 1 && cid.active_status == 1
                                       && cie.department_id == csm.department_id && cie.semester == csm.semester && cie.subject_id == csm.subject_id
                                       && csm.college_id == collegeId && csm.department_id == departmentId
                                       && csm.semester == semester && csm.subject_id == subjectId
                                       select cie.college_install_id).Distinct().Count();




                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "SaveCollegeTradeSemSubjectDetails", "SaveCollegeTradeSemSubjectDetails", ex.Message, "error");

                }
                finally
                {
                    contextsdce.Dispose();
                }

                return chkExistLicense;
            }
        }


        public string getCollegeTotalLicenseDetails(int collegeId)
        {
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                List<CollegeTotalLicense> collegeTotalLicense = new List<CollegeTotalLicense>();
                try
                {
                 
                    var chkTotalLicense = (from csm in contextsdce.college_subject_mapping
                                           join sub in contextsdce.subject_master on csm.subject_id equals sub.subject_id
                                           join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                                          // join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                                           //join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id into lftcie
                                           //from cie in lftcie.Where(x => x.department_id == csm.department_id && x.semester == csm.semester).DefaultIfEmpty()
                                           where csm.active_status == 1  //&& cie.college_installation_expiry_id ==null
                                           && csm.college_id == collegeId
                                           group new { csm,  dm } by new { csm.department_id, dm.department_name, csm.semester,csm.subject_id, sub.subject_name, csm.total_license } into license

                                           select new CollegeTotalLicense
                                           {
                                               tradeId = license.Key.department_id,
                                               tradeName = license.Key.department_name,
                                               semester = license.Key.semester,
                                               subjectId = license.Key.subject_id??0,
                                               subjectName = license.Key.subject_name,
                                               UsedLicense = 0,
                                               TotalLicense = license.Key.total_license,
                                               OrderBy = license.Select(x => x.dm.visuals).FirstOrDefault()
                                           }
                                    )
                                    .ToList();
                    var chkExistLicense = (from csm in contextsdce.college_subject_mapping
                                           join sub in contextsdce.subject_master on csm.subject_id equals sub.subject_id
                                           join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                                           join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                                           join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                                           where csm.active_status == 1 && cid.active_status == 1
                                           && cie.department_id == csm.department_id  && cie.semester == csm.semester && cie.subject_id == csm.subject_id
                                           && csm.college_id == collegeId
                                           group new { csm, cid, dm, cie } by new { cie.department_id, dm.department_name, cie.semester, cie.subject_id, sub.subject_name } into license  // cie.semester,

                                           select new CollegeTotalLicense
                                           {
                                               tradeId = license.Key.department_id,
                                               tradeName = license.Key.department_name,
                                               semester = license.Key.semester,
                                               subjectId = license.Key.subject_id,
                                               subjectName = license.Key.subject_name,
                                               UsedLicense = license.Select(x => x.cie.college_install_id).Distinct().Count(),
                                               TotalLicense = license.Select(y=>y.csm.total_license).FirstOrDefault(),
                                               OrderBy = license.Select(x => x.dm.visuals).FirstOrDefault()
                                           }
                                  )
                                  .ToList();

                    collegeTotalLicense = chkTotalLicense.Concat(chkExistLicense)
                                           .GroupBy(x => new { x.tradeId, x.tradeName, x.semester, x.subjectId, x.subjectName, x.TotalLicense })  //  x.semester,
                                                            .Select(g => new CollegeTotalLicense
                                                            {
                                                                tradeId = g.Key.tradeId,
                                                                tradeName = g.Key.tradeName,
                                                                semester = g.Key.semester,
                                                                subjectId = g.Key.subjectId,
                                                                subjectName = g.Key.subjectName,
                                                                UsedLicense = g.Sum(x => x.UsedLicense),
                                                                TotalLicense = g.Key.TotalLicense,
                                                                OrderBy = g.Select(p => p.OrderBy).FirstOrDefault()
                                                            }).ToList();

                    XDocument xdoc = new XDocument(new XElement("collegeTotalLicense", from ctl in collegeTotalLicense orderby ctl.OrderBy
                                                                                       select new XElement("CollegeTotalLicense",
                                                                                                 new XAttribute("tradeId", ctl.tradeId),
                                                                                                 new XAttribute("TradeName", ctl.tradeName),
                                                                                                 new XAttribute("Semester", ctl.semester),
                                                                                                 new XAttribute("SubjectId", ctl.subjectId),
                                                                                                  new XAttribute("SubjectName", ctl.subjectName),
                                                                                                 new XAttribute("UsedLicense", ctl.UsedLicense),
                                                                                                 new XAttribute("TotalLicense", ctl.TotalLicense)
                                                                                               )));

                   

                    return xdoc.ToString();
                }
                catch (Exception ex)
                {
                    contextsdce.Dispose();
                    Log.WriteLogMessage(PageName, "SaveCollegeTradeSemSubjectDetails", "SaveCollegeTradeSemSubjectDetails", ex.Message, "error");
                    XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1"), new XAttribute("ResultMessage", "Please try again later.")));
                    return xdoc.ToString();
                }
                finally
                {
                    contextsdce.Dispose();
                }
            }
        }

        public string SaveCollegeTradeSemSubjects(int pCollegeId, string pPrimaryMac, string pDepartmentSemester)
        {
            List<saveCollegeSubjectInstall> saveCollegeSubjectInstall = new List<saveCollegeSubjectInstall>();
            int result = 0;
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    string[] DeptSem = pDepartmentSemester.ToString().Split(',');
                    int pDepartmentId = 0, pSubjectId = 0, pSemester = 0;


                    List<SuccessDeptSemester> resSDS = new List<SuccessDeptSemester>();
                    List<FailureDeptSemester> resFDS = new List<FailureDeptSemester>();

                    foreach (string strDeptSem in DeptSem)
                    {
                        string[] DeptSemester = strDeptSem.ToString().Split('-');
                        pDepartmentId = Convert.ToInt32(DeptSemester[0]);
                        pSemester = Convert.ToInt32(DeptSemester[1]);
                        pSubjectId = Convert.ToInt32(DeptSemester[2]);

                        SuccessDeptSemester sds = new SuccessDeptSemester();
                        FailureDeptSemester fds = new FailureDeptSemester();

                        var TotalLicense = (from csm in contextsdce.college_subject_mapping
                                            where csm.college_id == pCollegeId && csm.department_id == pDepartmentId  && csm.semester == pSemester && csm.subject_id == pSubjectId
                                            select csm.total_license).FirstOrDefault();

                        var chkAvailLicense = (from cid in contextsdce.college_installation_details
                                               join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                                               where cid.college_id == pCollegeId && cie.department_id == pDepartmentId && cie.semester == pSemester && cie.subject_id == pSubjectId
                                               group new { cie } by new { cid.college_id } into license
                                               select new
                                               {
                                                   installCount = license.Select(x => new { x.cie.college_install_id }).Distinct().Count(),
                                               }).FirstOrDefault();
                        if (chkAvailLicense == null || (chkAvailLicense != null && chkAvailLicense.installCount < TotalLicense))
                        {
                            var chkExist = (from csm in contextsdce.college_subject_mapping
                                            join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                                            join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                                            where cie.department_id == csm.department_id && cie.semester == csm.semester && csm.subject_id == cie.subject_id
                                             && csm.active_status == 1 && cid.active_status == 1
                                            && csm.college_id == pCollegeId && csm.department_id == pDepartmentId && cid.primary_mac == pPrimaryMac && csm.semester == pSemester && csm.subject_id == pSubjectId
                                            group new { csm, cie } by new { csm.department_id, csm.semester, csm.college_id } into license
                                            select new
                                            {
                                                installCount = license.Select(x => x.cie.college_install_id).Distinct().Count(),
                                                totalLicense = license.Select(x => x.csm.total_license).Distinct().Count()
                                            }).FirstOrDefault();


                            //var chkTotalLicence = (from cm in contextsdce.college_master
                            //                       join cid in contextsdce.college_installation_details on cm.college_id equals cid.college_id
                            //                       join csm in contextsdce.college_subject_mapping on cm.college_id equals csm.college_id
                            //                       join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id into lftcie
                            //                       from cie in lftcie.DefaultIfEmpty()
                            //                       where cm.active_status == 1 && csm.active_status == 1 && cid.active_status == 1
                            //                       && cie.department_id == csm.department_id && cie.semester == csm.semester && csm.subject_id==cie.subject_id
                            //                       && cm.college_id == pCollegeId && cid.primary_mac == pPrimaryMac
                            //                       && csm.department_id == pDepartmentId && csm.semester == pSemester
                            //                       group new { csm, cie } by new { csm.department_id, csm.semester, csm.college_id } into license
                            //                       select new
                            //                       {
                            //                           installCount = license.Select(x => x.cie.college_install_id).Distinct().Count(),
                            //                           totalLicense = license.Select(x => x.csm.total_license).Distinct().Count()
                            //                       }).FirstOrDefault();

                            if (chkExist == null)
                            {
                                var daysnull = DateTime.Now.AddDays(1);

                                saveCollegeSubjectInstall = (from cm in contextsdce.college_master
                                                             join cid in contextsdce.college_installation_details on cm.college_id equals cid.college_id
                                                             join csm in contextsdce.college_subject_mapping on cm.college_id equals csm.college_id
                                                             join sm in contextsdce.subject_master on csm.subject_id equals sm.subject_id
                                                             join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                                                             where cm.active_status == 1 && cm.college_id == pCollegeId && cid.primary_mac == pPrimaryMac
                                                             && csm.department_id == pDepartmentId  && csm.semester == pSemester && csm.subject_id == pSubjectId
                                                             select new saveCollegeSubjectInstall
                                                             {
                                                                 collegeInstallId = cid.college_install_id,
                                                                 departmentId = dm.department_id,
                                                                 subjectId = sm.subject_id,
                                                                 activeDurationDays =csm.active_duration_days??1,
                                                                 activeDurationDate = csm.active_duration_date ?? daysnull,
                                                                 semester = csm.semester

                                                             }).Distinct().ToList();

                                if (saveCollegeSubjectInstall.Count > 0)
                                {
                                    foreach (var sub in saveCollegeSubjectInstall)
                                    {

                                        DateTime actDuration = sub.activeDurationDate;
                                        DateTime actSubjdays = DateTime.Now.AddDays(sub.activeDurationDays);

                                        college_installation_expiry cie = new college_installation_expiry();
                                        cie.college_install_id = sub.collegeInstallId;
                                        cie.department_id = sub.departmentId;
                                        cie.subject_id = sub.subjectId;
                                        cie.semester = sub.semester;
                                        if (actDuration > actSubjdays)
                                        {
                                            cie.expiry_on = actSubjdays;
                                        }
                                        else
                                        {
                                            cie.expiry_on = actDuration;
                                        }
                                        contextsdce.college_installation_expiry.Add(cie);
                                    }

                                    result = contextsdce.SaveChanges();

                                    if (result > 0)
                                    {
                                        //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "1")));
                                        //return xdoc.ToString();
                                        sds.departmentId = pDepartmentId;
                                        sds.semester = pSemester;
                                        sds.subjectId = pSubjectId;
                                        sds.message = "success";
                                        resSDS.Add(sds);
                                    }
                                    else
                                    {
                                        //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-1")));
                                        //return xdoc.ToString();
                                        fds.departmentId = pDepartmentId;
                                        fds.semester = pSemester;
                                        fds.subjectId = pSubjectId;
                                        fds.message = "failure";
                                        resFDS.Add(fds);
                                    }
                                }
                                else
                                {
                                    //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "College is not registered with us")));
                                    //return xdoc.ToString();
                                    fds.departmentId = pDepartmentId;
                                    fds.semester = pSemester;
                                    fds.subjectId = pSubjectId;
                                    fds.message = "College/Department/Semester is not mapped with us";
                                    resFDS.Add(fds);
                                    break;
                                }

                            }
                            else if (chkExist.installCount > 0)
                            {
                                //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "Already installed")));
                                //return xdoc.ToString();
                                fds.departmentId = pDepartmentId;
                                fds.semester = pSemester;
                                fds.subjectId = pSubjectId;
                                fds.message = "Already installed";
                                resFDS.Add(fds);
                            }
                            else if (chkExist.totalLicense >= TotalLicense)
                            {
                                //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "Reached Total License")));
                                //return xdoc.ToString();
                                fds.departmentId = pDepartmentId;
                                fds.semester = pSemester;
                                fds.subjectId = pSubjectId;
                                fds.message = "Reached Total License";
                                resFDS.Add(fds);
                            }
                            else
                            {
                                //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-2")));
                                //return xdoc.ToString();
                                fds.departmentId = pDepartmentId;
                                fds.semester = pSemester;
                                fds.subjectId = pSubjectId;
                                fds.message = "failure";
                                resFDS.Add(fds);
                            }
                        }
                        else if (chkAvailLicense.installCount >= TotalLicense)
                        {
                            //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "Reached Total License")));
                            //return xdoc.ToString();
                            fds.departmentId = pDepartmentId;
                            fds.semester = pSemester;
                            fds.subjectId = pSubjectId;
                            fds.message = "Reached Total License";
                            resFDS.Add(fds);
                        }
                        else
                        {
                            //XDocument xdoc = new XDocument(new XElement("Result", new XAttribute("Result", "-2")));
                            //return xdoc.ToString();
                            fds.departmentId = pDepartmentId;
                            fds.semester = pSemester;
                            fds.subjectId = pSubjectId;
                            fds.message = "failure";
                            resFDS.Add(fds);
                        }
                    }
                    XDocument xdocSuccess = new XDocument(new XElement("SuccessTradeSemester", from res in resSDS
                                                                                               select new XElement("Success",
                                                                                                            new XAttribute("departmentId", res.departmentId),
                                                                                                            new XAttribute("semester", res.semester),
                                                                                                            new XAttribute("subjectId", res.subjectId),
                                                                                                            new XAttribute("message", res.message)
                                                                                                          )));
                    XDocument xdocFailure = new XDocument(new XElement("FailureTradeSemester", from res in resFDS
                                                                                               select new XElement("Failure",
                                                                                                            new XAttribute("departmentId", res.departmentId),
                                                                                                            new XAttribute("semester", res.semester),
                                                                                                            new XAttribute("subjectId", res.subjectId),
                                                                                                            new XAttribute("message", res.message)
                                                                                                          )));
                    return xdocSuccess.ToString() + " \n" + xdocFailure.ToString();
                }
                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "ManageSubjects", "SaveCollegeSubjectDetails", ex.Message, "error");
                    contextsdce.Dispose();
                    XDocument xdoc = new XDocument(new XElement("FailureTradeSemester", new XAttribute("departmentId", "0"),
                                                                                                    new XAttribute("semester", "0"),
                                                                                                     new XAttribute("subjectId", "0"),
                                                                                                    new XAttribute("message", "Error")
                                                                                                  )); // Failure
                    return xdoc.ToString(); // Failure
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }


        public List<TradeSubjects> GetCollegeNotMappedTrades(int collegeId)
        {
            List<TradeSubjects> lTradeSubjects = new List<TradeSubjects>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {
                    lTradeSubjects = (from dsm in contextsdce.department_subject_mapping
                                      join dm in contextsdce.department_master on dsm.department_id equals dm.department_id
                                      join sm in contextsdce.subject_master on dsm.subject_id equals sm.subject_id
                                      join csm in contextsdce.college_subject_mapping on dsm.subject_id equals csm.subject_id into lftcsm
                                      from csm in lftcsm.Where(p => p.department_id == dsm.department_id && p.semester == dsm.semester && p.college_id == collegeId).DefaultIfEmpty()
                                      where csm == null

                                      select new TradeSubjects
                                      {
                                          MappingId = dsm.department_id.ToString() + "-" + dsm.semester + "-" + dsm.subject_id,
                                          DepartmentName = dm.department_name,
                                          Semester = dsm.semester,
                                          SubjectName=sm.subject_name
                                      })
                                      //.OrderBy(x=> x.DepartmentName)
                                      .Distinct().OrderBy(x => x.DepartmentName).ThenBy(x=>x.Semester).ThenBy(x=>x.SubjectName).ToList();
                    return lTradeSubjects;
                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetTradeSubjectDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }
        public List<TradeSubjects> GetCollegeMappedTrades(int collegeId)
        {
            List<TradeSubjects> lTradeSubjects = new List<TradeSubjects>();
            using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
            {
                try
                {

                    var chkTotalLicense = (from csm in contextsdce.college_subject_mapping
                                           join sub in contextsdce.subject_master on csm.subject_id equals sub.subject_id
                                           join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                                           //join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id into cidlft
                                           //from cid in cidlft.Where(x => x.active_status == 1).DefaultIfEmpty()
                                           join cie in contextsdce.college_installation_expiry on csm.department_id equals cie.department_id into cielft
                                           from cie in cielft.Where(x => x.semester == csm.semester && x.subject_id == csm.subject_id).DefaultIfEmpty()
                                           join cide in contextsdce.college_installation_details on cie.college_install_id equals cide.college_install_id into cidelft
                                           from cide in cidelft.Where(x => x.college_id == collegeId).DefaultIfEmpty()
                                           where csm.active_status == 1
                                           && csm.college_id == collegeId
                                           group new { csm, dm, cide } by new { csm.department_id, dm.department_name, csm.semester,csm.subject_id,sub.subject_name,sub.subject_code } into license

                                           select new TradeSubjects
                                           {
                                               MappingId = license.Key.department_id.ToString() + "-" + license.Key.semester + "-" + license.Key.subject_id,
                                               DepartmentName = license.Key.department_name,
                                               Semester = license.Key.semester,
                                               SubjectName = license.Key.subject_code+"-"+license.Key.subject_name,
                                               UsedLicense = license.Count(p => p.cide !=null),
                                               TotalLicense = license.Select(p => p.csm.total_license ?? 0).FirstOrDefault(),
                                               ActivationDays = license.Select(p => p.csm.active_duration_days ?? 0).FirstOrDefault(),                                             
                                               //ActvationDate = license.Select(p => p.cie != null ? p.cie.expiry_on : DateTime.Now).FirstOrDefault(),
                                               //strActvationDate = license.Select(p => p.cie != null ? p.cie.expiry_on.ToString() : "-").FirstOrDefault()
                                               ActvationDate = license.Select(p => p.csm.active_duration_date??DateTime.Now).FirstOrDefault(),
                                               strActvationDate = license.Select(p => p.csm.active_duration_date.ToString()??"-").FirstOrDefault()
                                           }
                                  ).Distinct().ToList();
                 
                    //var chkExistLicense = (from csm in contextsdce.college_subject_mapping
                    //                       join sub in contextsdce.subject_master on csm.subject_id equals sub.subject_id
                    //                       join dm in contextsdce.department_master on csm.department_id equals dm.department_id
                    //                       join cid in contextsdce.college_installation_details on csm.college_id equals cid.college_id
                    //                       join cie in contextsdce.college_installation_expiry on cid.college_install_id equals cie.college_install_id
                    //                       where csm.active_status == 1 && cid.active_status == 1
                    //                       && cie.department_id == csm.department_id && cie.semester == csm.semester && cie.subject_id == csm.subject_id
                    //                       && csm.college_id == collegeId
                    //                       group new { csm, cid, dm, cie } by new { cie.department_id, dm.department_name, cie.semester, csm.subject_id,
                    //                       sub.subject_name, sub.subject_code } into license

                    //                       select new TradeSubjects
                    //                       {
                    //                           MappingId = license.Key.department_id.ToString() + "-" + license.Key.semester,
                    //                           DepartmentName = license.Key.department_name,
                    //                           Semester = license.Key.semester,
                    //                           SubjectName = license.Key.subject_code + "-" + license.Key.subject_name,
                    //                           UsedLicense = license.Select(x => x.cie.college_install_id).Distinct().Count(),
                    //                           TotalLicense = license.Select(p => p.csm.total_license).FirstOrDefault(),
                    //                           ActivationDays = license.Select(p => p.csm.active_duration_days??0).FirstOrDefault(),                                             
                    //                           ActvationDate = license.Select(p => p.cie != null ? p.cie.expiry_on : DateTime.Now).FirstOrDefault(),
                    //                           strActvationDate = license.Select(p => p.cie != null ? p.cie.expiry_on.ToString() : "-").FirstOrDefault()
                    //                       })
                    //             .Distinct().ToList();

                  

                    lTradeSubjects = (from lg in chkTotalLicense //lTradeSubjects
                                      group lg by new { lg.MappingId, lg.DepartmentName, lg.Semester, lg.SubjectName/*,  lg.TotalLicense, lg.ActivationDays, lg.strActvationDate*/ } into g
                                      select new TradeSubjects
                                      {
                                          MappingId = g.Key.MappingId,
                                          DepartmentName = g.Key.DepartmentName,
                                          Semester = g.Key.Semester,
                                          SubjectName =g.Key.SubjectName,
                                          UsedLicense = g.Sum(x => x.UsedLicense),
                                          TotalLicense = g.Select(x=>x.TotalLicense).FirstOrDefault(),
                                          ActivationDays = g.Select(x => x.ActivationDays).FirstOrDefault(),
                                          strActvationDate = g.Select(x => x.strActvationDate).FirstOrDefault() //.Date.ToString("dd-MMM-yyyy")
                                      }).Distinct().ToList();


                
                    return lTradeSubjects;
                }

                catch (Exception ex)
                {
                    Log.WriteLogMessage(PageName, "AdminService", "GetTradeSubjectDetails", ex.Message, "error");
                    throw;
                }
                finally
                {
                    if (contextsdce != null)
                    {
                        contextsdce.Dispose();
                    }
                }
            }
        }

        public string SaveCollegeTradeMapping(int pCollegeId, string pMapTrades, int pTotalLicense, int pDurationDays, int pCreatedBy)
        {
            string[] mappedUniv = pMapTrades.ToString().Split(',');

            try
            {
                int pDepartmentId = 0, pSemester = 0, pSubjectId=0, count = 0;
                int result = 0;
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    foreach (string strDeptSem in mappedUniv)
                    {
                        count++;
                        string[] DeptSemester = strDeptSem.ToString().Split('-');
                        pDepartmentId = Convert.ToInt32(DeptSemester[0]);
                        pSemester = Convert.ToInt32(DeptSemester[1]);
                        pSubjectId = Convert.ToInt32(DeptSemester[2]);

                        var chkExist = (from dsm in contextsdce.department_subject_mapping
                                        join sm in contextsdce.subject_master on dsm.subject_id equals sm.subject_id
                                        where dsm.department_id == pDepartmentId  && dsm.semester == pSemester && dsm.subject_id == pSubjectId
                                        select new { dsm, sm }).ToList();

                        if (chkExist != null && chkExist.Count > 0)
                        {
                            foreach (var deptSub in chkExist)
                            {

                                DateTime actDuration = deptSub.sm.active_duration_date;
                                DateTime actSubjdays = DateTime.Now.AddDays(pDurationDays);

                                college_subject_mapping csm = new college_subject_mapping();
                                csm.college_id = pCollegeId;
                                csm.department_id = deptSub.dsm.department_id;
                                csm.subject_id = deptSub.dsm.subject_id;
                                csm.map_year = deptSub.dsm.map_year;
                                //csm.map_year = 1;
                                csm.semester = deptSub.dsm.semester;
                                //csm.semester = 1;
                                csm.rule_id = deptSub.dsm.rule_id;
                                csm.active_status = deptSub.dsm.active_status;
                                csm.university_id = deptSub.dsm.university_id;
                                csm.total_license = pTotalLicense;
                               

                                if (actDuration > actSubjdays)
                                {
                                    csm.active_duration_days = pDurationDays;
                                    csm.active_duration_date = actSubjdays;
                                }
                                else
                                {
                                    int datedifference = Convert.ToInt32((actSubjdays-actDuration).TotalDays);
                                    csm.active_duration_days = pDurationDays-datedifference;
                                    csm.active_duration_date = actDuration;
                                }
                                csm.created_by = pCreatedBy;
                                csm.created_on = DateTime.Now;
                                contextsdce.college_subject_mapping.Add(csm);
                            }
                            result += contextsdce.SaveChanges();

                        }
                    }
                    return result.ToString();

                }

            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                // throw ex;
                return "-1";
            }
        }
        public string RemoveCollegeTradeMapping(int pCollegeId, string pMapTrades)
        {
            string[] mappedUniv = pMapTrades.ToString().Split(',');

            try
            {
                int pDepartmentId = 0, pSemester = 0, pSubjectId = 0, count = 0;
                int result = 0;
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    foreach (string strDeptSem in mappedUniv)
                    {
                        string[] DeptSemester = strDeptSem.ToString().Split('-');
                        pDepartmentId = Convert.ToInt32(DeptSemester[0]);
                        pSemester = Convert.ToInt32(DeptSemester[1]);
                        pSubjectId = Convert.ToInt32(DeptSemester[2]);

                        var chkExist = (from cie in contextsdce.college_installation_expiry
                                        join cid in contextsdce.college_installation_details on cie.college_install_id equals cid.college_install_id
                                        where cid.college_id == pCollegeId && cie.department_id == pDepartmentId  && cie.semester == pSemester && cie.subject_id == pSubjectId
                                        select cid).ToList();
                        if (chkExist.Count == 0)
                        {
                            count++;
                            contextsdce.college_subject_mapping.RemoveRange(contextsdce.college_subject_mapping.Where(c => c.department_id == pDepartmentId &&  c.college_id == pCollegeId && c.semester == pSemester && c.subject_id == pSubjectId));  
                            result = contextsdce.SaveChanges();
                        }
                        else
                        {

                        }
                    }
                    if (count == mappedUniv.Count())
                    {
                        return "1";
                    }
                    else if (count == 0 && mappedUniv.Count() > 0)
                    {
                        return "2";
                    }
                    else if (count < mappedUniv.Count())
                    {
                        return "3";
                    }
                    else
                    {
                        return "0";
                    }
                }

            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                // throw ex;
                return "-1";
            }
        }

        public string EditCollegeTradeMapping(int pCollegeId, string pMapTrades, int pTotalLicense, int pDurationDays, int pCreatedBy)
        {
            string[] mappedUniv = pMapTrades.ToString().Split(',');

            try
            {
                int pDepartmentId = 0, pSemester = 0, pSubjectId = 0, count = 0;
                int result = 0;
                using (learnengg_payment_portal_entities contextsdce = new learnengg_payment_portal_entities())
                {
                    foreach (string strDeptSem in mappedUniv)
                    {
                        string[] DeptSemester = strDeptSem.ToString().Split('-');
                        pDepartmentId = Convert.ToInt32(DeptSemester[0]);
                        pSemester = Convert.ToInt32(DeptSemester[1]);
                        pSubjectId = Convert.ToInt32(DeptSemester[2]);

                        DateTime newExpiryDate = DateTime.Now.AddDays(pDurationDays);

                        var chkExist = (from csm in contextsdce.college_subject_mapping
                                        join sm in contextsdce.subject_master on csm.subject_id equals sm.subject_id
                                        where csm.college_id == pCollegeId && csm.department_id == pDepartmentId  && csm.semester == pSemester && csm.subject_id == pSubjectId
                                        select sm).ToList();

                        if (chkExist.Count > 0)
                        {
                           // DateTime actDuration = from sm in chkExist select min(sm.active_duration_date);

                            DateTime actDuration = chkExist.Min(x => x.active_duration_date);
                            if (actDuration < newExpiryDate)
                            {
                               
                                int datedifference = Convert.ToInt32((newExpiryDate - actDuration).TotalDays);
                                pDurationDays = (pDurationDays - datedifference);
                                newExpiryDate = actDuration;
                            }
                           

                            if (pTotalLicense == 0 && pDurationDays > 0)
                            {
                                count++;
                                contextsdce.college_subject_mapping
                                            .Where(c => c.department_id == pDepartmentId  && c.college_id == pCollegeId && c.semester == pSemester && c.subject_id == pSubjectId).ToList()  
                                            .ForEach(x => { x.active_duration_days = pDurationDays;x.active_duration_date = newExpiryDate; });

                                result = contextsdce.SaveChanges();
                            }

                            else if (pTotalLicense > 0 && pDurationDays == 0)
                            {
                                count++;

                                int existingUsedLicense = 0 ;

                                existingUsedLicense = getCollegeDepartSubjectsLicenseUsedCounts(pCollegeId, pDepartmentId, pSemester, pSubjectId);

                                if(pTotalLicense< existingUsedLicense)
                                {
                                    pTotalLicense = existingUsedLicense;
                                }

                                contextsdce.college_subject_mapping
                                            .Where(c => c.department_id == pDepartmentId  && c.college_id == pCollegeId && c.semester == pSemester && c.subject_id == pSubjectId).ToList()  //&& c.semester == pSemester
                                            .ForEach(x => { x.total_license = pTotalLicense; });
                                result = contextsdce.SaveChanges();
                            }
                            else if (pTotalLicense > 0 && pDurationDays > 0)
                            {
                                count++;

                                int existingUsedLicense = 0;

                                existingUsedLicense = getCollegeDepartSubjectsLicenseUsedCounts(pCollegeId, pDepartmentId, pSemester, pSubjectId);

                                if (pTotalLicense < existingUsedLicense)
                                {
                                    pTotalLicense = existingUsedLicense;
                                }
                                contextsdce.college_subject_mapping
                                            .Where(c => c.department_id == pDepartmentId && c.college_id == pCollegeId && c.semester == pSemester && c.subject_id == pSubjectId).ToList()  //  && c.semester == pSemester
                                            .ForEach(x => { x.total_license = pTotalLicense; x.active_duration_days = pDurationDays; ; x.active_duration_date = newExpiryDate; });
                                result = contextsdce.SaveChanges();
                            }
                        }

                        var chkExist2 = (from cie in contextsdce.college_installation_expiry
                                         join cid in contextsdce.college_installation_details on cie.college_install_id equals cid.college_install_id
                                         where cid.college_id == pCollegeId && cie.department_id == pDepartmentId && cie.semester == pSemester && cie.subject_id == pSubjectId // && cie.semester == pSemester
                                         select cie).ToList();

                        if (chkExist2.Count > 0)
                        {
                          
                            if (pDurationDays > 0)
                            {
                                foreach (var item in chkExist2)
                                {
                                    item.expiry_on = newExpiryDate;
                                }
                                result = contextsdce.SaveChanges();
                            }
                        }



                    }
                    if (count == mappedUniv.Count())
                    {
                        return "1";
                    }
                    else if (count == 0 && mappedUniv.Count() > 0)
                    {
                        return "2";
                    }
                    else if (count < mappedUniv.Count())
                    {
                        return "3";
                    }
                    else
                    {
                        return "0";
                    }
                }

            }
            catch (System.Data.Entity.Validation.DbEntityValidationException dbEx)
            {
                Exception raise = dbEx;
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        string message = string.Format("{0}:{1}",
                            validationErrors.Entry.Entity.ToString(),
                            validationError.ErrorMessage);
                        // raise a new exception nesting  
                        // the current instance as InnerException  
                        raise = new InvalidOperationException(message, raise);
                    }
                }
                throw raise;
            }
            catch (Exception ex)
            {
                // throw ex;
                return "-1";
            }
        }


    }
}